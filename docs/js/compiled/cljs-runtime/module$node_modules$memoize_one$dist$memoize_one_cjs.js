shadow$provide.module$node_modules$memoize_one$dist$memoize_one_cjs = function(global, require, module, exports) {
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return !1;
    }
    for (var i = 0; i < newInputs.length; i++) {
      var JSCompiler_inline_result = newInputs[i];
      var second = lastInputs[i];
      JSCompiler_inline_result = JSCompiler_inline_result === second ? !0 : safeIsNaN(JSCompiler_inline_result) && safeIsNaN(second) ? !0 : !1;
      if (!JSCompiler_inline_result) {
        return !1;
      }
    }
    return !0;
  }
  var safeIsNaN = Number.isNaN || function(value) {
    return "number" === typeof value && value !== value;
  };
  module.exports = function(resultFn, isEqual) {
    function memoized() {
      for (var newArgs = [], _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i];
      }
      if (cache && cache.lastThis === this && isEqual(newArgs, cache.lastArgs)) {
        return cache.lastResult;
      }
      _i = resultFn.apply(this, newArgs);
      cache = {lastResult:_i, lastArgs:newArgs, lastThis:this};
      return _i;
    }
    void 0 === isEqual && (isEqual = areInputsEqual);
    var cache = null;
    memoized.clear = function() {
      cache = null;
    };
    return memoized;
  };
};

//# sourceMappingURL=module$node_modules$memoize_one$dist$memoize_one_cjs.js.map
