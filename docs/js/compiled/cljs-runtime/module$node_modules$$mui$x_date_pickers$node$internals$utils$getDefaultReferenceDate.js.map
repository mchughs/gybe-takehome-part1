{
"version":3,
"file":"module$node_modules$$mui$x_date_pickers$node$internals$utils$getDefaultReferenceDate.js",
"lineCount":32,
"mappings":"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",
"sources":["node_modules/@mui/x-date-pickers/node/internals/utils/getDefaultReferenceDate.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$x_date_pickers$node$internals$utils$getDefaultReferenceDate\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSectionTypeGranularity = exports.getDefaultReferenceDate = exports.SECTION_TYPE_GRANULARITY = void 0;\nvar _timeUtils = require(\"./time-utils\");\nvar _dateUtils = require(\"./date-utils\");\nconst SECTION_TYPE_GRANULARITY = exports.SECTION_TYPE_GRANULARITY = {\n  year: 1,\n  month: 2,\n  day: 3,\n  hours: 4,\n  minutes: 5,\n  seconds: 6,\n  milliseconds: 7\n};\nconst getSectionTypeGranularity = sections => Math.max(...sections.map(section => SECTION_TYPE_GRANULARITY[section.type] ?? 1));\nexports.getSectionTypeGranularity = getSectionTypeGranularity;\nconst roundDate = (utils, granularity, date) => {\n  if (granularity === SECTION_TYPE_GRANULARITY.year) {\n    return utils.startOfYear(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.month) {\n    return utils.startOfMonth(date);\n  }\n  if (granularity === SECTION_TYPE_GRANULARITY.day) {\n    return utils.startOfDay(date);\n  }\n\n  // We don't have startOfHour / startOfMinute / startOfSecond\n  let roundedDate = date;\n  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {\n    roundedDate = utils.setMinutes(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {\n    roundedDate = utils.setSeconds(roundedDate, 0);\n  }\n  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {\n    roundedDate = utils.setMilliseconds(roundedDate, 0);\n  }\n  return roundedDate;\n};\nconst getDefaultReferenceDate = ({\n  props,\n  utils,\n  granularity,\n  timezone,\n  getTodayDate: inGetTodayDate\n}) => {\n  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, (0, _dateUtils.getTodayDate)(utils, timezone));\n  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.minDate);\n  }\n  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.maxDate);\n  }\n  const isAfter = (0, _timeUtils.createIsAfterIgnoreDatePart)(props.disableIgnoringDatePartForTimeValidation ?? false, utils);\n  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : (0, _dateUtils.mergeDateAndTime)(utils, referenceDate, props.minTime));\n  }\n  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {\n    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : (0, _dateUtils.mergeDateAndTime)(utils, referenceDate, props.maxTime));\n  }\n  return referenceDate;\n};\nexports.getDefaultReferenceDate = getDefaultReferenceDate;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","getSectionTypeGranularity","getDefaultReferenceDate","SECTION_TYPE_GRANULARITY","_timeUtils","_dateUtils","year","month","day","hours","minutes","seconds","milliseconds","sections","Math","max","map","section","type","roundDate","utils","granularity","date","startOfYear","startOfMonth","startOfDay","roundedDate","setMinutes","setSeconds","setMilliseconds","props","timezone","inGetTodayDate","referenceDate","getTodayDate","minDate","isAfterDay","maxDate","isBeforeDay","isAfter","createIsAfterIgnoreDatePart","disableIgnoringDatePartForTimeValidation","minTime","mergeDateAndTime","maxTime"]
}
