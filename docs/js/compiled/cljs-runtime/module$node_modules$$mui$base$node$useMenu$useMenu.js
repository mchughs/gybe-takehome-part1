shadow$provide.module$node_modules$$mui$base$node$useMenu$useMenu = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useMenu = function(parameters = {}) {
    var _useId, _React$useContext;
    const {listboxRef:listboxRefProp, onItemsChange, id:idParam, disabledItemsFocusable = !0, disableListWrap = !1, autoFocus = !0, componentName = "useMenu"} = parameters, rootRef = React.useRef(null);
    parameters = (0,_utils.unstable_useForkRef)(rootRef, listboxRefProp);
    const listboxId = null != (_useId = (0,_utils.unstable_useId)(idParam)) ? _useId : "", {state:{open, changeReason}, dispatch:menuDispatch, triggerElement, registerPopup} = null != (_React$useContext = React.useContext(_DropdownContext.DropdownContext)) ? _React$useContext : FALLBACK_MENU_CONTEXT, isInitiallyOpen = React.useRef(open), {subitems, contextValue:compoundComponentContextValue} = (0,_useCompound.useCompoundParent)();
    _useId = React.useMemo(() => Array.from(subitems.keys()), [subitems]);
    _React$useContext = React.useCallback(itemId => {
      var _subitems$get$ref$cur, _subitems$get;
      return null == itemId ? null : null != (_subitems$get$ref$cur = null == (_subitems$get = subitems.get(itemId)) ? void 0 : _subitems$get.ref.current) ? _subitems$get$ref$cur : null;
    }, [subitems]);
    const isItemDisabled = React.useCallback(id => {
      var _subitems$get2;
      return (null == subitems || null == (_subitems$get2 = subitems.get(id)) ? void 0 : _subitems$get2.disabled) || !1;
    }, [subitems]), getItemAsString = React.useCallback(id => {
      var _subitems$get3, _subitems$get4;
      return (null == (_subitems$get3 = subitems.get(id)) ? void 0 : _subitems$get3.label) || (null == (_subitems$get4 = subitems.get(id)) || null == (_subitems$get4 = _subitems$get4.ref.current) ? void 0 : _subitems$get4.innerText);
    }, [subitems]), reducerActionContext = React.useMemo(() => ({listboxRef:rootRef}), [rootRef]), {dispatch:listDispatch, getRootProps:getListRootProps, contextValue:listContextValue, state:{highlightedValue}, rootRef:mergedListRef} = (0,_useList.useList)({disabledItemsFocusable, disableListWrap, focusManagement:"DOM", getItemDomElement:_React$useContext, getInitialState:() => ({selectedValues:[], highlightedValue:null}), isItemDisabled, items:_useId, getItemAsString, rootRef:parameters, onItemsChange, 
    reducerActionContext, selectionMode:"none", stateReducer:_menuReducer.menuReducer, componentName});
    (0,_utils.unstable_useEnhancedEffect)(() => {
      registerPopup(listboxId);
    }, [listboxId, registerPopup]);
    (0,_utils.unstable_useEnhancedEffect)(() => {
      open && "keydown" === (null == changeReason ? void 0 : changeReason.type) && "ArrowUp" === changeReason.key && listDispatch({type:_useList.ListActionTypes.highlightLast, event:changeReason});
    }, [open, changeReason, listDispatch]);
    React.useEffect(() => {
      if (open && autoFocus && highlightedValue && !isInitiallyOpen.current) {
        var _subitems$get5;
        null == (_subitems$get5 = subitems.get(highlightedValue)) || null == (_subitems$get5 = _subitems$get5.ref) || null == (_subitems$get5 = _subitems$get5.current) || _subitems$get5.focus();
      }
    }, [open, autoFocus, highlightedValue, subitems, _useId]);
    React.useEffect(() => {
      var _rootRef$current;
      if (null != (_rootRef$current = rootRef.current) && _rootRef$current.contains(document.activeElement) && null !== highlightedValue) {
        var _subitems$get6;
        null == subitems || null == (_subitems$get6 = subitems.get(highlightedValue)) || null == (_subitems$get6 = _subitems$get6.ref.current) || _subitems$get6.focus();
      }
    }, [highlightedValue, subitems]);
    const createHandleBlur = otherHandlers => event => {
      var _otherHandlers$onBlur, _rootRef$current2;
      null == (_otherHandlers$onBlur = otherHandlers.onBlur) || _otherHandlers$onBlur.call(otherHandlers, event);
      event.defaultMuiPrevented || null != (_rootRef$current2 = rootRef.current) && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement || menuDispatch({type:_useDropdown.DropdownActionTypes.blur, event});
    }, createHandleKeyDown = otherHandlers => event => {
      var _otherHandlers$onKeyD;
      null == (_otherHandlers$onKeyD = otherHandlers.onKeyDown) || _otherHandlers$onKeyD.call(otherHandlers, event);
      event.defaultMuiPrevented || "Escape" === event.key && menuDispatch({type:_useDropdown.DropdownActionTypes.escapeKeyDown, event});
    }, getOwnListboxHandlers = (otherHandlers = {}) => ({onBlur:createHandleBlur(otherHandlers), onKeyDown:createHandleKeyDown(otherHandlers)});
    React.useDebugValue({subitems, highlightedValue});
    return {contextValue:(0,_extends2.default)({}, compoundComponentContextValue, listContextValue), dispatch:listDispatch, getListboxProps:(externalProps = {}) => {
      const getCombinedRootProps = (0,_combineHooksSlotProps.combineHooksSlotProps)(getOwnListboxHandlers, getListRootProps), externalEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(externalProps);
      return (0,_extends2.default)({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {id:listboxId, role:"menu"});
    }, highlightedValue, listboxRef:mergedListRef, menuItems:subitems, open, triggerElement};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _menuReducer = require("module$node_modules$$mui$base$node$useMenu$menuReducer"), _DropdownContext = require("module$node_modules$$mui$base$node$useDropdown$DropdownContext"), _useList = require("module$node_modules$$mui$base$node$useList$index"), _useDropdown = require("module$node_modules$$mui$base$node$useDropdown$index"), _useCompound = require("module$node_modules$$mui$base$node$useCompound$index"), 
  _combineHooksSlotProps = require("module$node_modules$$mui$base$node$utils$combineHooksSlotProps"), _extractEventHandlers = require("module$node_modules$$mui$base$node$utils$extractEventHandlers");
  const FALLBACK_MENU_CONTEXT = {dispatch:() => {
  }, popupId:"", registerPopup:() => {
  }, registerTrigger:() => {
  }, state:{open:!0, changeReason:null}, triggerElement:null};
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useMenu$useMenu.js.map
