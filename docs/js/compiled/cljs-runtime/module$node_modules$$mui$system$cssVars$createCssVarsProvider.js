shadow$provide.module$node_modules$$mui$system$cssVars$createCssVarsProvider = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.DISABLE_CSS_TRANSITION = void 0;
  exports.default = function(options) {
    function CssVarsProvider(props) {
      const {children, theme:themeProp = defaultTheme, modeStorageKey = defaultModeStorageKey, colorSchemeStorageKey = defaultColorSchemeStorageKey, attribute = defaultAttribute, defaultMode = designSystemMode, defaultColorScheme = designSystemColorScheme, disableTransitionOnChange = designSystemTransitionOnChange, storageWindow = "undefined" === typeof window ? void 0 : window, documentNode = "undefined" === typeof document ? void 0 : document, colorSchemeNode = "undefined" === typeof document ? 
      void 0 : document.documentElement, colorSchemeSelector = ":root", disableNestedContext = !1, disableStyleSheetGeneration = !1} = props, hasMounted = React.useRef(!1);
      var upperTheme = (0,_privateTheming.useTheme)(), ctx = React.useContext(ColorSchemeContext);
      props = !!ctx && !disableNestedContext;
      const scopedTheme = themeProp[themeId];
      var _ref = scopedTheme || themeProp;
      const {colorSchemes = {}, components = {}, generateCssVars = () => ({vars:{}, css:{}}), cssVarPrefix} = _ref;
      _ref = (0,_objectWithoutPropertiesLoose2.default)(_ref, _excluded);
      const allColorSchemes = Object.keys(colorSchemes), defaultLightColorScheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.light, defaultDarkColorScheme = "string" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.dark, {mode:stateMode, setMode, systemMode, lightColorScheme, darkColorScheme, colorScheme:stateColorScheme, setColorScheme} = (0,_useCurrentColorScheme.default)({supportedColorSchemes:allColorSchemes, defaultLightColorScheme, 
      defaultDarkColorScheme, modeStorageKey, colorSchemeStorageKey, defaultMode, storageWindow});
      let mode = stateMode, colorScheme = stateColorScheme;
      props && (mode = ctx.mode, colorScheme = ctx.colorScheme);
      ctx = mode ? mode : "system" === defaultMode ? designSystemMode : defaultMode;
      const calculatedColorScheme = colorScheme ? colorScheme : "dark" === ctx ? defaultDarkColorScheme : defaultLightColorScheme, {css:rootCss, vars:rootVars} = generateCssVars(), theme = (0,_extends2.default)({}, _ref, {components, colorSchemes, cssVarPrefix, vars:rootVars, getColorSchemeSelector:targetColorScheme => `[${attribute}="${targetColorScheme}"] &`}), defaultColorSchemeStyleSheet = {}, otherColorSchemesStyleSheet = {};
      Object.entries(colorSchemes).forEach(([key, scheme]) => {
        const {css, vars} = generateCssVars(key);
        theme.vars = (0,_deepmerge.default)(theme.vars, vars);
        key === calculatedColorScheme && (Object.keys(scheme).forEach(schemeKey => {
          theme[schemeKey] = scheme[schemeKey] && "object" === typeof scheme[schemeKey] ? (0,_extends2.default)({}, theme[schemeKey], scheme[schemeKey]) : scheme[schemeKey];
        }), theme.palette && (theme.palette.colorScheme = key));
        if (key === ("string" === typeof defaultColorScheme ? defaultColorScheme : "dark" === defaultMode ? defaultColorScheme.dark : defaultColorScheme.light)) {
          if (excludeVariablesFromRoot) {
            const excludedVariables = {};
            excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {
              excludedVariables[cssVar] = css[cssVar];
              delete css[cssVar];
            });
            defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
          }
          defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css;
        } else {
          otherColorSchemesStyleSheet[`${":root" === colorSchemeSelector ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css;
        }
      });
      theme.vars = (0,_deepmerge.default)(theme.vars, rootVars);
      React.useEffect(() => {
        colorScheme && colorSchemeNode && colorSchemeNode.setAttribute(attribute, colorScheme);
      }, [colorScheme, attribute, colorSchemeNode]);
      React.useEffect(() => {
        let timer;
        if (disableTransitionOnChange && hasMounted.current && documentNode) {
          const css = documentNode.createElement("style");
          css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
          documentNode.head.appendChild(css);
          window.getComputedStyle(documentNode.body);
          timer = setTimeout(() => {
            documentNode.head.removeChild(css);
          }, 1);
        }
        return () => {
          clearTimeout(timer);
        };
      }, [colorScheme, disableTransitionOnChange, documentNode]);
      React.useEffect(() => {
        hasMounted.current = !0;
        return () => {
          hasMounted.current = !1;
        };
      }, []);
      ctx = React.useMemo(() => ({allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode}), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
      _ref = !0;
      if (disableStyleSheetGeneration || props && (null == upperTheme ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
        _ref = !1;
      }
      upperTheme = (0,_jsxRuntime.jsxs)(React.Fragment, {children:[_ref && (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:{[colorSchemeSelector]:rootCss}}), (0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:defaultColorSchemeStyleSheet}), (0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:otherColorSchemesStyleSheet})]}), (0,_jsxRuntime.jsx)(_ThemeProvider.default, {themeId:scopedTheme ? themeId : void 0, theme:resolveTheme ? resolveTheme(theme) : 
      theme, children})]});
      return props ? upperTheme : (0,_jsxRuntime.jsx)(ColorSchemeContext.Provider, {value:ctx, children:upperTheme});
    }
    const {themeId, theme:defaultTheme = {}, attribute:defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE, modeStorageKey:defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey:defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, defaultMode:designSystemMode = "light", defaultColorScheme:designSystemColorScheme, disableTransitionOnChange:designSystemTransitionOnChange = !1, resolveTheme, excludeVariablesFromRoot} = 
    options;
    (!defaultTheme.colorSchemes || "string" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[designSystemColorScheme] || "object" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[null == designSystemColorScheme ? void 0 : designSystemColorScheme.light] || "object" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[null == designSystemColorScheme ? void 0 : designSystemColorScheme.dark]) && console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
    const ColorSchemeContext = React.createContext(void 0);
    ColorSchemeContext.displayName = "ColorSchemeContext";
    CssVarsProvider.propTypes = {attribute:_propTypes.default.string, children:_propTypes.default.node, colorSchemeNode:_propTypes.default.any, colorSchemeSelector:_propTypes.default.string, colorSchemeStorageKey:_propTypes.default.string, defaultColorScheme:_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]), defaultMode:_propTypes.default.string, disableNestedContext:_propTypes.default.bool, disableStyleSheetGeneration:_propTypes.default.bool, disableTransitionOnChange:_propTypes.default.bool, 
    documentNode:_propTypes.default.any, modeStorageKey:_propTypes.default.string, storageWindow:_propTypes.default.any, theme:_propTypes.default.object};
    const defaultLightColorScheme = "string" === typeof designSystemColorScheme ? designSystemColorScheme : designSystemColorScheme.light, defaultDarkColorScheme = "string" === typeof designSystemColorScheme ? designSystemColorScheme : designSystemColorScheme.dark;
    return {CssVarsProvider, useColorScheme:() => {
      const value = React.useContext(ColorSchemeContext);
      if (!value) {
        throw Error("MUI: `useColorScheme` must be called under \x3cCssVarsProvider /\x3e");
      }
      return value;
    }, getInitColorSchemeScript:params => (0,_getInitColorSchemeScript.default)((0,_extends2.default)({attribute:defaultAttribute, colorSchemeStorageKey:defaultColorSchemeStorageKey, defaultMode:designSystemMode, defaultLightColorScheme, defaultDarkColorScheme, modeStorageKey:defaultModeStorageKey}, params))};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose"));
  global(require("module$node_modules$$mui$utils$node$formatMuiErrorMessage$index"));
  var React = _interopRequireWildcard(require("module$node_modules$react$index")), _propTypes = global(require("module$node_modules$prop_types$index")), _deepmerge = global(require("module$node_modules$$mui$utils$node$deepmerge$index")), _styledEngine = require("module$node_modules$$mui$styled_engine$node$index"), _privateTheming = require("module$node_modules$$mui$private_theming$node$index"), _ThemeProvider = global(require("module$node_modules$$mui$system$ThemeProvider$index")), _getInitColorSchemeScript = 
  _interopRequireWildcard(require("module$node_modules$$mui$system$cssVars$getInitColorSchemeScript")), _useCurrentColorScheme = global(require("module$node_modules$$mui$system$cssVars$useCurrentColorScheme")), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = ["colorSchemes", "components", "generateCssVars", "cssVarPrefix"], DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
};

//# sourceMappingURL=module$node_modules$$mui$system$cssVars$createCssVarsProvider.js.map
