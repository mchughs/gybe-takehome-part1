shadow$provide.module$node_modules$$mui$material$node$Chip$Chip = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }
  function isDeleteKeyboardEvent(keyboardEvent) {
    return "Backspace" === keyboardEvent.key || "Delete" === keyboardEvent.key;
  }
  "use client";
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), _extends2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$extends")), React = _interopRequireWildcard(require("module$node_modules$react$index"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx")), _composeClasses = _interopRequireDefault(require("module$node_modules$$mui$utils$node$composeClasses$index")), _colorManipulator = require("module$node_modules$$mui$system$colorManipulator"), _Cancel = _interopRequireDefault(require("module$node_modules$$mui$material$node$internal$svg_icons$Cancel")), _useForkRef = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$useForkRef"));
  module = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$unsupportedProp"));
  var _capitalize = _interopRequireDefault(require("module$node_modules$$mui$material$node$utils$capitalize")), _ButtonBase = _interopRequireDefault(require("module$node_modules$$mui$material$node$ButtonBase$index")), _useThemeProps = _interopRequireDefault(require("module$node_modules$$mui$material$node$styles$useThemeProps"));
  _interopRequireDefault = _interopRequireDefault(require("module$node_modules$$mui$material$node$styles$styled"));
  var _chipClasses = _interopRequireWildcard(require("module$node_modules$$mui$material$node$Chip$chipClasses")), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = "avatar className clickable color component deleteIcon disabled icon label onClick onDelete onKeyDown onKeyUp size variant tabIndex skipFocusWhenDisabled".split(" "), useUtilityClasses = ownerState => {
    const {classes, disabled, size, color, iconColor, onDelete, clickable, variant} = ownerState;
    ownerState = {root:["root", variant, disabled && "disabled", `size${(0,_capitalize.default)(size)}`, `color${(0,_capitalize.default)(color)}`, clickable && "clickable", clickable && `clickableColor${(0,_capitalize.default)(color)}`, onDelete && "deletable", onDelete && `deletableColor${(0,_capitalize.default)(color)}`, `${variant}${(0,_capitalize.default)(color)}`], label:["label", `label${(0,_capitalize.default)(size)}`], avatar:["avatar", `avatar${(0,_capitalize.default)(size)}`, `avatarColor${(0,_capitalize.default)(color)}`], 
    icon:["icon", `icon${(0,_capitalize.default)(size)}`, `iconColor${(0,_capitalize.default)(iconColor)}`], deleteIcon:["deleteIcon", `deleteIcon${(0,_capitalize.default)(size)}`, `deleteIconColor${(0,_capitalize.default)(color)}`, `deleteIcon${(0,_capitalize.default)(variant)}Color${(0,_capitalize.default)(color)}`]};
    return (0,_composeClasses.default)(ownerState, _chipClasses.getChipUtilityClass, classes);
  }, ChipRoot = (0,_interopRequireDefault.default)("div", {name:"MuiChip", slot:"Root", overridesResolver:(props, styles) => {
    ({ownerState:props} = props);
    const {color, iconColor, clickable, onDelete, size, variant} = props;
    return [{[`& .${_chipClasses.default.avatar}`]:styles.avatar}, {[`& .${_chipClasses.default.avatar}`]:styles[`avatar${(0,_capitalize.default)(size)}`]}, {[`& .${_chipClasses.default.avatar}`]:styles[`avatarColor${(0,_capitalize.default)(color)}`]}, {[`& .${_chipClasses.default.icon}`]:styles.icon}, {[`& .${_chipClasses.default.icon}`]:styles[`icon${(0,_capitalize.default)(size)}`]}, {[`& .${_chipClasses.default.icon}`]:styles[`iconColor${(0,_capitalize.default)(iconColor)}`]}, {[`& .${_chipClasses.default.deleteIcon}`]:styles.deleteIcon}, 
    {[`& .${_chipClasses.default.deleteIcon}`]:styles[`deleteIcon${(0,_capitalize.default)(size)}`]}, {[`& .${_chipClasses.default.deleteIcon}`]:styles[`deleteIconColor${(0,_capitalize.default)(color)}`]}, {[`& .${_chipClasses.default.deleteIcon}`]:styles[`deleteIcon${(0,_capitalize.default)(variant)}Color${(0,_capitalize.default)(color)}`]}, styles.root, styles[`size${(0,_capitalize.default)(size)}`], styles[`color${(0,_capitalize.default)(color)}`], clickable && styles.clickable, clickable && "default" !== 
    color && styles[`clickableColor${(0,_capitalize.default)(color)})`], onDelete && styles.deletable, onDelete && "default" !== color && styles[`deletableColor${(0,_capitalize.default)(color)}`], styles[variant], styles[`${variant}${(0,_capitalize.default)(color)}`]];
  }})(({theme, ownerState}) => {
    const textColor = "light" === theme.palette.mode ? theme.palette.grey[700] : theme.palette.grey[300];
    return (0,_extends2.default)({maxWidth:"100%", fontFamily:theme.typography.fontFamily, fontSize:theme.typography.pxToRem(13), display:"inline-flex", alignItems:"center", justifyContent:"center", height:32, color:(theme.vars || theme).palette.text.primary, backgroundColor:(theme.vars || theme).palette.action.selected, borderRadius:16, whiteSpace:"nowrap", transition:theme.transitions.create(["background-color", "box-shadow"]), cursor:"unset", outline:0, textDecoration:"none", border:0, padding:0, 
    verticalAlign:"middle", boxSizing:"border-box", [`&.${_chipClasses.default.disabled}`]:{opacity:(theme.vars || theme).palette.action.disabledOpacity, pointerEvents:"none"}, [`& .${_chipClasses.default.avatar}`]:{marginLeft:5, marginRight:-6, width:24, height:24, color:theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor, fontSize:theme.typography.pxToRem(12)}, [`& .${_chipClasses.default.avatarColorPrimary}`]:{color:(theme.vars || theme).palette.primary.contrastText, backgroundColor:(theme.vars || 
    theme).palette.primary.dark}, [`& .${_chipClasses.default.avatarColorSecondary}`]:{color:(theme.vars || theme).palette.secondary.contrastText, backgroundColor:(theme.vars || theme).palette.secondary.dark}, [`& .${_chipClasses.default.avatarSmall}`]:{marginLeft:4, marginRight:-4, width:18, height:18, fontSize:theme.typography.pxToRem(10)}, [`& .${_chipClasses.default.icon}`]:(0,_extends2.default)({marginLeft:5, marginRight:-6}, "small" === ownerState.size && {fontSize:18, marginLeft:4, marginRight:-4}, 
    ownerState.iconColor === ownerState.color && (0,_extends2.default)({color:theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor}, "default" !== ownerState.color && {color:"inherit"})), [`& .${_chipClasses.default.deleteIcon}`]:(0,_extends2.default)({WebkitTapHighlightColor:"transparent", color:theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : (0,_colorManipulator.alpha)(theme.palette.text.primary, 0.26), fontSize:22, cursor:"pointer", margin:"0 5px 0 -6px", "\x26:hover":{color:theme.vars ? 
    `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : (0,_colorManipulator.alpha)(theme.palette.text.primary, 0.4)}}, "small" === ownerState.size && {fontSize:16, marginRight:4, marginLeft:-4}, "default" !== ownerState.color && {color:theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : (0,_colorManipulator.alpha)(theme.palette[ownerState.color].contrastText, 0.7), "\x26:hover, \x26:active":{color:(theme.vars || theme).palette[ownerState.color].contrastText}})}, 
    "small" === ownerState.size && {height:24}, "default" !== ownerState.color && {backgroundColor:(theme.vars || theme).palette[ownerState.color].main, color:(theme.vars || theme).palette[ownerState.color].contrastText}, ownerState.onDelete && {[`&.${_chipClasses.default.focusVisible}`]:{backgroundColor:theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0,_colorManipulator.alpha)(theme.palette.action.selected, 
    theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)}}, ownerState.onDelete && "default" !== ownerState.color && {[`&.${_chipClasses.default.focusVisible}`]:{backgroundColor:(theme.vars || theme).palette[ownerState.color].dark}});
  }, ({theme, ownerState}) => (0,_extends2.default)({}, ownerState.clickable && {userSelect:"none", WebkitTapHighlightColor:"transparent", cursor:"pointer", "\x26:hover":{backgroundColor:theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0,_colorManipulator.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)}, [`&.${_chipClasses.default.focusVisible}`]:{backgroundColor:theme.vars ? 
  `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0,_colorManipulator.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)}, "\x26:active":{boxShadow:(theme.vars || theme).shadows[1]}}, ownerState.clickable && "default" !== ownerState.color && {[`&:hover, &.${_chipClasses.default.focusVisible}`]:{backgroundColor:(theme.vars || theme).palette[ownerState.color].dark}}), 
  ({theme, ownerState}) => (0,_extends2.default)({}, "outlined" === ownerState.variant && {backgroundColor:"transparent", border:theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${"light" === theme.palette.mode ? theme.palette.grey[400] : theme.palette.grey[700]}`, [`&.${_chipClasses.default.clickable}:hover`]:{backgroundColor:(theme.vars || theme).palette.action.hover}, [`&.${_chipClasses.default.focusVisible}`]:{backgroundColor:(theme.vars || theme).palette.action.focus}, 
  [`& .${_chipClasses.default.avatar}`]:{marginLeft:4}, [`& .${_chipClasses.default.avatarSmall}`]:{marginLeft:2}, [`& .${_chipClasses.default.icon}`]:{marginLeft:4}, [`& .${_chipClasses.default.iconSmall}`]:{marginLeft:2}, [`& .${_chipClasses.default.deleteIcon}`]:{marginRight:5}, [`& .${_chipClasses.default.deleteIconSmall}`]:{marginRight:3}}, "outlined" === ownerState.variant && "default" !== ownerState.color && {color:(theme.vars || theme).palette[ownerState.color].main, border:`1px solid ${theme.vars ? 
  `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0,_colorManipulator.alpha)(theme.palette[ownerState.color].main, 0.7)}`, [`&.${_chipClasses.default.clickable}:hover`]:{backgroundColor:theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0,_colorManipulator.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)}, [`&.${_chipClasses.default.focusVisible}`]:{backgroundColor:theme.vars ? 
  `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : (0,_colorManipulator.alpha)(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)}, [`& .${_chipClasses.default.deleteIcon}`]:{color:theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0,_colorManipulator.alpha)(theme.palette[ownerState.color].main, 0.7), "\x26:hover, \x26:active":{color:(theme.vars || theme).palette[ownerState.color].main}}})), 
  ChipLabel = (0,_interopRequireDefault.default)("span", {name:"MuiChip", slot:"Label", overridesResolver:(props, styles) => {
    ({ownerState:props} = props);
    ({size:props} = props);
    return [styles.label, styles[`label${(0,_capitalize.default)(props)}`]];
  }})(({ownerState}) => (0,_extends2.default)({overflow:"hidden", textOverflow:"ellipsis", paddingLeft:12, paddingRight:12, whiteSpace:"nowrap"}, "outlined" === ownerState.variant && {paddingLeft:11, paddingRight:11}, "small" === ownerState.size && {paddingLeft:8, paddingRight:8}, "small" === ownerState.size && "outlined" === ownerState.variant && {paddingLeft:7, paddingRight:7}));
  require = React.forwardRef(function(inProps, ref) {
    var props = (0,_useThemeProps.default)({props:inProps, name:"MuiChip"});
    const {avatar:avatarProp, className, clickable:clickableProp, color = "default", component:ComponentProp, deleteIcon:deleteIconProp, disabled = !1, icon:iconProp, label, onClick, onDelete, onKeyDown, onKeyUp, size = "medium", variant = "filled", tabIndex, skipFocusWhenDisabled = !1} = props;
    inProps = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded);
    const chipRef = React.useRef(null);
    ref = (0,_useForkRef.default)(chipRef, ref);
    var handleDeleteIconClick = event => {
      event.stopPropagation();
      onDelete && onDelete(event);
    };
    const clickable = !1 !== clickableProp && onClick ? !0 : clickableProp, component = clickable || onDelete ? _ButtonBase.default : ComponentProp || "div";
    props = (0,_extends2.default)({}, props, {component, disabled, size, color, iconColor:React.isValidElement(iconProp) ? iconProp.props.color || color : color, onDelete:!!onDelete, clickable, variant});
    const classes = useUtilityClasses(props), moreProps = component === _ButtonBase.default ? (0,_extends2.default)({component:ComponentProp || "div", focusVisibleClassName:classes.focusVisible}, onDelete && {disableRipple:!0}) : {};
    let deleteIcon = null;
    onDelete && (deleteIcon = deleteIconProp && React.isValidElement(deleteIconProp) ? React.cloneElement(deleteIconProp, {className:(0,_clsx.default)(deleteIconProp.props.className, classes.deleteIcon), onClick:handleDeleteIconClick}) : (0,_jsxRuntime.jsx)(_Cancel.default, {className:(0,_clsx.default)(classes.deleteIcon), onClick:handleDeleteIconClick}));
    handleDeleteIconClick = null;
    avatarProp && React.isValidElement(avatarProp) && (handleDeleteIconClick = React.cloneElement(avatarProp, {className:(0,_clsx.default)(classes.avatar, avatarProp.props.className)}));
    let icon = null;
    iconProp && React.isValidElement(iconProp) && (icon = React.cloneElement(iconProp, {className:(0,_clsx.default)(classes.icon, iconProp.props.className)}));
    handleDeleteIconClick && icon && console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
    return (0,_jsxRuntime.jsxs)(ChipRoot, (0,_extends2.default)({as:component, className:(0,_clsx.default)(classes.root, className), disabled:clickable && disabled ? !0 : void 0, onClick, onKeyDown:event => {
      event.currentTarget === event.target && isDeleteKeyboardEvent(event) && event.preventDefault();
      onKeyDown && onKeyDown(event);
    }, onKeyUp:event => {
      event.currentTarget === event.target && (onDelete && isDeleteKeyboardEvent(event) ? onDelete(event) : "Escape" === event.key && chipRef.current && chipRef.current.blur());
      onKeyUp && onKeyUp(event);
    }, ref, tabIndex:skipFocusWhenDisabled && disabled ? -1 : tabIndex, ownerState:props}, moreProps, inProps, {children:[handleDeleteIconClick || icon, (0,_jsxRuntime.jsx)(ChipLabel, {className:(0,_clsx.default)(classes.label), ownerState:props, children:label}), deleteIcon]}));
  });
  require.propTypes = {avatar:global.default.element, children:module.default, classes:global.default.object, className:global.default.string, clickable:global.default.bool, color:global.default.oneOfType([global.default.oneOf("default primary secondary error info success warning".split(" ")), global.default.string]), component:global.default.elementType, deleteIcon:global.default.element, disabled:global.default.bool, icon:global.default.element, label:global.default.node, onClick:global.default.func, 
  onDelete:global.default.func, onKeyDown:global.default.func, onKeyUp:global.default.func, size:global.default.oneOfType([global.default.oneOf(["medium", "small"]), global.default.string]), skipFocusWhenDisabled:global.default.bool, sx:global.default.oneOfType([global.default.arrayOf(global.default.oneOfType([global.default.func, global.default.object, global.default.bool])), global.default.func, global.default.object]), tabIndex:global.default.number, variant:global.default.oneOfType([global.default.oneOf(["filled", 
  "outlined"]), global.default.string])};
  exports.default = require;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$Chip$Chip.js.map
