shadow$provide.module$node_modules$react_select$dist$Select_d63eed7b_cjs_dev = function(global, require, module, exports) {
  function DummyInput(_ref) {
    var innerRef = _ref.innerRef;
    _ref = _objectWithoutProperties(_ref, _excluded);
    _ref = index.removeProps(_ref, "onExited", "in", "enter", "exit", "appear");
    return react.jsx("input", _extends({ref:innerRef}, _ref, {css:react.css({label:"dummyInput", background:0, border:0, caretColor:"transparent", fontSize:"inherit", gridArea:"1 / 1 / 2 / 3", outline:0, padding:0, width:1, color:"transparent", left:-100, opacity:0, position:"relative", transform:"scale(.01)"}, ";label:DummyInput;", "/*# sourceMappingURL\x3ddata:application/json;charset\x3dutf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkR1bW15SW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlCTSIsImZpbGUiOiJEdW1teUlucHV0LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgcmVtb3ZlUHJvcHMgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIER1bW15SW5wdXQoe1xuICBpbm5lclJlZixcbiAgLi4ucHJvcHNcbn06IEpTWC5JbnRyaW5zaWNFbGVtZW50c1snaW5wdXQnXSAmIHtcbiAgcmVhZG9ubHkgaW5uZXJSZWY6IFJlZjxIVE1MSW5wdXRFbGVtZW50Pjtcbn0pIHtcbiAgLy8gUmVtb3ZlIGFuaW1hdGlvbiBwcm9wcyBub3QgbWVhbnQgZm9yIEhUTUwgZWxlbWVudHNcbiAgY29uc3QgZmlsdGVyZWRQcm9wcyA9IHJlbW92ZVByb3BzKFxuICAgIHByb3BzLFxuICAgICdvbkV4aXRlZCcsXG4gICAgJ2luJyxcbiAgICAnZW50ZXInLFxuICAgICdleGl0JyxcbiAgICAnYXBwZWFyJ1xuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGlucHV0XG4gICAgICByZWY9e2lubmVyUmVmfVxuICAgICAgey4uLmZpbHRlcmVkUHJvcHN9XG4gICAgICBjc3M9e3tcbiAgICAgICAgbGFiZWw6ICdkdW1teUlucHV0JyxcbiAgICAgICAgLy8gZ2V0IHJpZCBvZiBhbnkgZGVmYXVsdCBzdHlsZXNcbiAgICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgICAgYm9yZGVyOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHRoaXMgaGlkZXMgdGhlIGZsYXNoaW5nIGN1cnNvclxuICAgICAgICBjYXJldENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBmb250U2l6ZTogJ2luaGVyaXQnLFxuICAgICAgICBncmlkQXJlYTogJzEgLyAxIC8gMiAvIDMnLFxuICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAvLyBpbXBvcnRhbnQhIHdpdGhvdXQgYHdpZHRoYCBicm93c2VycyB3b24ndCBhbGxvdyBmb2N1c1xuICAgICAgICB3aWR0aDogMSxcblxuICAgICAgICAvLyByZW1vdmUgY3Vyc29yIG9uIGRlc2t0b3BcbiAgICAgICAgY29sb3I6ICd0cmFuc3BhcmVudCcsXG5cbiAgICAgICAgLy8gcmVtb3ZlIGN1cnNvciBvbiBtb2JpbGUgd2hpbHN0IG1haW50YWluaW5nIFwic2Nyb2xsIGludG8gdmlld1wiIGJlaGF2aW91clxuICAgICAgICBsZWZ0OiAtMTAwLFxuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoLjAxKScsXG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59XG4iXX0\x3d */")}));
  }
  function useScrollCapture(_ref) {
    var isEnabled = _ref.isEnabled, onBottomArrive = _ref.onBottomArrive, onBottomLeave = _ref.onBottomLeave, onTopArrive = _ref.onTopArrive, onTopLeave = _ref.onTopLeave, isBottom = React.useRef(!1), isTop = React.useRef(!1), touchStart = React.useRef(0), scrollTarget = React.useRef(null), handleEventDelta = React.useCallback(function(event, delta) {
      if (null !== scrollTarget.current) {
        var _scrollTarget$current = scrollTarget.current, scrollTop = _scrollTarget$current.scrollTop, scrollHeight = _scrollTarget$current.scrollHeight, target = scrollTarget.current, isDeltaPositive = 0 < delta;
        _scrollTarget$current = scrollHeight - _scrollTarget$current.clientHeight - scrollTop;
        var shouldCancelScroll = !1;
        _scrollTarget$current > delta && isBottom.current && (onBottomLeave && onBottomLeave(event), isBottom.current = !1);
        isDeltaPositive && isTop.current && (onTopLeave && onTopLeave(event), isTop.current = !1);
        isDeltaPositive && delta > _scrollTarget$current ? (onBottomArrive && !isBottom.current && onBottomArrive(event), target.scrollTop = scrollHeight, shouldCancelScroll = !0, isBottom.current = !0) : !isDeltaPositive && -delta > scrollTop && (onTopArrive && !isTop.current && onTopArrive(event), target.scrollTop = 0, shouldCancelScroll = !0, isTop.current = !0);
        shouldCancelScroll && (event.cancelable && event.preventDefault(), event.stopPropagation());
      }
    }, [onBottomArrive, onBottomLeave, onTopArrive, onTopLeave]), onWheel = React.useCallback(function(event) {
      handleEventDelta(event, event.deltaY);
    }, [handleEventDelta]), onTouchStart = React.useCallback(function(event) {
      touchStart.current = event.changedTouches[0].clientY;
    }, []), onTouchMove = React.useCallback(function(event) {
      handleEventDelta(event, touchStart.current - event.changedTouches[0].clientY);
    }, [handleEventDelta]), startListening = React.useCallback(function(el) {
      if (el) {
        var notPassive = index.supportsPassiveEvents ? {passive:!1} : !1;
        el.addEventListener("wheel", onWheel, notPassive);
        el.addEventListener("touchstart", onTouchStart, notPassive);
        el.addEventListener("touchmove", onTouchMove, notPassive);
      }
    }, [onTouchMove, onTouchStart, onWheel]), stopListening = React.useCallback(function(el) {
      el && (el.removeEventListener("wheel", onWheel, !1), el.removeEventListener("touchstart", onTouchStart, !1), el.removeEventListener("touchmove", onTouchMove, !1));
    }, [onTouchMove, onTouchStart, onWheel]);
    React.useEffect(function() {
      if (isEnabled) {
        var element = scrollTarget.current;
        startListening(element);
        return function() {
          stopListening(element);
        };
      }
    }, [isEnabled, startListening, stopListening]);
    return function(element) {
      scrollTarget.current = element;
    };
  }
  function preventTouchMove(e) {
    e.preventDefault();
  }
  function allowTouchMove(e) {
    e.stopPropagation();
  }
  function preventInertiaScroll() {
    var top = this.scrollTop, totalScroll = this.scrollHeight, currentScroll = top + this.offsetHeight;
    0 === top ? this.scrollTop = 1 : currentScroll === totalScroll && (this.scrollTop = top - 1);
  }
  function useScrollLock(_ref) {
    var isEnabled = _ref.isEnabled;
    _ref = _ref.accountForScrollbars;
    var accountForScrollbars = void 0 === _ref ? !0 : _ref, originalStyles = React.useRef({}), scrollTarget = React.useRef(null), addScrollLock = React.useCallback(function(touchScrollTarget) {
      if (canUseDOM) {
        var target = document.body, targetStyle = target && target.style;
        accountForScrollbars && STYLE_KEYS.forEach(function(key) {
          originalStyles.current[key] = targetStyle && targetStyle[key];
        });
        if (accountForScrollbars && 1 > activeScrollLocks) {
          var currentPadding = parseInt(originalStyles.current.paddingRight, 10) || 0;
          currentPadding = window.innerWidth - (document.body ? document.body.clientWidth : 0) + currentPadding || 0;
          Object.keys(LOCK_STYLES).forEach(function(key) {
            var val = LOCK_STYLES[key];
            targetStyle && (targetStyle[key] = val);
          });
          targetStyle && (targetStyle.paddingRight = "".concat(currentPadding, "px"));
        }
        target && ("ontouchstart" in window || navigator.maxTouchPoints) && (target.addEventListener("touchmove", preventTouchMove, listenerOptions), touchScrollTarget && (touchScrollTarget.addEventListener("touchstart", preventInertiaScroll, listenerOptions), touchScrollTarget.addEventListener("touchmove", allowTouchMove, listenerOptions)));
        activeScrollLocks += 1;
      }
    }, [accountForScrollbars]), removeScrollLock = React.useCallback(function(touchScrollTarget) {
      if (canUseDOM) {
        var target = document.body, targetStyle = target && target.style;
        activeScrollLocks = Math.max(activeScrollLocks - 1, 0);
        accountForScrollbars && 1 > activeScrollLocks && STYLE_KEYS.forEach(function(key) {
          var val = originalStyles.current[key];
          targetStyle && (targetStyle[key] = val);
        });
        target && ("ontouchstart" in window || navigator.maxTouchPoints) && (target.removeEventListener("touchmove", preventTouchMove, listenerOptions), touchScrollTarget && (touchScrollTarget.removeEventListener("touchstart", preventInertiaScroll, listenerOptions), touchScrollTarget.removeEventListener("touchmove", allowTouchMove, listenerOptions)));
      }
    }, [accountForScrollbars]);
    React.useEffect(function() {
      if (isEnabled) {
        var element = scrollTarget.current;
        addScrollLock(element);
        return function() {
          removeScrollLock(element);
        };
      }
    }, [isEnabled, addScrollLock, removeScrollLock]);
    return function(element) {
      scrollTarget.current = element;
    };
  }
  function ScrollManager(_ref) {
    var children = _ref.children, lockEnabled = _ref.lockEnabled, _ref$captureEnabled = _ref.captureEnabled, setScrollCaptureTarget = useScrollCapture({isEnabled:void 0 === _ref$captureEnabled ? !0 : _ref$captureEnabled, onBottomArrive:_ref.onBottomArrive, onBottomLeave:_ref.onBottomLeave, onTopArrive:_ref.onTopArrive, onTopLeave:_ref.onTopLeave}), setScrollLockTarget = useScrollLock({isEnabled:lockEnabled});
    return react.jsx(React.Fragment, null, lockEnabled && react.jsx("div", {onClick:blurSelectInput, css:_ref2$1}), children(function(element) {
      setScrollCaptureTarget(element);
      setScrollLockTarget(element);
    }));
  }
  function testPlatform(re) {
    var _window$navigator$use;
    return "undefined" !== typeof window && null != window.navigator ? re.test((null === (_window$navigator$use = window.navigator.userAgentData) || void 0 === _window$navigator$use ? void 0 : _window$navigator$use.platform) || window.navigator.platform) : !1;
  }
  function toCategorizedOption(props, option, selectValue, index) {
    var isDisabled = "function" === typeof props.isOptionDisabled ? props.isOptionDisabled(option, selectValue) : !1;
    selectValue = _isOptionSelected(props, option, selectValue);
    var label = props.getOptionLabel(option);
    props = props.getOptionValue(option);
    return {type:"option", data:option, isDisabled, isSelected:selectValue, label, value:props, index};
  }
  function buildCategorizedOptions(props, selectValue) {
    return props.options.map(function(groupOrOption, groupOrOptionIndex) {
      if ("options" in groupOrOption) {
        var categorizedOptions = groupOrOption.options.map(function(option, optionIndex) {
          return toCategorizedOption(props, option, selectValue, optionIndex);
        }).filter(function(categorizedOption) {
          return isFocusable(props, categorizedOption);
        });
        return 0 < categorizedOptions.length ? {type:"group", data:groupOrOption, options:categorizedOptions, index:groupOrOptionIndex} : void 0;
      }
      groupOrOption = toCategorizedOption(props, groupOrOption, selectValue, groupOrOptionIndex);
      return isFocusable(props, groupOrOption) ? groupOrOption : void 0;
    }).filter(index.notNullish);
  }
  function buildFocusableOptionsFromCategorizedOptions(categorizedOptions) {
    return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
      "group" === categorizedOption.type ? optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return option.data;
      }))) : optionsAccumulator.push(categorizedOption.data);
      return optionsAccumulator;
    }, []);
  }
  function buildFocusableOptionsWithIds(categorizedOptions, optionId) {
    return categorizedOptions.reduce(function(optionsAccumulator, categorizedOption) {
      "group" === categorizedOption.type ? optionsAccumulator.push.apply(optionsAccumulator, _toConsumableArray(categorizedOption.options.map(function(option) {
        return {data:option.data, id:"".concat(optionId, "-").concat(categorizedOption.index, "-").concat(option.index)};
      }))) : optionsAccumulator.push({data:categorizedOption.data, id:"".concat(optionId, "-").concat(categorizedOption.index)});
      return optionsAccumulator;
    }, []);
  }
  function isFocusable(props, categorizedOption) {
    var _props$inputValue = props.inputValue;
    _props$inputValue = void 0 === _props$inputValue ? "" : _props$inputValue;
    var data = categorizedOption.data, isSelected = categorizedOption.isSelected, label = categorizedOption.label;
    categorizedOption = categorizedOption.value;
    if (isSelected = !shouldHideSelectedOptions(props) || !isSelected) {
      data = {label, value:categorizedOption, data}, isSelected = props.filterOption ? props.filterOption(data, _props$inputValue) : !0;
    }
    return isSelected;
  }
  function _isOptionSelected(props, option, selectValue) {
    if (-1 < selectValue.indexOf(option)) {
      return !0;
    }
    if ("function" === typeof props.isOptionSelected) {
      return props.isOptionSelected(option, selectValue);
    }
    var candidate = props.getOptionValue(option);
    return selectValue.some(function(i) {
      return props.getOptionValue(i) === candidate;
    });
  }
  var _extends = require("module$node_modules$$babel$runtime$helpers$extends"), _objectSpread = require("module$node_modules$$babel$runtime$helpers$objectSpread2"), _classCallCheck = require("module$node_modules$$babel$runtime$helpers$classCallCheck"), _createClass = require("module$node_modules$$babel$runtime$helpers$createClass"), _inherits = require("module$node_modules$$babel$runtime$helpers$inherits"), _createSuper = require("module$node_modules$$babel$runtime$helpers$createSuper"), _toConsumableArray = 
  require("module$node_modules$$babel$runtime$helpers$toConsumableArray"), React = require("module$node_modules$react$index"), index = require("module$node_modules$react_select$dist$index_d1cb43f3_cjs_dev"), react = require("module$node_modules$$emotion$react$dist$emotion_react_cjs");
  global = require("module$node_modules$memoize_one$dist$memoize_one_cjs");
  var _objectWithoutProperties = require("module$node_modules$$babel$runtime$helpers$objectWithoutProperties"), React__namespace = function(e) {
    if (e && e.__esModule) {
      return e;
    }
    var n = Object.create(null);
    e && Object.keys(e).forEach(function(k) {
      if ("default" !== k) {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {enumerable:!0, get:function() {
          return e[k];
        }});
      }
    });
    n["default"] = e;
    return Object.freeze(n);
  }(React);
  require = global && global.__esModule ? global : {"default":global};
  var _ref = {name:"1f43avz-a11yText-A11yText", styles:"label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;", map:"/*# sourceMappingURL\x3ddata:application/json;charset\x3dutf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNSSIsImZpbGUiOiJBMTF5VGV4dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGpzeCBqc3ggKi9cbmltcG9ydCB7IGpzeCB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLy8gQXNzaXN0aXZlIHRleHQgdG8gZGVzY3JpYmUgdmlzdWFsIGVsZW1lbnRzLiBIaWRkZW4gZm9yIHNpZ2h0ZWQgdXNlcnMuXG5jb25zdCBBMTF5VGV4dCA9IChwcm9wczogSlNYLkludHJpbnNpY0VsZW1lbnRzWydzcGFuJ10pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0\x3d */", 
  toString:function() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }}, A11yText$1 = function(props) {
    return react.jsx("span", _extends({css:_ref}, props));
  }, defaultAriaLiveMessages = {guidance:function(props) {
    var isSearchable = props.isSearchable, isMulti = props.isMulti, tabSelectsValue = props.tabSelectsValue, isInitialFocus = props.isInitialFocus;
    switch(props.context) {
      case "menu":
        return "Use Up and Down to choose options, press Enter to select the currently focused option, press Escape to exit the menu".concat(tabSelectsValue ? ", press Tab to select the option and exit the menu" : "", ".");
      case "input":
        return isInitialFocus ? "".concat(props["aria-label"] || "Select", " is focused ").concat(isSearchable ? ",type to refine list" : "", ", press Down to open the menu, ").concat(isMulti ? " press left to focus selected values" : "") : "";
      case "value":
        return "Use left and right to toggle between focused values, press Backspace to remove the currently focused value";
      default:
        return "";
    }
  }, onChange:function(props) {
    var _props$label = props.label;
    _props$label = void 0 === _props$label ? "" : _props$label;
    var labels = props.labels, isDisabled = props.isDisabled;
    switch(props.action) {
      case "deselect-option":
      case "pop-value":
      case "remove-value":
        return "option ".concat(_props$label, ", deselected.");
      case "clear":
        return "All selected options have been cleared.";
      case "initial-input-focus":
        return "option".concat(1 < labels.length ? "s" : "", " ").concat(labels.join(","), ", selected.");
      case "select-option":
        return isDisabled ? "option ".concat(_props$label, " is disabled. Select another option.") : "option ".concat(_props$label, ", selected.");
      default:
        return "";
    }
  }, onFocus:function(props) {
    var context = props.context, focused = props.focused, options = props.options, _props$label2 = props.label;
    _props$label2 = void 0 === _props$label2 ? "" : _props$label2;
    var selectValue = props.selectValue, isDisabled = props.isDisabled, isSelected = props.isSelected, isAppleDevice = props.isAppleDevice;
    props = function(arr, item) {
      return arr && arr.length ? "".concat(arr.indexOf(item) + 1, " of ").concat(arr.length) : "";
    };
    return "value" === context && selectValue ? "value ".concat(_props$label2, " focused, ").concat(props(selectValue, focused), ".") : "menu" === context && isAppleDevice ? (context = isDisabled ? " disabled" : "", context = "".concat(isSelected ? " selected" : "").concat(context), "".concat(_props$label2).concat(context, ", ").concat(props(options, focused), ".")) : "";
  }, onFilter:function(props) {
    var inputValue = props.inputValue;
    return "".concat(props.resultsMessage).concat(inputValue ? " for search term " + inputValue : "", ".");
  }}, LiveRegion$1 = function(props) {
    var ariaSelection = props.ariaSelection, focusedOption = props.focusedOption, focusedValue = props.focusedValue, focusableOptions = props.focusableOptions, isFocused = props.isFocused, selectValue = props.selectValue, selectProps = props.selectProps, id = props.id, isAppleDevice = props.isAppleDevice, ariaLiveMessages = selectProps.ariaLiveMessages, getOptionLabel = selectProps.getOptionLabel, inputValue = selectProps.inputValue, isMulti = selectProps.isMulti, isOptionDisabled = selectProps.isOptionDisabled, 
    isSearchable = selectProps.isSearchable, menuIsOpen = selectProps.menuIsOpen, options = selectProps.options, screenReaderStatus = selectProps.screenReaderStatus, tabSelectsValue = selectProps.tabSelectsValue, isLoading = selectProps.isLoading, ariaLabel = selectProps["aria-label"];
    props = selectProps["aria-live"];
    var messages = React.useMemo(function() {
      return _objectSpread(_objectSpread({}, defaultAriaLiveMessages), ariaLiveMessages || {});
    }, [ariaLiveMessages]);
    selectProps = React.useMemo(function() {
      var message = "";
      if (ariaSelection && messages.onChange) {
        var option = ariaSelection.option;
        message = ariaSelection.options;
        var removedValues = ariaSelection.removedValues, value = ariaSelection.value;
        (option = ariaSelection.removedValue || option) || (option = Array.isArray(value) ? null : value);
        option = (value = option) ? getOptionLabel(value) : "";
        message = (message = message || removedValues || void 0) ? message.map(getOptionLabel) : [];
        message = _objectSpread({isDisabled:value && isOptionDisabled(value, selectValue), label:option, labels:message}, ariaSelection);
        message = messages.onChange(message);
      }
      return message;
    }, [ariaSelection, messages, isOptionDisabled, selectValue, getOptionLabel]);
    var ariaFocused = React.useMemo(function() {
      var focusMsg = "", focused = focusedOption || focusedValue, isSelected = !!(focusedOption && selectValue && selectValue.includes(focusedOption));
      focused && messages.onFocus && (focusMsg = {focused, label:getOptionLabel(focused), isDisabled:isOptionDisabled(focused, selectValue), isSelected, options:focusableOptions, context:focused === focusedOption ? "menu" : "value", selectValue, isAppleDevice}, focusMsg = messages.onFocus(focusMsg));
      return focusMsg;
    }, [focusedOption, focusedValue, getOptionLabel, isOptionDisabled, messages, focusableOptions, selectValue, isAppleDevice]), ariaResults = React.useMemo(function() {
      var resultsMsg = "";
      menuIsOpen && options.length && !isLoading && messages.onFilter && (resultsMsg = screenReaderStatus({count:focusableOptions.length}), resultsMsg = messages.onFilter({inputValue, resultsMessage:resultsMsg}));
      return resultsMsg;
    }, [focusableOptions, inputValue, menuIsOpen, messages, options, screenReaderStatus, isLoading]), isInitialFocus = "initial-input-focus" === (null === ariaSelection || void 0 === ariaSelection ? void 0 : ariaSelection.action), ariaGuidance = React.useMemo(function() {
      var guidanceMsg = "";
      messages.guidance && (guidanceMsg = messages.guidance({"aria-label":ariaLabel, context:focusedValue ? "value" : menuIsOpen ? "menu" : "input", isDisabled:focusedOption && isOptionDisabled(focusedOption, selectValue), isMulti, isSearchable, tabSelectsValue, isInitialFocus}));
      return guidanceMsg;
    }, [ariaLabel, focusedOption, focusedValue, isMulti, isOptionDisabled, isSearchable, menuIsOpen, messages, selectValue, tabSelectsValue, isInitialFocus]);
    selectProps = react.jsx(React.Fragment, null, react.jsx("span", {id:"aria-selection"}, selectProps), react.jsx("span", {id:"aria-focused"}, ariaFocused), react.jsx("span", {id:"aria-results"}, ariaResults), react.jsx("span", {id:"aria-guidance"}, ariaGuidance));
    return react.jsx(React.Fragment, null, react.jsx(A11yText$1, {id}, isInitialFocus && selectProps), react.jsx(A11yText$1, {"aria-live":props, "aria-atomic":"false", "aria-relevant":"additions text", role:"log"}, isFocused && !isInitialFocus && selectProps));
  };
  global = [{base:"A", letters:"AⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ"}, {base:"AA", letters:"Ꜳ"}, {base:"AE", letters:"ÆǼǢ"}, {base:"AO", letters:"Ꜵ"}, {base:"AU", letters:"Ꜷ"}, {base:"AV", letters:"ꜸꜺ"}, {base:"AY", letters:"Ꜽ"}, {base:"B", letters:"BⒷＢḂḄḆɃƂƁ"}, {base:"C", letters:"CⒸＣĆĈĊČÇḈƇȻꜾ"}, {base:"D", letters:"DⒹＤḊĎḌḐḒḎĐƋƊƉꝹ"}, {base:"DZ", letters:"ǱǄ"}, {base:"Dz", letters:"ǲǅ"}, {base:"E", letters:"EⒺＥÈÉÊỀẾỄỂẼĒḔḖĔĖËẺĚȄȆẸỆȨḜĘḘḚƐƎ"}, {base:"F", letters:"FⒻＦḞƑꝻ"}, {base:"G", letters:"GⒼＧǴĜḠĞĠǦĢǤƓꞠꝽꝾ"}, 
  {base:"H", letters:"HⒽＨĤḢḦȞḤḨḪĦⱧⱵꞍ"}, {base:"I", letters:"IⒾＩÌÍÎĨĪĬİÏḮỈǏȈȊỊĮḬƗ"}, {base:"J", letters:"JⒿＪĴɈ"}, {base:"K", letters:"KⓀＫḰǨḲĶḴƘⱩꝀꝂꝄꞢ"}, {base:"L", letters:"LⓁＬĿĹĽḶḸĻḼḺŁȽⱢⱠꝈꝆꞀ"}, {base:"LJ", letters:"Ǉ"}, {base:"Lj", letters:"ǈ"}, {base:"M", letters:"MⓂＭḾṀṂⱮƜ"}, {base:"N", letters:"NⓃＮǸŃÑṄŇṆŅṊṈȠƝꞐꞤ"}, {base:"NJ", letters:"Ǌ"}, {base:"Nj", letters:"ǋ"}, {base:"O", letters:"OⓄＯÒÓÔỒỐỖỔÕṌȬṎŌṐṒŎȮȰÖȪỎŐǑȌȎƠỜỚỠỞỢỌỘǪǬØǾƆƟꝊꝌ"}, {base:"OI", letters:"Ƣ"}, {base:"OO", letters:"Ꝏ"}, {base:"OU", letters:"Ȣ"}, 
  {base:"P", letters:"PⓅＰṔṖƤⱣꝐꝒꝔ"}, {base:"Q", letters:"QⓆＱꝖꝘɊ"}, {base:"R", letters:"RⓇＲŔṘŘȐȒṚṜŖṞɌⱤꝚꞦꞂ"}, {base:"S", letters:"SⓈＳẞŚṤŜṠŠṦṢṨȘŞⱾꞨꞄ"}, {base:"T", letters:"TⓉＴṪŤṬȚŢṰṮŦƬƮȾꞆ"}, {base:"TZ", letters:"Ꜩ"}, {base:"U", letters:"UⓊＵÙÚÛŨṸŪṺŬÜǛǗǕǙỦŮŰǓȔȖƯỪỨỮỬỰỤṲŲṶṴɄ"}, {base:"V", letters:"VⓋＶṼṾƲꝞɅ"}, {base:"VY", letters:"Ꝡ"}, {base:"W", letters:"WⓌＷẀẂŴẆẄẈⱲ"}, {base:"X", letters:"XⓍＸẊẌ"}, {base:"Y", letters:"YⓎＹỲÝŶỸȲẎŸỶỴƳɎỾ"}, {base:"Z", letters:"ZⓏＺŹẐŻŽẒẔƵȤⱿⱫꝢ"}, {base:"a", letters:"aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ"}, 
  {base:"aa", letters:"ꜳ"}, {base:"ae", letters:"æǽǣ"}, {base:"ao", letters:"ꜵ"}, {base:"au", letters:"ꜷ"}, {base:"av", letters:"ꜹꜻ"}, {base:"ay", letters:"ꜽ"}, {base:"b", letters:"bⓑｂḃḅḇƀƃɓ"}, {base:"c", letters:"cⓒｃćĉċčçḉƈȼꜿↄ"}, {base:"d", letters:"dⓓｄḋďḍḑḓḏđƌɖɗꝺ"}, {base:"dz", letters:"ǳǆ"}, {base:"e", letters:"eⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ"}, {base:"f", letters:"fⓕｆḟƒꝼ"}, {base:"g", letters:"gⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ"}, {base:"h", letters:"hⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ"}, {base:"hv", letters:"ƕ"}, {base:"i", letters:"iⓘｉìíîĩīĭïḯỉǐȉȋịįḭɨı"}, 
  {base:"j", letters:"jⓙｊĵǰɉ"}, {base:"k", letters:"kⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ"}, {base:"l", letters:"lⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇ"}, {base:"lj", letters:"ǉ"}, {base:"m", letters:"mⓜｍḿṁṃɱɯ"}, {base:"n", letters:"nⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ"}, {base:"nj", letters:"ǌ"}, {base:"o", letters:"oⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔꝋꝍɵ"}, {base:"oi", letters:"ƣ"}, {base:"ou", letters:"ȣ"}, {base:"oo", letters:"ꝏ"}, {base:"p", letters:"pⓟｐṕṗƥᵽꝑꝓꝕ"}, {base:"q", letters:"qⓠｑɋꝗꝙ"}, {base:"r", letters:"rⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ"}, {base:"s", letters:"sⓢｓßśṥŝṡšṧṣṩșşȿꞩꞅẛ"}, 
  {base:"t", letters:"tⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ"}, {base:"tz", letters:"ꜩ"}, {base:"u", letters:"uⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ"}, {base:"v", letters:"vⓥｖṽṿʋꝟʌ"}, {base:"vy", letters:"ꝡ"}, {base:"w", letters:"wⓦｗẁẃŵẇẅẘẉⱳ"}, {base:"x", letters:"xⓧｘẋẍ"}, {base:"y", letters:"yⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ"}, {base:"z", letters:"zⓩｚźẑżžẓẕƶȥɀⱬꝣ"}];
  var anyDiacritic = new RegExp("[" + global.map(function(d) {
    return d.letters;
  }).join("") + "]", "g"), diacriticToBase = {};
  for (module = 0; module < global.length; module++) {
    for (var diacritic = global[module], j = 0; j < diacritic.letters.length; j++) {
      diacriticToBase[diacritic.letters[j]] = diacritic.base;
    }
  }
  var stripDiacritics = function(str) {
    return str.replace(anyDiacritic, function(match) {
      return diacriticToBase[match];
    });
  }, memoizedStripDiacriticsForInput = require["default"](stripDiacritics), defaultStringify = function(option) {
    return "".concat(option.label, " ").concat(option.value);
  };
  require = function(config) {
    return function(option, rawInput) {
      if (option.data.__isNew__) {
        return !0;
      }
      var _ignoreCase$ignoreAcc = _objectSpread({ignoreCase:!0, ignoreAccents:!0, stringify:defaultStringify, trim:!0, matchFrom:"any"}, config), ignoreCase = _ignoreCase$ignoreAcc.ignoreCase, ignoreAccents = _ignoreCase$ignoreAcc.ignoreAccents, stringify = _ignoreCase$ignoreAcc.stringify, trim = _ignoreCase$ignoreAcc.trim;
      _ignoreCase$ignoreAcc = _ignoreCase$ignoreAcc.matchFrom;
      rawInput = trim ? rawInput.replace(/^\s+|\s+$/g, "") : rawInput;
      option = trim ? stringify(option).replace(/^\s+|\s+$/g, "") : stringify(option);
      ignoreCase && (rawInput = rawInput.toLowerCase(), option = option.toLowerCase());
      ignoreAccents && (rawInput = memoizedStripDiacriticsForInput(rawInput), option = stripDiacritics(option));
      return "start" === _ignoreCase$ignoreAcc ? option.substr(0, rawInput.length) === rawInput : -1 < option.indexOf(rawInput);
    };
  };
  var _excluded = ["innerRef"], STYLE_KEYS = ["boxSizing", "height", "overflow", "paddingRight", "position"], LOCK_STYLES = {boxSizing:"border-box", overflow:"hidden", position:"relative", height:"100%"}, canUseDOM = !("undefined" === typeof window || !window.document || !window.document.createElement), activeScrollLocks = 0, listenerOptions = {capture:!1, passive:!1}, blurSelectInput = function(event) {
    event = event.target;
    return event.ownerDocument.activeElement && event.ownerDocument.activeElement.blur();
  }, _ref2$1 = {name:"bp8cua-ScrollManager", styles:"position:fixed;left:0;bottom:0;right:0;top:0;label:ScrollManager;", map:"/*# sourceMappingURL\x3ddata:application/json;charset\x3dutf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjcm9sbE1hbmFnZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9EVSIsImZpbGUiOiJTY3JvbGxNYW5hZ2VyLnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVmQ2FsbGJhY2ssIE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdXNlU2Nyb2xsQ2FwdHVyZSBmcm9tICcuL3VzZVNjcm9sbENhcHR1cmUnO1xuaW1wb3J0IHVzZVNjcm9sbExvY2sgZnJvbSAnLi91c2VTY3JvbGxMb2NrJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVhZG9ubHkgY2hpbGRyZW46IChyZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PikgPT4gUmVhY3RFbGVtZW50O1xuICByZWFkb25seSBsb2NrRW5hYmxlZDogYm9vbGVhbjtcbiAgcmVhZG9ubHkgY2FwdHVyZUVuYWJsZWQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG9uQm90dG9tQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Cb3R0b21MZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IG9uVG9wQXJyaXZlPzogKGV2ZW50OiBXaGVlbEV2ZW50IHwgVG91Y2hFdmVudCkgPT4gdm9pZDtcbiAgcmVhZG9ubHkgb25Ub3BMZWF2ZT86IChldmVudDogV2hlZWxFdmVudCB8IFRvdWNoRXZlbnQpID0+IHZvaWQ7XG59XG5cbmNvbnN0IGJsdXJTZWxlY3RJbnB1dCA9IChldmVudDogTW91c2VFdmVudDxIVE1MRGl2RWxlbWVudD4pID0+IHtcbiAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcbiAgcmV0dXJuIChcbiAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuICAgIChlbGVtZW50Lm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuYmx1cigpXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY3JvbGxNYW5hZ2VyKHtcbiAgY2hpbGRyZW4sXG4gIGxvY2tFbmFibGVkLFxuICBjYXB0dXJlRW5hYmxlZCA9IHRydWUsXG4gIG9uQm90dG9tQXJyaXZlLFxuICBvbkJvdHRvbUxlYXZlLFxuICBvblRvcEFycml2ZSxcbiAgb25Ub3BMZWF2ZSxcbn06IFByb3BzKSB7XG4gIGNvbnN0IHNldFNjcm9sbENhcHR1cmVUYXJnZXQgPSB1c2VTY3JvbGxDYXB0dXJlKHtcbiAgICBpc0VuYWJsZWQ6IGNhcHR1cmVFbmFibGVkLFxuICAgIG9uQm90dG9tQXJyaXZlLFxuICAgIG9uQm90dG9tTGVhdmUsXG4gICAgb25Ub3BBcnJpdmUsXG4gICAgb25Ub3BMZWF2ZSxcbiAgfSk7XG4gIGNvbnN0IHNldFNjcm9sbExvY2tUYXJnZXQgPSB1c2VTY3JvbGxMb2NrKHsgaXNFbmFibGVkOiBsb2NrRW5hYmxlZCB9KTtcblxuICBjb25zdCB0YXJnZXRSZWY6IFJlZkNhbGxiYWNrPEhUTUxFbGVtZW50PiA9IChlbGVtZW50KSA9PiB7XG4gICAgc2V0U2Nyb2xsQ2FwdHVyZVRhcmdldChlbGVtZW50KTtcbiAgICBzZXRTY3JvbGxMb2NrVGFyZ2V0KGVsZW1lbnQpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAge2xvY2tFbmFibGVkICYmIChcbiAgICAgICAgPGRpdlxuICAgICAgICAgIG9uQ2xpY2s9e2JsdXJTZWxlY3RJbnB1dH1cbiAgICAgICAgICBjc3M9e3sgcG9zaXRpb246ICdmaXhlZCcsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDAsIHRvcDogMCB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICAgIHtjaGlsZHJlbih0YXJnZXRSZWYpfVxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iXX0\x3d */", 
  toString:function() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }}, _ref2 = {name:"5kkxb2-requiredInput-RequiredInput", styles:"label:requiredInput;opacity:0;pointer-events:none;position:absolute;bottom:0;left:0;right:0;width:100%;label:RequiredInput;", map:"/*# sourceMappingURL\x3ddata:application/json;charset\x3dutf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlcXVpcmVkSW5wdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNJIiwiZmlsZSI6IlJlcXVpcmVkSW5wdXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyBGb2N1c0V2ZW50SGFuZGxlciwgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmNvbnN0IFJlcXVpcmVkSW5wdXQ6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgcmVhZG9ubHkgbmFtZT86IHN0cmluZztcbiAgcmVhZG9ubHkgb25Gb2N1czogRm9jdXNFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD47XG59PiA9ICh7IG5hbWUsIG9uRm9jdXMgfSkgPT4gKFxuICA8aW5wdXRcbiAgICByZXF1aXJlZFxuICAgIG5hbWU9e25hbWV9XG4gICAgdGFiSW5kZXg9ey0xfVxuICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgb25Gb2N1cz17b25Gb2N1c31cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAncmVxdWlyZWRJbnB1dCcsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgIH19XG4gICAgLy8gUHJldmVudCBgU3dpdGNoaW5nIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWRgIGVycm9yXG4gICAgdmFsdWU9XCJcIlxuICAgIG9uQ2hhbmdlPXsoKSA9PiB7fX1cbiAgLz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVkSW5wdXQ7XG4iXX0\x3d */", 
  toString:function() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }}, RequiredInput$1 = function(_ref) {
    return react.jsx("input", {required:!0, name:_ref.name, tabIndex:-1, "aria-hidden":"true", onFocus:_ref.onFocus, css:_ref2, value:"", onChange:function() {
    }});
  };
  global = function(option) {
    return option.label;
  };
  module = function(option) {
    return option.value;
  };
  var defaultStyles = {clearIndicator:index.clearIndicatorCSS, container:index.containerCSS, control:index.css, dropdownIndicator:index.dropdownIndicatorCSS, group:index.groupCSS, groupHeading:index.groupHeadingCSS, indicatorsContainer:index.indicatorsContainerCSS, indicatorSeparator:index.indicatorSeparatorCSS, input:index.inputCSS, loadingIndicator:index.loadingIndicatorCSS, loadingMessage:index.loadingMessageCSS, menu:index.menuCSS, menuList:index.menuListCSS, menuPortal:index.menuPortalCSS, multiValue:index.multiValueCSS, 
  multiValueLabel:index.multiValueLabelCSS, multiValueRemove:index.multiValueRemoveCSS, noOptionsMessage:index.noOptionsMessageCSS, option:index.optionCSS, placeholder:index.placeholderCSS, singleValue:index.css$1, valueContainer:index.valueContainerCSS}, defaultTheme = {borderRadius:4, colors:{primary:"#2684FF", primary75:"#4C9AFF", primary50:"#B2D4FF", primary25:"#DEEBFF", danger:"#DE350B", dangerLight:"#FFBDAD", neutral0:"hsl(0, 0%, 100%)", neutral5:"hsl(0, 0%, 95%)", neutral10:"hsl(0, 0%, 90%)", 
  neutral20:"hsl(0, 0%, 80%)", neutral30:"hsl(0, 0%, 70%)", neutral40:"hsl(0, 0%, 60%)", neutral50:"hsl(0, 0%, 50%)", neutral60:"hsl(0, 0%, 40%)", neutral70:"hsl(0, 0%, 30%)", neutral80:"hsl(0, 0%, 20%)", neutral90:"hsl(0, 0%, 10%)"}, spacing:{baseUnit:4, controlHeight:38, menuGutter:8}};
  diacritic = {"aria-live":"polite", backspaceRemovesValue:!0, blurInputOnSelect:index.isTouchCapable(), captureMenuScroll:!index.isTouchCapable(), classNames:{}, closeMenuOnSelect:!0, closeMenuOnScroll:!1, components:{}, controlShouldRenderValue:!0, escapeClearsValue:!1, filterOption:require(), formatGroupLabel:function(group) {
    return group.label;
  }, getOptionLabel:global, getOptionValue:module, isDisabled:!1, isLoading:!1, isMulti:!1, isRtl:!1, isSearchable:!0, isOptionDisabled:function(option) {
    return !!option.isDisabled;
  }, loadingMessage:function() {
    return "Loading...";
  }, maxMenuHeight:300, minMenuHeight:140, menuIsOpen:!1, menuPlacement:"bottom", menuPosition:"absolute", menuShouldBlockScroll:!1, menuShouldScrollIntoView:!index.isMobileDevice(), noOptionsMessage:function() {
    return "No options";
  }, openMenuOnFocus:!1, openMenuOnClick:!0, options:[], pageSize:5, placeholder:"Select...", screenReaderStatus:function(_ref) {
    _ref = _ref.count;
    return "".concat(_ref, " result").concat(1 !== _ref ? "s" : "", " available");
  }, styles:{}, tabIndex:0, tabSelectsValue:!0, unstyled:!1};
  var getFocusedOptionId = function(focusableOptionsWithIds, focusedOption) {
    var _focusableOptionsWith;
    return (null === (_focusableOptionsWith = focusableOptionsWithIds.find(function(option) {
      return option.data === focusedOption;
    })) || void 0 === _focusableOptionsWith ? void 0 : _focusableOptionsWith.id) || null;
  }, shouldHideSelectedOptions = function(props) {
    var hideSelectedOptions = props.hideSelectedOptions;
    props = props.isMulti;
    return void 0 === hideSelectedOptions ? props : hideSelectedOptions;
  }, instanceId = 1;
  j = function(_Component) {
    function Select(_props) {
      _classCallCheck(this, Select);
      var _this = _super.call(this, _props);
      _this.state = {ariaSelection:null, focusedOption:null, focusedOptionId:null, focusableOptionsWithIds:[], focusedValue:null, inputIsHidden:!1, isFocused:!1, selectValue:[], clearFocusValueOnUpdate:!1, prevWasFocused:!1, inputIsHiddenAfterUpdate:void 0, prevProps:void 0, instancePrefix:""};
      _this.blockOptionHover = !1;
      _this.isComposing = !1;
      _this.commonProps = void 0;
      _this.initialTouchX = 0;
      _this.initialTouchY = 0;
      _this.openAfterFocus = !1;
      _this.scrollToFocusedOptionOnUpdate = !1;
      _this.userIsDragging = void 0;
      _this.isAppleDevice = testPlatform(/^Mac/i) || testPlatform(/^iPhone/i) || testPlatform(/^iPad/i) || testPlatform(/^Mac/i) && 1 < navigator.maxTouchPoints;
      _this.controlRef = null;
      _this.getControlRef = function(ref) {
        _this.controlRef = ref;
      };
      _this.focusedOptionRef = null;
      _this.getFocusedOptionRef = function(ref) {
        _this.focusedOptionRef = ref;
      };
      _this.menuListRef = null;
      _this.getMenuListRef = function(ref) {
        _this.menuListRef = ref;
      };
      _this.inputRef = null;
      _this.getInputRef = function(ref) {
        _this.inputRef = ref;
      };
      _this.focus = _this.focusInput;
      _this.blur = _this.blurInput;
      _this.onChange = function(newValue, actionMeta) {
        var _this$props = _this.props, onChange = _this$props.onChange;
        actionMeta.name = _this$props.name;
        _this.ariaOnChange(newValue, actionMeta);
        onChange(newValue, actionMeta);
      };
      _this.setValue = function(newValue, action, option) {
        var _this$props2 = _this.props, closeMenuOnSelect = _this$props2.closeMenuOnSelect, isMulti = _this$props2.isMulti;
        _this.onInputChange("", {action:"set-value", prevInputValue:_this$props2.inputValue});
        closeMenuOnSelect && (_this.setState({inputIsHiddenAfterUpdate:!isMulti}), _this.onMenuClose());
        _this.setState({clearFocusValueOnUpdate:!0});
        _this.onChange(newValue, {action, option});
      };
      _this.selectOption = function(newValue) {
        var _this$props3 = _this.props, blurInputOnSelect = _this$props3.blurInputOnSelect, isMulti = _this$props3.isMulti;
        _this$props3 = _this$props3.name;
        var selectValue = _this.state.selectValue, deselected = isMulti && _this.isOptionSelected(newValue, selectValue), isDisabled = _this.isOptionDisabled(newValue, selectValue);
        if (deselected) {
          var candidate = _this.getOptionValue(newValue);
          _this.setValue(index.multiValueAsValue(selectValue.filter(function(i) {
            return _this.getOptionValue(i) !== candidate;
          })), "deselect-option", newValue);
        } else {
          if (isDisabled) {
            _this.ariaOnChange(index.singleValueAsValue(newValue), {action:"select-option", option:newValue, name:_this$props3});
            return;
          }
          isMulti ? _this.setValue(index.multiValueAsValue([].concat(_toConsumableArray(selectValue), [newValue])), "select-option", newValue) : _this.setValue(index.singleValueAsValue(newValue), "select-option");
        }
        blurInputOnSelect && _this.blurInput();
      };
      _this.removeValue = function(removedValue) {
        var isMulti = _this.props.isMulti, selectValue = _this.state.selectValue, candidate = _this.getOptionValue(removedValue);
        selectValue = selectValue.filter(function(i) {
          return _this.getOptionValue(i) !== candidate;
        });
        isMulti = index.valueTernary(isMulti, selectValue, selectValue[0] || null);
        _this.onChange(isMulti, {action:"remove-value", removedValue});
        _this.focusInput();
      };
      _this.clearValue = function() {
        var selectValue = _this.state.selectValue;
        _this.onChange(index.valueTernary(_this.props.isMulti, [], null), {action:"clear", removedValues:selectValue});
      };
      _this.popValue = function() {
        var isMulti = _this.props.isMulti, selectValue = _this.state.selectValue, lastSelectedValue = selectValue[selectValue.length - 1];
        selectValue = selectValue.slice(0, selectValue.length - 1);
        isMulti = index.valueTernary(isMulti, selectValue, selectValue[0] || null);
        _this.onChange(isMulti, {action:"pop-value", removedValue:lastSelectedValue});
      };
      _this.getFocusedOptionId = function(focusedOption) {
        return getFocusedOptionId(_this.state.focusableOptionsWithIds, focusedOption);
      };
      _this.getFocusableOptionsWithIds = function() {
        return buildFocusableOptionsWithIds(buildCategorizedOptions(_this.props, _this.state.selectValue), _this.getElementId("option"));
      };
      _this.getValue = function() {
        return _this.state.selectValue;
      };
      _this.cx = function() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return index.classNames.apply(void 0, [_this.props.classNamePrefix].concat(args));
      };
      _this.getOptionLabel = function(data) {
        return _this.props.getOptionLabel(data);
      };
      _this.getOptionValue = function(data) {
        return _this.props.getOptionValue(data);
      };
      _this.getStyles = function(key, props) {
        var base = defaultStyles[key](props, _this.props.unstyled);
        base.boxSizing = "border-box";
        return (key = _this.props.styles[key]) ? key(base, props) : base;
      };
      _this.getClassNames = function(key, props) {
        var _this$props$className, _this$props$className2;
        return null === (_this$props$className = (_this$props$className2 = _this.props.classNames)[key]) || void 0 === _this$props$className ? void 0 : _this$props$className.call(_this$props$className2, props);
      };
      _this.getElementId = function(element) {
        return "".concat(_this.state.instancePrefix, "-").concat(element);
      };
      _this.getComponents = function() {
        return index.defaultComponents(_this.props);
      };
      _this.buildCategorizedOptions = function() {
        return buildCategorizedOptions(_this.props, _this.state.selectValue);
      };
      _this.getCategorizedOptions = function() {
        return _this.props.menuIsOpen ? _this.buildCategorizedOptions() : [];
      };
      _this.buildFocusableOptions = function() {
        return buildFocusableOptionsFromCategorizedOptions(_this.buildCategorizedOptions());
      };
      _this.getFocusableOptions = function() {
        return _this.props.menuIsOpen ? _this.buildFocusableOptions() : [];
      };
      _this.ariaOnChange = function(value, actionMeta) {
        _this.setState({ariaSelection:_objectSpread({value}, actionMeta)});
      };
      _this.onMenuMouseDown = function(event) {
        0 === event.button && (event.stopPropagation(), event.preventDefault(), _this.focusInput());
      };
      _this.onMenuMouseMove = function(event) {
        _this.blockOptionHover = !1;
      };
      _this.onControlMouseDown = function(event) {
        if (!event.defaultPrevented) {
          var openMenuOnClick = _this.props.openMenuOnClick;
          if (!_this.state.isFocused) {
            openMenuOnClick && (_this.openAfterFocus = !0), _this.focusInput();
          } else if (!_this.props.menuIsOpen) {
            openMenuOnClick && _this.openMenu("first");
          } else {
            if ("INPUT" !== event.target.tagName && "TEXTAREA" !== event.target.tagName) {
              _this.onMenuClose();
            }
          }
          "INPUT" !== event.target.tagName && "TEXTAREA" !== event.target.tagName && event.preventDefault();
        }
      };
      _this.onDropdownIndicatorMouseDown = function(event) {
        if (!(event && "mousedown" === event.type && 0 !== event.button || _this.props.isDisabled)) {
          var _this$props4 = _this.props, isMulti = _this$props4.isMulti;
          _this$props4 = _this$props4.menuIsOpen;
          _this.focusInput();
          _this$props4 ? (_this.setState({inputIsHiddenAfterUpdate:!isMulti}), _this.onMenuClose()) : _this.openMenu("first");
          event.preventDefault();
        }
      };
      _this.onClearIndicatorMouseDown = function(event) {
        event && "mousedown" === event.type && 0 !== event.button || (_this.clearValue(), event.preventDefault(), _this.openAfterFocus = !1, "touchend" === event.type ? _this.focusInput() : setTimeout(function() {
          return _this.focusInput();
        }));
      };
      _this.onScroll = function(event) {
        if ("boolean" === typeof _this.props.closeMenuOnScroll) {
          if (event.target instanceof HTMLElement && index.isDocumentElement(event.target)) {
            _this.props.onMenuClose();
          }
        } else if ("function" === typeof _this.props.closeMenuOnScroll && _this.props.closeMenuOnScroll(event)) {
          _this.props.onMenuClose();
        }
      };
      _this.onCompositionStart = function() {
        _this.isComposing = !0;
      };
      _this.onCompositionEnd = function() {
        _this.isComposing = !1;
      };
      _this.onTouchStart = function(_ref2) {
        if (_ref2 = (_ref2 = _ref2.touches) && _ref2.item(0)) {
          _this.initialTouchX = _ref2.clientX, _this.initialTouchY = _ref2.clientY, _this.userIsDragging = !1;
        }
      };
      _this.onTouchMove = function(_ref3) {
        if (_ref3 = (_ref3 = _ref3.touches) && _ref3.item(0)) {
          var deltaY = Math.abs(_ref3.clientY - _this.initialTouchY);
          _this.userIsDragging = 5 < Math.abs(_ref3.clientX - _this.initialTouchX) || 5 < deltaY;
        }
      };
      _this.onTouchEnd = function(event) {
        _this.userIsDragging || (_this.controlRef && !_this.controlRef.contains(event.target) && _this.menuListRef && !_this.menuListRef.contains(event.target) && _this.blurInput(), _this.initialTouchX = 0, _this.initialTouchY = 0);
      };
      _this.onControlTouchEnd = function(event) {
        if (!_this.userIsDragging) {
          _this.onControlMouseDown(event);
        }
      };
      _this.onClearIndicatorTouchEnd = function(event) {
        if (!_this.userIsDragging) {
          _this.onClearIndicatorMouseDown(event);
        }
      };
      _this.onDropdownIndicatorTouchEnd = function(event) {
        if (!_this.userIsDragging) {
          _this.onDropdownIndicatorMouseDown(event);
        }
      };
      _this.handleInputChange = function(event) {
        var prevInputValue = _this.props.inputValue;
        event = event.currentTarget.value;
        _this.setState({inputIsHiddenAfterUpdate:!1});
        _this.onInputChange(event, {action:"input-change", prevInputValue});
        if (!_this.props.menuIsOpen) {
          _this.onMenuOpen();
        }
      };
      _this.onInputFocus = function(event) {
        if (_this.props.onFocus) {
          _this.props.onFocus(event);
        }
        _this.setState({inputIsHiddenAfterUpdate:!1, isFocused:!0});
        (_this.openAfterFocus || _this.props.openMenuOnFocus) && _this.openMenu("first");
        _this.openAfterFocus = !1;
      };
      _this.onInputBlur = function(event) {
        var prevInputValue = _this.props.inputValue;
        if (_this.menuListRef && _this.menuListRef.contains(document.activeElement)) {
          _this.inputRef.focus();
        } else {
          if (_this.props.onBlur) {
            _this.props.onBlur(event);
          }
          _this.onInputChange("", {action:"input-blur", prevInputValue});
          _this.onMenuClose();
          _this.setState({focusedValue:null, isFocused:!1});
        }
      };
      _this.onOptionHover = function(focusedOption) {
        if (!_this.blockOptionHover && _this.state.focusedOption !== focusedOption) {
          var focusedOptionIndex = _this.getFocusableOptions().indexOf(focusedOption);
          _this.setState({focusedOption, focusedOptionId:-1 < focusedOptionIndex ? _this.getFocusedOptionId(focusedOption) : null});
        }
      };
      _this.shouldHideSelectedOptions = function() {
        return shouldHideSelectedOptions(_this.props);
      };
      _this.onValueInputFocus = function(e) {
        e.preventDefault();
        e.stopPropagation();
        _this.focus();
      };
      _this.onKeyDown = function(event) {
        var _this$props5 = _this.props, isMulti = _this$props5.isMulti, backspaceRemovesValue = _this$props5.backspaceRemovesValue, escapeClearsValue = _this$props5.escapeClearsValue, inputValue = _this$props5.inputValue, isClearable = _this$props5.isClearable, menuIsOpen = _this$props5.menuIsOpen, onKeyDown = _this$props5.onKeyDown, tabSelectsValue = _this$props5.tabSelectsValue, openMenuOnFocus = _this$props5.openMenuOnFocus, _this$state = _this.state, focusedOption = _this$state.focusedOption, 
        focusedValue = _this$state.focusedValue;
        _this$state = _this$state.selectValue;
        if (!_this$props5.isDisabled) {
          if ("function" === typeof onKeyDown && (onKeyDown(event), event.defaultPrevented)) {
            return;
          }
          _this.blockOptionHover = !0;
          switch(event.key) {
            case "ArrowLeft":
              if (!isMulti || inputValue) {
                return;
              }
              _this.focusValue("previous");
              break;
            case "ArrowRight":
              if (!isMulti || inputValue) {
                return;
              }
              _this.focusValue("next");
              break;
            case "Delete":
            case "Backspace":
              if (inputValue) {
                return;
              }
              if (focusedValue) {
                _this.removeValue(focusedValue);
              } else {
                if (!backspaceRemovesValue) {
                  return;
                }
                isMulti ? _this.popValue() : isClearable && _this.clearValue();
              }
              break;
            case "Tab":
              if (_this.isComposing || event.shiftKey || !menuIsOpen || !tabSelectsValue || !focusedOption || openMenuOnFocus && _this.isOptionSelected(focusedOption, _this$state)) {
                return;
              }
              _this.selectOption(focusedOption);
              break;
            case "Enter":
              if (229 === event.keyCode) {
                break;
              }
              if (menuIsOpen) {
                if (!focusedOption || _this.isComposing) {
                  return;
                }
                _this.selectOption(focusedOption);
                break;
              }
              return;
            case "Escape":
              menuIsOpen ? (_this.setState({inputIsHiddenAfterUpdate:!1}), _this.onInputChange("", {action:"menu-close", prevInputValue:inputValue}), _this.onMenuClose()) : isClearable && escapeClearsValue && _this.clearValue();
              break;
            case " ":
              if (inputValue) {
                return;
              }
              if (!menuIsOpen) {
                _this.openMenu("first");
                break;
              }
              if (!focusedOption) {
                return;
              }
              _this.selectOption(focusedOption);
              break;
            case "ArrowUp":
              menuIsOpen ? _this.focusOption("up") : _this.openMenu("last");
              break;
            case "ArrowDown":
              menuIsOpen ? _this.focusOption("down") : _this.openMenu("first");
              break;
            case "PageUp":
              if (!menuIsOpen) {
                return;
              }
              _this.focusOption("pageup");
              break;
            case "PageDown":
              if (!menuIsOpen) {
                return;
              }
              _this.focusOption("pagedown");
              break;
            case "Home":
              if (!menuIsOpen) {
                return;
              }
              _this.focusOption("first");
              break;
            case "End":
              if (!menuIsOpen) {
                return;
              }
              _this.focusOption("last");
              break;
            default:
              return;
          }
          event.preventDefault();
        }
      };
      _this.state.instancePrefix = "react-select-" + (_this.props.instanceId || ++instanceId);
      _this.state.selectValue = index.cleanValue(_props.value);
      if (_props.menuIsOpen && _this.state.selectValue.length) {
        _props = _this.getFocusableOptionsWithIds();
        var focusableOptions = _this.buildFocusableOptions(), optionIndex = focusableOptions.indexOf(_this.state.selectValue[0]);
        _this.state.focusableOptionsWithIds = _props;
        _this.state.focusedOption = focusableOptions[optionIndex];
        _this.state.focusedOptionId = getFocusedOptionId(_props, focusableOptions[optionIndex]);
      }
      return _this;
    }
    _inherits(Select, _Component);
    var _super = _createSuper(Select);
    _createClass(Select, [{key:"componentDidMount", value:function() {
      this.startListeningComposition();
      this.startListeningToTouch();
      this.props.closeMenuOnScroll && document && document.addEventListener && document.addEventListener("scroll", this.onScroll, !0);
      this.props.autoFocus && this.focusInput();
      this.props.menuIsOpen && this.state.focusedOption && this.menuListRef && this.focusedOptionRef && index.scrollIntoView(this.menuListRef, this.focusedOptionRef);
    }}, {key:"componentDidUpdate", value:function(prevProps) {
      var _this$props6 = this.props, isDisabled = _this$props6.isDisabled;
      _this$props6 = _this$props6.menuIsOpen;
      var isFocused = this.state.isFocused;
      (isFocused && !isDisabled && prevProps.isDisabled || isFocused && _this$props6 && !prevProps.menuIsOpen) && this.focusInput();
      isFocused && isDisabled && !prevProps.isDisabled ? this.setState({isFocused:!1}, this.onMenuClose) : isFocused || isDisabled || !prevProps.isDisabled || this.inputRef !== document.activeElement || this.setState({isFocused:!0});
      this.menuListRef && this.focusedOptionRef && this.scrollToFocusedOptionOnUpdate && (index.scrollIntoView(this.menuListRef, this.focusedOptionRef), this.scrollToFocusedOptionOnUpdate = !1);
    }}, {key:"componentWillUnmount", value:function() {
      this.stopListeningComposition();
      this.stopListeningToTouch();
      document.removeEventListener("scroll", this.onScroll, !0);
    }}, {key:"onMenuOpen", value:function() {
      this.props.onMenuOpen();
    }}, {key:"onMenuClose", value:function() {
      this.onInputChange("", {action:"menu-close", prevInputValue:this.props.inputValue});
      this.props.onMenuClose();
    }}, {key:"onInputChange", value:function(newValue, actionMeta) {
      this.props.onInputChange(newValue, actionMeta);
    }}, {key:"focusInput", value:function() {
      this.inputRef && this.inputRef.focus();
    }}, {key:"blurInput", value:function() {
      this.inputRef && this.inputRef.blur();
    }}, {key:"openMenu", value:function(focusOption) {
      var _this2 = this, _this$state2 = this.state, selectValue = _this$state2.selectValue;
      _this$state2 = _this$state2.isFocused;
      var focusableOptions = this.buildFocusableOptions();
      focusOption = "first" === focusOption ? 0 : focusableOptions.length - 1;
      this.props.isMulti || (selectValue = focusableOptions.indexOf(selectValue[0]), -1 < selectValue && (focusOption = selectValue));
      this.scrollToFocusedOptionOnUpdate = !(_this$state2 && this.menuListRef);
      this.setState({inputIsHiddenAfterUpdate:!1, focusedValue:null, focusedOption:focusableOptions[focusOption], focusedOptionId:this.getFocusedOptionId(focusableOptions[focusOption])}, function() {
        return _this2.onMenuOpen();
      });
    }}, {key:"focusValue", value:function(direction) {
      var _this$state3 = this.state, selectValue = _this$state3.selectValue, focusedValue = _this$state3.focusedValue;
      if (this.props.isMulti) {
        this.setState({focusedOption:null});
        _this$state3 = selectValue.indexOf(focusedValue);
        focusedValue || (_this$state3 = -1);
        focusedValue = selectValue.length - 1;
        var nextFocus = -1;
        if (selectValue.length) {
          switch(direction) {
            case "previous":
              nextFocus = 0 === _this$state3 ? 0 : -1 === _this$state3 ? focusedValue : _this$state3 - 1;
              break;
            case "next":
              -1 < _this$state3 && _this$state3 < focusedValue && (nextFocus = _this$state3 + 1);
          }
          this.setState({inputIsHidden:-1 !== nextFocus, focusedValue:selectValue[nextFocus]});
        }
      }
    }}, {key:"focusOption", value:function() {
      var direction = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "first", pageSize = this.props.pageSize, focusedOption = this.state.focusedOption, options = this.getFocusableOptions();
      if (options.length) {
        var nextFocus = 0, focusedIndex = options.indexOf(focusedOption);
        focusedOption || (focusedIndex = -1);
        "up" === direction ? nextFocus = 0 < focusedIndex ? focusedIndex - 1 : options.length - 1 : "down" === direction ? nextFocus = (focusedIndex + 1) % options.length : "pageup" === direction ? (nextFocus = focusedIndex - pageSize, 0 > nextFocus && (nextFocus = 0)) : "pagedown" === direction ? (nextFocus = focusedIndex + pageSize, nextFocus > options.length - 1 && (nextFocus = options.length - 1)) : "last" === direction && (nextFocus = options.length - 1);
        this.scrollToFocusedOptionOnUpdate = !0;
        this.setState({focusedOption:options[nextFocus], focusedValue:null, focusedOptionId:this.getFocusedOptionId(options[nextFocus])});
      }
    }}, {key:"getTheme", value:function() {
      return this.props.theme ? "function" === typeof this.props.theme ? this.props.theme(defaultTheme) : _objectSpread(_objectSpread({}, defaultTheme), this.props.theme) : defaultTheme;
    }}, {key:"getCommonProps", value:function() {
      var clearValue = this.clearValue, cx = this.cx, getStyles = this.getStyles, getClassNames = this.getClassNames, getValue = this.getValue, selectOption = this.selectOption, setValue = this.setValue, props = this.props, isMulti = props.isMulti, isRtl = props.isRtl, options = props.options, hasValue = this.hasValue();
      return {clearValue, cx, getStyles, getClassNames, getValue, hasValue, isMulti, isRtl, options, selectOption, selectProps:props, setValue, theme:this.getTheme()};
    }}, {key:"hasValue", value:function() {
      return 0 < this.state.selectValue.length;
    }}, {key:"hasOptions", value:function() {
      return !!this.getFocusableOptions().length;
    }}, {key:"isClearable", value:function() {
      var _this$props7 = this.props, isClearable = _this$props7.isClearable;
      _this$props7 = _this$props7.isMulti;
      return void 0 === isClearable ? _this$props7 : isClearable;
    }}, {key:"isOptionDisabled", value:function(option, selectValue) {
      var props = this.props;
      return "function" === typeof props.isOptionDisabled ? props.isOptionDisabled(option, selectValue) : !1;
    }}, {key:"isOptionSelected", value:function(option, selectValue) {
      return _isOptionSelected(this.props, option, selectValue);
    }}, {key:"filterOption", value:function(option, inputValue) {
      var props = this.props;
      return props.filterOption ? props.filterOption(option, inputValue) : !0;
    }}, {key:"formatOptionLabel", value:function(data, context) {
      return "function" === typeof this.props.formatOptionLabel ? this.props.formatOptionLabel(data, {context, inputValue:this.props.inputValue, selectValue:this.state.selectValue}) : this.getOptionLabel(data);
    }}, {key:"formatGroupLabel", value:function(data) {
      return this.props.formatGroupLabel(data);
    }}, {key:"startListeningComposition", value:function() {
      document && document.addEventListener && (document.addEventListener("compositionstart", this.onCompositionStart, !1), document.addEventListener("compositionend", this.onCompositionEnd, !1));
    }}, {key:"stopListeningComposition", value:function() {
      document && document.removeEventListener && (document.removeEventListener("compositionstart", this.onCompositionStart), document.removeEventListener("compositionend", this.onCompositionEnd));
    }}, {key:"startListeningToTouch", value:function() {
      document && document.addEventListener && (document.addEventListener("touchstart", this.onTouchStart, !1), document.addEventListener("touchmove", this.onTouchMove, !1), document.addEventListener("touchend", this.onTouchEnd, !1));
    }}, {key:"stopListeningToTouch", value:function() {
      document && document.removeEventListener && (document.removeEventListener("touchstart", this.onTouchStart), document.removeEventListener("touchmove", this.onTouchMove), document.removeEventListener("touchend", this.onTouchEnd));
    }}, {key:"renderInput", value:function() {
      var _this$props8 = this.props, isDisabled = _this$props8.isDisabled, isSearchable = _this$props8.isSearchable, inputId = _this$props8.inputId, inputValue = _this$props8.inputValue, tabIndex = _this$props8.tabIndex, form = _this$props8.form, menuIsOpen = _this$props8.menuIsOpen, required = _this$props8.required;
      _this$props8 = this.getComponents().Input;
      var _this$state4 = this.state, inputIsHidden = _this$state4.inputIsHidden, ariaSelection = _this$state4.ariaSelection;
      _this$state4 = this.commonProps;
      inputId = inputId || this.getElementId("input");
      menuIsOpen = _objectSpread(_objectSpread(_objectSpread({"aria-autocomplete":"list", "aria-expanded":menuIsOpen, "aria-haspopup":!0, "aria-errormessage":this.props["aria-errormessage"], "aria-invalid":this.props["aria-invalid"], "aria-label":this.props["aria-label"], "aria-labelledby":this.props["aria-labelledby"], "aria-required":required, role:"combobox", "aria-activedescendant":this.isAppleDevice ? void 0 : this.state.focusedOptionId || ""}, menuIsOpen && {"aria-controls":this.getElementId("listbox")}), 
      !isSearchable && {"aria-readonly":!0}), this.hasValue() ? "initial-input-focus" === (null === ariaSelection || void 0 === ariaSelection ? void 0 : ariaSelection.action) && {"aria-describedby":this.getElementId("live-region")} : {"aria-describedby":this.getElementId("placeholder")});
      return isSearchable ? React__namespace.createElement(_this$props8, _extends({}, _this$state4, {autoCapitalize:"none", autoComplete:"off", autoCorrect:"off", id:inputId, innerRef:this.getInputRef, isDisabled, isHidden:inputIsHidden, onBlur:this.onInputBlur, onChange:this.handleInputChange, onFocus:this.onInputFocus, spellCheck:"false", tabIndex, form, type:"text", value:inputValue}, menuIsOpen)) : React__namespace.createElement(DummyInput, _extends({id:inputId, innerRef:this.getInputRef, onBlur:this.onInputBlur, 
      onChange:index.noop, onFocus:this.onInputFocus, disabled:isDisabled, tabIndex, inputMode:"none", form, value:""}, menuIsOpen));
    }}, {key:"renderPlaceholderOrValue", value:function() {
      var _this3 = this, _this$getComponents2 = this.getComponents(), MultiValue = _this$getComponents2.MultiValue, MultiValueContainer = _this$getComponents2.MultiValueContainer, MultiValueLabel = _this$getComponents2.MultiValueLabel, MultiValueRemove = _this$getComponents2.MultiValueRemove, SingleValue = _this$getComponents2.SingleValue;
      _this$getComponents2 = _this$getComponents2.Placeholder;
      var commonProps = this.commonProps, _this$props9 = this.props, controlShouldRenderValue = _this$props9.controlShouldRenderValue, isDisabled = _this$props9.isDisabled, isMulti = _this$props9.isMulti, inputValue = _this$props9.inputValue;
      _this$props9 = _this$props9.placeholder;
      var _this$state5 = this.state, selectValue = _this$state5.selectValue, focusedValue = _this$state5.focusedValue;
      _this$state5 = _this$state5.isFocused;
      if (!this.hasValue() || !controlShouldRenderValue) {
        return inputValue ? null : React__namespace.createElement(_this$getComponents2, _extends({}, commonProps, {key:"placeholder", isDisabled, isFocused:_this$state5, innerProps:{id:this.getElementId("placeholder")}}), _this$props9);
      }
      if (isMulti) {
        return selectValue.map(function(opt, index) {
          var isOptionFocused = opt === focusedValue, key = "".concat(_this3.getOptionLabel(opt), "-").concat(_this3.getOptionValue(opt));
          return React__namespace.createElement(MultiValue, _extends({}, commonProps, {components:{Container:MultiValueContainer, Label:MultiValueLabel, Remove:MultiValueRemove}, isFocused:isOptionFocused, isDisabled, key, index, removeProps:{onClick:function() {
            return _this3.removeValue(opt);
          }, onTouchEnd:function() {
            return _this3.removeValue(opt);
          }, onMouseDown:function(e) {
            e.preventDefault();
          }}, data:opt}), _this3.formatOptionLabel(opt, "value"));
        });
      }
      if (inputValue) {
        return null;
      }
      _this$getComponents2 = selectValue[0];
      return React__namespace.createElement(SingleValue, _extends({}, commonProps, {data:_this$getComponents2, isDisabled}), this.formatOptionLabel(_this$getComponents2, "value"));
    }}, {key:"renderClearIndicator", value:function() {
      var ClearIndicator = this.getComponents().ClearIndicator, commonProps = this.commonProps, _this$props10 = this.props, isDisabled = _this$props10.isDisabled;
      _this$props10 = _this$props10.isLoading;
      var isFocused = this.state.isFocused;
      return this.isClearable() && ClearIndicator && !isDisabled && this.hasValue() && !_this$props10 ? React__namespace.createElement(ClearIndicator, _extends({}, commonProps, {innerProps:{onMouseDown:this.onClearIndicatorMouseDown, onTouchEnd:this.onClearIndicatorTouchEnd, "aria-hidden":"true"}, isFocused})) : null;
    }}, {key:"renderLoadingIndicator", value:function() {
      var LoadingIndicator = this.getComponents().LoadingIndicator, _this$props11 = this.props, isLoading = _this$props11.isLoading;
      return LoadingIndicator && isLoading ? React__namespace.createElement(LoadingIndicator, _extends({}, this.commonProps, {innerProps:{"aria-hidden":"true"}, isDisabled:_this$props11.isDisabled, isFocused:this.state.isFocused})) : null;
    }}, {key:"renderIndicatorSeparator", value:function() {
      var _this$getComponents5 = this.getComponents(), IndicatorSeparator = _this$getComponents5.IndicatorSeparator;
      return _this$getComponents5.DropdownIndicator && IndicatorSeparator ? React__namespace.createElement(IndicatorSeparator, _extends({}, this.commonProps, {isDisabled:this.props.isDisabled, isFocused:this.state.isFocused})) : null;
    }}, {key:"renderDropdownIndicator", value:function() {
      var DropdownIndicator = this.getComponents().DropdownIndicator;
      return DropdownIndicator ? React__namespace.createElement(DropdownIndicator, _extends({}, this.commonProps, {innerProps:{onMouseDown:this.onDropdownIndicatorMouseDown, onTouchEnd:this.onDropdownIndicatorTouchEnd, "aria-hidden":"true"}, isDisabled:this.props.isDisabled, isFocused:this.state.isFocused})) : null;
    }}, {key:"renderMenu", value:function() {
      var _this4 = this, _this$getComponents7 = this.getComponents(), Group = _this$getComponents7.Group, GroupHeading = _this$getComponents7.GroupHeading, Menu = _this$getComponents7.Menu, MenuList = _this$getComponents7.MenuList, MenuPortal = _this$getComponents7.MenuPortal, LoadingMessage = _this$getComponents7.LoadingMessage, NoOptionsMessage = _this$getComponents7.NoOptionsMessage, Option = _this$getComponents7.Option, commonProps = this.commonProps, focusedOption = this.state.focusedOption, 
      _this$props12 = this.props, captureMenuScroll = _this$props12.captureMenuScroll, inputValue = _this$props12.inputValue, isLoading = _this$props12.isLoading, loadingMessage = _this$props12.loadingMessage, minMenuHeight = _this$props12.minMenuHeight, maxMenuHeight = _this$props12.maxMenuHeight;
      _this$getComponents7 = _this$props12.menuPlacement;
      var menuPosition = _this$props12.menuPosition, menuPortalTarget = _this$props12.menuPortalTarget, menuShouldBlockScroll = _this$props12.menuShouldBlockScroll, menuShouldScrollIntoView = _this$props12.menuShouldScrollIntoView, noOptionsMessage = _this$props12.noOptionsMessage, onMenuScrollToTop = _this$props12.onMenuScrollToTop, onMenuScrollToBottom = _this$props12.onMenuScrollToBottom;
      if (!_this$props12.menuIsOpen) {
        return null;
      }
      var render = function(props, id) {
        var type = props.type, data = props.data, isDisabled = props.isDisabled, isSelected = props.isSelected, label = props.label, value = props.value, isFocused = focusedOption === data, onHover = isDisabled ? void 0 : function() {
          return _this4.onOptionHover(data);
        }, onSelect = isDisabled ? void 0 : function() {
          return _this4.selectOption(data);
        };
        id = "".concat(_this4.getElementId("option"), "-").concat(id);
        return React__namespace.createElement(Option, _extends({}, commonProps, {innerProps:{id, onClick:onSelect, onMouseMove:onHover, onMouseOver:onHover, tabIndex:-1, role:"option", "aria-selected":_this4.isAppleDevice ? void 0 : isSelected}, data, isDisabled, isSelected, key:id, label, type, value, isFocused, innerRef:isFocused ? _this4.getFocusedOptionRef : void 0}), _this4.formatOptionLabel(props.data, "menu"));
      };
      if (this.hasOptions()) {
        var menuUI = this.getCategorizedOptions().map(function(item) {
          if ("group" === item.type) {
            var _data = item.data, options = item.options, groupIndex = item.index, groupId = "".concat(_this4.getElementId("group"), "-").concat(groupIndex), headingId = "".concat(groupId, "-heading");
            return React__namespace.createElement(Group, _extends({}, commonProps, {key:groupId, data:_data, options, Heading:GroupHeading, headingProps:{id:headingId, data:item.data}, label:_this4.formatGroupLabel(item.data)}), item.options.map(function(option) {
              return render(option, "".concat(groupIndex, "-").concat(option.index));
            }));
          }
          if ("option" === item.type) {
            return render(item, "".concat(item.index));
          }
        });
      } else if (isLoading) {
        NoOptionsMessage = loadingMessage({inputValue});
        if (null === NoOptionsMessage) {
          return null;
        }
        menuUI = React__namespace.createElement(LoadingMessage, commonProps, NoOptionsMessage);
      } else {
        LoadingMessage = noOptionsMessage({inputValue});
        if (null === LoadingMessage) {
          return null;
        }
        menuUI = React__namespace.createElement(NoOptionsMessage, commonProps, LoadingMessage);
      }
      var menuPlacementProps = {minMenuHeight, maxMenuHeight, menuPlacement:_this$getComponents7, menuPosition, menuShouldScrollIntoView};
      LoadingMessage = React__namespace.createElement(index.MenuPlacer, _extends({}, commonProps, menuPlacementProps), function(_ref4) {
        var _ref4$placerProps = _ref4.placerProps, maxHeight = _ref4$placerProps.maxHeight;
        return React__namespace.createElement(Menu, _extends({}, commonProps, menuPlacementProps, {innerRef:_ref4.ref, innerProps:{onMouseDown:_this4.onMenuMouseDown, onMouseMove:_this4.onMenuMouseMove}, isLoading, placement:_ref4$placerProps.placement}), React__namespace.createElement(ScrollManager, {captureEnabled:captureMenuScroll, onTopArrive:onMenuScrollToTop, onBottomArrive:onMenuScrollToBottom, lockEnabled:menuShouldBlockScroll}, function(scrollTargetRef) {
          return React__namespace.createElement(MenuList, _extends({}, commonProps, {innerRef:function(instance) {
            _this4.getMenuListRef(instance);
            scrollTargetRef(instance);
          }, innerProps:{role:"listbox", "aria-multiselectable":commonProps.isMulti, id:_this4.getElementId("listbox")}, isLoading, maxHeight, focusedOption}), menuUI);
        }));
      });
      return menuPortalTarget || "fixed" === menuPosition ? React__namespace.createElement(MenuPortal, _extends({}, commonProps, {appendTo:menuPortalTarget, controlElement:this.controlRef, menuPlacement:_this$getComponents7, menuPosition}), LoadingMessage) : LoadingMessage;
    }}, {key:"renderFormField", value:function() {
      var _this5 = this, _this$props13 = this.props, delimiter = _this$props13.delimiter, isDisabled = _this$props13.isDisabled, isMulti = _this$props13.isMulti, name = _this$props13.name, selectValue = this.state.selectValue;
      if (_this$props13.required && !this.hasValue() && !isDisabled) {
        return React__namespace.createElement(RequiredInput$1, {name, onFocus:this.onValueInputFocus});
      }
      if (name && !isDisabled) {
        if (isMulti) {
          if (delimiter) {
            return _this$props13 = selectValue.map(function(opt) {
              return _this5.getOptionValue(opt);
            }).join(delimiter), React__namespace.createElement("input", {name, type:"hidden", value:_this$props13});
          }
          _this$props13 = 0 < selectValue.length ? selectValue.map(function(opt, i) {
            return React__namespace.createElement("input", {key:"i-".concat(i), name, type:"hidden", value:_this5.getOptionValue(opt)});
          }) : React__namespace.createElement("input", {name, type:"hidden", value:""});
          return React__namespace.createElement("div", null, _this$props13);
        }
        _this$props13 = selectValue[0] ? this.getOptionValue(selectValue[0]) : "";
        return React__namespace.createElement("input", {name, type:"hidden", value:_this$props13});
      }
    }}, {key:"renderLiveRegion", value:function() {
      var commonProps = this.commonProps, _this$state6 = this.state, ariaSelection = _this$state6.ariaSelection, focusedOption = _this$state6.focusedOption, focusedValue = _this$state6.focusedValue, isFocused = _this$state6.isFocused;
      _this$state6 = _this$state6.selectValue;
      var focusableOptions = this.getFocusableOptions();
      return React__namespace.createElement(LiveRegion$1, _extends({}, commonProps, {id:this.getElementId("live-region"), ariaSelection, focusedOption, focusedValue, isFocused, selectValue:_this$state6, focusableOptions, isAppleDevice:this.isAppleDevice}));
    }}, {key:"render", value:function() {
      var _this$getComponents8 = this.getComponents(), Control = _this$getComponents8.Control, IndicatorsContainer = _this$getComponents8.IndicatorsContainer, SelectContainer = _this$getComponents8.SelectContainer;
      _this$getComponents8 = _this$getComponents8.ValueContainer;
      var _this$props14 = this.props, className = _this$props14.className, id = _this$props14.id, isDisabled = _this$props14.isDisabled;
      _this$props14 = _this$props14.menuIsOpen;
      var isFocused = this.state.isFocused, commonProps = this.commonProps = this.getCommonProps();
      return React__namespace.createElement(SelectContainer, _extends({}, commonProps, {className, innerProps:{id, onKeyDown:this.onKeyDown}, isDisabled, isFocused}), this.renderLiveRegion(), React__namespace.createElement(Control, _extends({}, commonProps, {innerRef:this.getControlRef, innerProps:{onMouseDown:this.onControlMouseDown, onTouchEnd:this.onControlTouchEnd}, isDisabled, isFocused, menuIsOpen:_this$props14}), React__namespace.createElement(_this$getComponents8, _extends({}, commonProps, 
      {isDisabled}), this.renderPlaceholderOrValue(), this.renderInput()), React__namespace.createElement(IndicatorsContainer, _extends({}, commonProps, {isDisabled}), this.renderClearIndicator(), this.renderLoadingIndicator(), this.renderIndicatorSeparator(), this.renderDropdownIndicator())), this.renderMenu(), this.renderFormField());
    }}], [{key:"getDerivedStateFromProps", value:function(props, state) {
      var prevProps = state.prevProps, clearFocusValueOnUpdate = state.clearFocusValueOnUpdate, inputIsHiddenAfterUpdate = state.inputIsHiddenAfterUpdate, ariaSelection = state.ariaSelection, isFocused = state.isFocused, prevWasFocused = state.prevWasFocused, instancePrefix = state.instancePrefix, options = props.options, value = props.value, menuIsOpen = props.menuIsOpen, inputValue = props.inputValue, isMulti = props.isMulti, selectValue = index.cleanValue(value), newMenuOptionsState = {};
      if (prevProps && (value !== prevProps.value || options !== prevProps.options || menuIsOpen !== prevProps.menuIsOpen || inputValue !== prevProps.inputValue)) {
        newMenuOptionsState = menuIsOpen ? buildFocusableOptionsFromCategorizedOptions(buildCategorizedOptions(props, selectValue)) : [];
        instancePrefix = menuIsOpen ? buildFocusableOptionsWithIds(buildCategorizedOptions(props, selectValue), "".concat(instancePrefix, "-option")) : [];
        if (clearFocusValueOnUpdate) {
          a: {
            clearFocusValueOnUpdate = state.focusedValue;
            menuIsOpen = state.selectValue.indexOf(clearFocusValueOnUpdate);
            if (-1 < menuIsOpen) {
              if (-1 < selectValue.indexOf(clearFocusValueOnUpdate)) {
                break a;
              } else if (menuIsOpen < selectValue.length) {
                clearFocusValueOnUpdate = selectValue[menuIsOpen];
                break a;
              }
            }
            clearFocusValueOnUpdate = null;
          }
        } else {
          clearFocusValueOnUpdate = null;
        }
        state = (state = state.focusedOption) && -1 < newMenuOptionsState.indexOf(state) ? state : newMenuOptionsState[0];
        newMenuOptionsState = getFocusedOptionId(instancePrefix, state);
        newMenuOptionsState = {selectValue, focusedOption:state, focusedOptionId:newMenuOptionsState, focusableOptionsWithIds:instancePrefix, focusedValue:clearFocusValueOnUpdate, clearFocusValueOnUpdate:!1};
      }
      prevProps = null != inputIsHiddenAfterUpdate && props !== prevProps ? {inputIsHidden:inputIsHiddenAfterUpdate, inputIsHiddenAfterUpdate:void 0} : {};
      inputIsHiddenAfterUpdate = ariaSelection;
      state = isFocused && prevWasFocused;
      isFocused && !state && (inputIsHiddenAfterUpdate = {value:index.valueTernary(isMulti, selectValue, selectValue[0] || null), options:selectValue, action:"initial-input-focus"}, state = !prevWasFocused);
      "initial-input-focus" === (null === ariaSelection || void 0 === ariaSelection ? void 0 : ariaSelection.action) && (inputIsHiddenAfterUpdate = null);
      return _objectSpread(_objectSpread(_objectSpread({}, newMenuOptionsState), prevProps), {}, {prevProps:props, ariaSelection:inputIsHiddenAfterUpdate, prevWasFocused:state});
    }}]);
    return Select;
  }(React.Component);
  j.defaultProps = diacritic;
  exports.Select = j;
  exports.createFilter = require;
  exports.defaultProps = diacritic;
  exports.defaultTheme = defaultTheme;
  exports.getOptionLabel = global;
  exports.getOptionValue = module;
  exports.mergeStyles = function(source) {
    var target = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : {}, styles = _objectSpread({}, source);
    Object.keys(target).forEach(function(keyAsString) {
      styles[keyAsString] = source[keyAsString] ? function(rsCss, props) {
        return target[keyAsString](source[keyAsString](rsCss, props), props);
      } : target[keyAsString];
    });
    return styles;
  };
};

//# sourceMappingURL=module$node_modules$react_select$dist$Select_d63eed7b_cjs_dev.js.map
