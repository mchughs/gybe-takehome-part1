shadow$provide.module$node_modules$$mui$base$node$useMenuButton$useMenuButton = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useMenuButton = function(parameters = {}) {
    const {disabled = !1, focusableWhenDisabled, rootRef:externalRef} = parameters;
    parameters = React.useContext(_DropdownContext.DropdownContext);
    if (null === parameters) {
      throw Error("useMenuButton: no menu context available.");
    }
    const {state, dispatch, registerTrigger, popupId} = parameters, {getRootProps:getButtonRootProps, rootRef:buttonRootRef, active} = (0,_useButton.useButton)({disabled, focusableWhenDisabled, rootRef:externalRef}), handleRef = (0,_utils.unstable_useForkRef)(buttonRootRef, registerTrigger), createHandleClick = otherHandlers => event => {
      var _otherHandlers$onClic;
      null == (_otherHandlers$onClic = otherHandlers.onClick) || _otherHandlers$onClic.call(otherHandlers, event);
      event.defaultMuiPrevented || dispatch({type:_useDropdown.DropdownActionTypes.toggle, event});
    }, createHandleKeyDown = otherHandlers => event => {
      var _otherHandlers$onKeyD;
      null == (_otherHandlers$onKeyD = otherHandlers.onKeyDown) || _otherHandlers$onKeyD.call(otherHandlers, event);
      event.defaultMuiPrevented || "ArrowDown" !== event.key && "ArrowUp" !== event.key || (event.preventDefault(), dispatch({type:_useDropdown.DropdownActionTypes.open, event}));
    }, getOwnRootProps = (otherHandlers = {}) => ({onClick:createHandleClick(otherHandlers), onKeyDown:createHandleKeyDown(otherHandlers)});
    return {active, getRootProps:(externalProps = {}) => {
      const externalEventHandlers = (0,_utils2.extractEventHandlers)(externalProps), getCombinedProps = (0,_combineHooksSlotProps.combineHooksSlotProps)(getOwnRootProps, getButtonRootProps);
      return (0,_extends2.default)({"aria-haspopup":"menu", "aria-expanded":state.open, "aria-controls":popupId}, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {tabIndex:0, ref:handleRef});
    }, open:state.open, rootRef:handleRef};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _DropdownContext = require("module$node_modules$$mui$base$node$useDropdown$DropdownContext"), _useDropdown = require("module$node_modules$$mui$base$node$useDropdown$useDropdown_types"), _useButton = require("module$node_modules$$mui$base$node$useButton$useButton"), _combineHooksSlotProps = require("module$node_modules$$mui$base$node$utils$combineHooksSlotProps"), _utils2 = require("module$node_modules$$mui$base$node$utils$index");
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useMenuButton$useMenuButton.js.map
