shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$utils$validation$validateTime = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.validateTime = void 0;
  var _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils");
  exports.validateTime = ({adapter, value, props}) => {
    if (null === value) {
      return null;
    }
    const {minTime, maxTime, minutesStep, shouldDisableTime, disableIgnoringDatePartForTimeValidation = !1, disablePast, disableFuture, timezone} = props;
    props = adapter.utils.date(void 0, timezone);
    const isAfter = (0,_timeUtils.createIsAfterIgnoreDatePart)(disableIgnoringDatePartForTimeValidation, adapter.utils);
    switch(!0) {
      case !adapter.utils.isValid(value):
        return "invalidDate";
      case !(!minTime || !isAfter(minTime, value)):
        return "minTime";
      case !(!maxTime || !isAfter(value, maxTime)):
        return "maxTime";
      case !(!disableFuture || !adapter.utils.isAfter(value, props)):
        return "disableFuture";
      case !(!disablePast || !adapter.utils.isBefore(value, props)):
        return "disablePast";
      case !(!shouldDisableTime || !shouldDisableTime(value, "hours")):
        return "shouldDisableTime-hours";
      case !(!shouldDisableTime || !shouldDisableTime(value, "minutes")):
        return "shouldDisableTime-minutes";
      case !(!shouldDisableTime || !shouldDisableTime(value, "seconds")):
        return "shouldDisableTime-seconds";
      case !(!minutesStep || 0 === adapter.utils.getMinutes(value) % minutesStep):
        return "minutesStep";
      default:
        return null;
    }
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$utils$validation$validateTime.js.map
