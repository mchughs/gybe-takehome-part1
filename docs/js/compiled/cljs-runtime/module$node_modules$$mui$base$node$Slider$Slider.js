shadow$provide.module$node_modules$$mui$base$node$Slider$Slider = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function Identity(x) {
    return x;
  }
  "use client";
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.Slider = void 0;
  var _extends2 = module(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = module(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  global = module(require("module$node_modules$prop_types$index"));
  var _clsx = module(require("module$node_modules$clsx$dist$clsx"));
  module = require("module$node_modules$$mui$utils$node$index");
  var _isHostComponent = require("module$node_modules$$mui$base$node$utils$isHostComponent"), _composeClasses = require("module$node_modules$$mui$base$node$composeClasses$index"), _sliderClasses = require("module$node_modules$$mui$base$node$Slider$sliderClasses"), _useSlider = require("module$node_modules$$mui$base$node$useSlider$index"), _useSlotProps = require("module$node_modules$$mui$base$node$utils$useSlotProps"), _resolveComponentProps = require("module$node_modules$$mui$base$node$utils$resolveComponentProps"), 
  _ClassNameConfigurator = require("module$node_modules$$mui$base$node$utils$ClassNameConfigurator"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = "aria-label aria-valuetext aria-labelledby className disableSwap disabled getAriaLabel getAriaValueText marks max min name onChange onChangeCommitted orientation shiftStep scale step tabIndex track value valueLabelFormat isRtl defaultValue slotProps slots".split(" "), useUtilityClasses = ownerState => {
    const {disabled, dragging, marked, orientation, track} = ownerState;
    return (0,_composeClasses.unstable_composeClasses)({root:["root", disabled && "disabled", dragging && "dragging", marked && "marked", "vertical" === orientation && "vertical", "inverted" === track && "trackInverted", !1 === track && "trackFalse"], rail:["rail"], track:["track"], mark:["mark"], markActive:["markActive"], markLabel:["markLabel"], markLabelActive:["markLabelActive"], valueLabel:["valueLabel"], thumb:["thumb", disabled && "disabled"], active:["active"], disabled:["disabled"], focusVisible:["focusVisible"]}, 
    (0,_ClassNameConfigurator.useClassNamesOverride)(_sliderClasses.getSliderUtilityClass));
  };
  (exports.Slider = React.forwardRef(function(props, forwardedRef) {
    var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
    const {"aria-label":ariaLabel, "aria-valuetext":ariaValuetext, "aria-labelledby":ariaLabelledby, className, disableSwap = !1, disabled = !1, getAriaLabel, getAriaValueText, marks:marksProp = !1, max = 100, min = 0, orientation = "horizontal", shiftStep = 10, scale = Identity, step = 1, track = "normal", valueLabelFormat = Identity, isRtl = !1, defaultValue, slotProps = {}, slots = {}} = props;
    var other = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded);
    props = (0,_extends2.default)({}, props, {marks:marksProp, disabled, disableSwap, isRtl, defaultValue, max, min, orientation, scale, step, shiftStep, track, valueLabelFormat});
    const {axisProps, getRootProps, getHiddenInputProps, getThumbProps, active, axis, range, focusedThumbIndex, dragging, marks, values, trackOffset, trackLeap, getThumbStyle} = (0,_useSlider.useSlider)((0,_extends2.default)({}, props, {rootRef:forwardedRef})), ownerState = (0,_extends2.default)({}, props, {marked:0 < marks.length && marks.some(mark => mark.label), dragging, focusedThumbIndex, activeThumbIndex:active}), classes = useUtilityClasses(ownerState);
    forwardedRef = null != (_slots$root = slots.root) ? _slots$root : "span";
    _slots$root = (0,_useSlotProps.useSlotProps)({elementType:forwardedRef, getSlotProps:getRootProps, externalSlotProps:slotProps.root, externalForwardedProps:other, ownerState, className:[classes.root, className]});
    other = null != (_slots$rail = slots.rail) ? _slots$rail : "span";
    _slots$rail = (0,_useSlotProps.useSlotProps)({elementType:other, externalSlotProps:slotProps.rail, ownerState, className:classes.rail});
    props = null != (_slots$track = slots.track) ? _slots$track : "span";
    _slots$track = (0,_useSlotProps.useSlotProps)({elementType:props, externalSlotProps:slotProps.track, additionalProps:{style:(0,_extends2.default)({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))}, ownerState, className:classes.track});
    const Thumb = null != (_slots$thumb = slots.thumb) ? _slots$thumb : "span", thumbProps = (0,_useSlotProps.useSlotProps)({elementType:Thumb, getSlotProps:getThumbProps, externalSlotProps:slotProps.thumb, ownerState, skipResolvingSlotProps:!0}), ValueLabel = slots.valueLabel, valueLabelProps = (0,_useSlotProps.useSlotProps)({elementType:ValueLabel, externalSlotProps:slotProps.valueLabel, ownerState}), Mark = null != (_slots$mark = slots.mark) ? _slots$mark : "span", markProps = (0,_useSlotProps.useSlotProps)({elementType:Mark, 
    externalSlotProps:slotProps.mark, ownerState, className:classes.mark}), MarkLabel = null != (_slots$markLabel = slots.markLabel) ? _slots$markLabel : "span", markLabelProps = (0,_useSlotProps.useSlotProps)({elementType:MarkLabel, externalSlotProps:slotProps.markLabel, ownerState}), Input = slots.input || "input", inputProps = (0,_useSlotProps.useSlotProps)({elementType:Input, getSlotProps:getHiddenInputProps, externalSlotProps:slotProps.input, ownerState});
    return (0,_jsxRuntime.jsxs)(forwardedRef, (0,_extends2.default)({}, _slots$root, {children:[(0,_jsxRuntime.jsx)(other, (0,_extends2.default)({}, _slots$rail)), (0,_jsxRuntime.jsx)(props, (0,_extends2.default)({}, _slots$track)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {
      var percent = (0,_useSlider.valueToPercent)(mark.value, min, max);
      percent = axisProps[axis].offset(percent);
      let markActive;
      markActive = !1 === track ? -1 !== values.indexOf(mark.value) : "normal" === track && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || "inverted" === track && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
      return (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(Mark, (0,_extends2.default)({"data-index":index}, markProps, !(0,_isHostComponent.isHostComponent)(Mark) && {markActive}, {style:(0,_extends2.default)({}, percent, markProps.style), className:(0,_clsx.default)(markProps.className, markActive && classes.markActive)})), null != mark.label ? (0,_jsxRuntime.jsx)(MarkLabel, (0,_extends2.default)({"aria-hidden":!0, "data-index":index}, markLabelProps, !(0,_isHostComponent.isHostComponent)(MarkLabel) && 
      {markLabelActive:markActive}, {style:(0,_extends2.default)({}, percent, markLabelProps.style), className:(0,_clsx.default)(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive), children:mark.label})) : null]}, index);
    }), values.map((value, index) => {
      var percent = (0,_useSlider.valueToPercent)(value, min, max);
      percent = axisProps[axis].offset(percent);
      const resolvedSlotProps = (0,_resolveComponentProps.resolveComponentProps)(slotProps.thumb, ownerState, {index, focused:focusedThumbIndex === index, active:active === index});
      return (0,_jsxRuntime.jsxs)(Thumb, (0,_extends2.default)({"data-index":index}, thumbProps, resolvedSlotProps, {className:(0,_clsx.default)(classes.thumb, thumbProps.className, null == resolvedSlotProps ? void 0 : resolvedSlotProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible), style:(0,_extends2.default)({}, percent, getThumbStyle(index), thumbProps.style, null == resolvedSlotProps ? void 0 : resolvedSlotProps.style), children:[(0,_jsxRuntime.jsx)(Input, 
      (0,_extends2.default)({"data-index":index, "aria-label":getAriaLabel ? getAriaLabel(index) : ariaLabel, "aria-valuenow":scale(value), "aria-labelledby":ariaLabelledby, "aria-valuetext":getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext, value:values[index]}, inputProps)), ValueLabel ? (0,_jsxRuntime.jsx)(ValueLabel, (0,_extends2.default)({}, !(0,_isHostComponent.isHostComponent)(ValueLabel) && {valueLabelFormat, index, disabled}, valueLabelProps, {children:"function" === 
      typeof valueLabelFormat ? valueLabelFormat(scale(value), index) : valueLabelFormat})) : null]}), index);
    })]}));
  })).propTypes = {"aria-label":(0,module.chainPropTypes)(global.default.string, props => Array.isArray(props.value || props.defaultValue) && null != props["aria-label"] ? Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.") : null), "aria-labelledby":global.default.string, "aria-valuetext":(0,module.chainPropTypes)(global.default.string, props => Array.isArray(props.value || props.defaultValue) && null != props["aria-valuetext"] ? Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.") : 
  null), defaultValue:global.default.oneOfType([global.default.arrayOf(global.default.number), global.default.number]), disabled:global.default.bool, disableSwap:global.default.bool, getAriaLabel:global.default.func, getAriaValueText:global.default.func, isRtl:global.default.bool, marks:global.default.oneOfType([global.default.arrayOf(global.default.shape({label:global.default.node, value:global.default.number.isRequired})), global.default.bool]), max:global.default.number, min:global.default.number, 
  name:global.default.string, onChange:global.default.func, onChangeCommitted:global.default.func, orientation:global.default.oneOf(["horizontal", "vertical"]), scale:global.default.func, shiftStep:global.default.number, slotProps:global.default.shape({input:global.default.oneOfType([global.default.func, global.default.object]), mark:global.default.oneOfType([global.default.func, global.default.object]), markLabel:global.default.oneOfType([global.default.func, global.default.object]), rail:global.default.oneOfType([global.default.func, 
  global.default.object]), root:global.default.oneOfType([global.default.func, global.default.object]), thumb:global.default.oneOfType([global.default.func, global.default.object]), track:global.default.oneOfType([global.default.func, global.default.object]), valueLabel:global.default.oneOfType([global.default.any, global.default.func])}), slots:global.default.shape({input:global.default.elementType, mark:global.default.elementType, markLabel:global.default.elementType, rail:global.default.elementType, 
  root:global.default.elementType, thumb:global.default.elementType, track:global.default.elementType, valueLabel:global.default.elementType}), step:global.default.number, tabIndex:global.default.number, track:global.default.oneOf(["inverted", "normal", !1]), value:global.default.oneOfType([global.default.arrayOf(global.default.number), global.default.number]), valueLabelFormat:global.default.oneOfType([global.default.func, global.default.string])};
};

//# sourceMappingURL=module$node_modules$$mui$base$node$Slider$Slider.js.map
