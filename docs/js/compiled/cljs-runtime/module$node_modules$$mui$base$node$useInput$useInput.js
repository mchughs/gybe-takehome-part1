shadow$provide.module$node_modules$$mui$base$node$useInput$useInput = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useInput = function(parameters = {}) {
    const {defaultValue:defaultValueProp, disabled:disabledProp = !1, error:errorProp = !1, onBlur, onChange, onFocus, required:requiredProp = !1, value:valueProp, inputRef:inputRefProp} = parameters, formControlContext = (0,_FormControl.useFormControlContext)();
    let defaultValue, disabled, error, required, value;
    if (formControlContext) {
      var _formControlContext$d, _formControlContext$e, _formControlContext$r;
      defaultValue = void 0;
      disabled = null != (_formControlContext$d = formControlContext.disabled) ? _formControlContext$d : !1;
      error = null != (_formControlContext$e = formControlContext.error) ? _formControlContext$e : !1;
      required = null != (_formControlContext$r = formControlContext.required) ? _formControlContext$r : !1;
      value = formControlContext.value;
      _formControlContext$d = ["defaultValue", "disabled", "error", "required", "value"].filter(prop => void 0 !== parameters[prop]);
      0 < _formControlContext$d.length && console.warn(["MUI: You have set props on an input that is inside a FormControl.\nSet these props on a FormControl instead. Otherwise they will be ignored.", `Ignored props: ${_formControlContext$d.join(", ")}`].join("\n"));
    } else {
      defaultValue = defaultValueProp, disabled = disabledProp, error = errorProp, required = requiredProp, value = valueProp;
    }
    const {current:isControlled} = React.useRef(null != value);
    _formControlContext$d = React.useCallback(instance => {
      instance && "INPUT" !== instance.nodeName && !instance.focus && console.error("MUI: You have provided a `slots.input` to the input component\nthat does not correctly handle the `ref` prop.\nMake sure the `ref` prop is called with a HTMLInputElement.");
    }, []);
    const inputRef = React.useRef(null), handleInputRef = (0,_utils.unstable_useForkRef)(inputRef, inputRefProp, _formControlContext$d), [focused, setFocused] = React.useState(!1);
    React.useEffect(() => {
      !formControlContext && disabled && focused && (setFocused(!1), null == onBlur || onBlur());
    }, [formControlContext, disabled, focused, onBlur]);
    const handleFocus = otherHandlers => event => {
      var _otherHandlers$onFocu;
      if (null != formControlContext && formControlContext.disabled) {
        event.stopPropagation();
      } else {
        if (null == (_otherHandlers$onFocu = otherHandlers.onFocus) || _otherHandlers$onFocu.call(otherHandlers, event), formControlContext && formControlContext.onFocus) {
          var _formControlContext$o;
          null == formControlContext || null == (_formControlContext$o = formControlContext.onFocus) || _formControlContext$o.call(formControlContext);
        } else {
          setFocused(!0);
        }
      }
    }, handleBlur = otherHandlers => event => {
      var _otherHandlers$onBlur;
      null == (_otherHandlers$onBlur = otherHandlers.onBlur) || _otherHandlers$onBlur.call(otherHandlers, event);
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      } else {
        setFocused(!1);
      }
    }, handleChange = otherHandlers => (event, ...args) => {
      var _formControlContext$o2, _otherHandlers$onChan;
      if (!isControlled && null == (event.target || inputRef.current)) {
        throw Error("MUI: Expected valid input target. Did you use a custom `slots.input` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.");
      }
      null == formControlContext || null == (_formControlContext$o2 = formControlContext.onChange) || _formControlContext$o2.call(formControlContext, event);
      null == (_otherHandlers$onChan = otherHandlers.onChange) || _otherHandlers$onChan.call(otherHandlers, event, ...args);
    }, handleClick = otherHandlers => event => {
      var _otherHandlers$onClic;
      inputRef.current && event.currentTarget === event.target && inputRef.current.focus();
      null == (_otherHandlers$onClic = otherHandlers.onClick) || _otherHandlers$onClic.call(otherHandlers, event);
    };
    return {disabled, error, focused, formControlContext, getInputProps:(externalProps = {}) => {
      var externalEventHandlers = (0,_extends2.default)({}, {onBlur, onChange, onFocus}, (0,_extractEventHandlers.extractEventHandlers)(externalProps));
      externalEventHandlers = (0,_extends2.default)({}, externalEventHandlers, {onBlur:handleBlur(externalEventHandlers), onChange:handleChange(externalEventHandlers), onFocus:handleFocus(externalEventHandlers)});
      return (0,_extends2.default)({}, externalEventHandlers, {"aria-invalid":error || void 0, defaultValue, value, required, disabled}, externalProps, {ref:handleInputRef}, externalEventHandlers);
    }, getRootProps:(externalProps = {}) => {
      var propsEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(parameters, ["onBlur", "onChange", "onFocus"]);
      propsEventHandlers = (0,_extends2.default)({}, propsEventHandlers, (0,_extractEventHandlers.extractEventHandlers)(externalProps));
      return (0,_extends2.default)({}, externalProps, propsEventHandlers, {onClick:handleClick(propsEventHandlers)});
    }, inputRef:handleInputRef, required, value};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends"));
  global(require("module$node_modules$$mui$utils$node$formatMuiErrorMessage$index"));
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _FormControl = require("module$node_modules$$mui$base$node$FormControl$index"), _extractEventHandlers = require("module$node_modules$$mui$base$node$utils$extractEventHandlers");
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useInput$useInput.js.map
