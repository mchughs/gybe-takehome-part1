shadow$provide.module$node_modules$$mui$system$useMediaQuery$useMediaQuery = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match, setMatch] = React.useState(() => noSsr && matchMedia ? matchMedia(query).matches : ssrMatchMedia ? ssrMatchMedia(query).matches : defaultMatches);
    (0,_useEnhancedEffect.default)(() => {
      let active = !0;
      if (matchMedia) {
        var queryList = matchMedia(query), updateMatch = () => {
          active && setMatch(queryList.matches);
        };
        active && setMatch(queryList.matches);
        queryList.addListener(updateMatch);
        return () => {
          active = !1;
          queryList.removeListener(updateMatch);
        };
      }
    }, [query, matchMedia]);
    return match;
  }
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]), getServerSnapshot = React.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (null !== ssrMatchMedia) {
        const {matches} = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]), [getSnapshot, subscribe] = React.useMemo(() => {
      if (null === matchMedia) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, notify => {
        mediaQueryList.addListener(notify);
        return () => {
          mediaQueryList.removeListener(notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    return maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(queryInput, options = {}) {
    const theme = (0,_useThemeWithoutDefault.default)(), supportMatchMedia = "undefined" !== typeof window && "undefined" !== typeof window.matchMedia, {defaultMatches = !1, matchMedia = supportMatchMedia ? window.matchMedia : null, ssrMatchMedia = null, noSsr = !1} = (0,_useThemeProps.getThemeProps)({name:"MuiUseMediaQuery", props:options, theme});
    "function" === typeof queryInput && null === theme && console.error("MUI: The `query` argument provided is invalid.\nYou are providing a function without a theme in the context.\nOne of the parent elements needs to use a ThemeProvider.");
    queryInput = "function" === typeof queryInput ? queryInput(theme) : queryInput;
    queryInput = queryInput.replace(/^@media( ?)/m, "");
    options = (void 0 !== maybeReactUseSyncExternalStore ? useMediaQueryNew : useMediaQueryOld)(queryInput, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    React.useDebugValue({query:queryInput, match:options});
    return options;
  };
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _useEnhancedEffect = global(require("module$node_modules$$mui$utils$node$useEnhancedEffect$index")), _useThemeProps = require("module$node_modules$$mui$system$useThemeProps$index"), _useThemeWithoutDefault = global(require("module$node_modules$$mui$system$useThemeWithoutDefault"));
  const maybeReactUseSyncExternalStore = React.useSyncExternalStore;
};

//# sourceMappingURL=module$node_modules$$mui$system$useMediaQuery$useMediaQuery.js.map
