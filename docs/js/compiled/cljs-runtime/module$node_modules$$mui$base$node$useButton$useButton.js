shadow$provide.module$node_modules$$mui$base$node$useButton$useButton = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useButton = function(parameters = {}) {
    const {disabled = !1, focusableWhenDisabled, href, rootRef:externalRef, tabIndex, to, type, rootElementName:rootElementNameProp} = parameters, buttonRef = React.useRef(), [active, setActive] = React.useState(!1), {isFocusVisibleRef, onFocus:handleFocusVisible, onBlur:handleBlurVisible, ref:focusVisibleRef} = (0,_utils.unstable_useIsFocusVisible)(), [focusVisible, setFocusVisible] = React.useState(!1);
    disabled && !focusableWhenDisabled && focusVisible && setFocusVisible(!1);
    React.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const [rootElementName, updateRootElementName] = (0,_useRootElementName.useRootElementName)({rootElementName:null != rootElementNameProp ? rootElementNameProp : href || to ? "a" : void 0, componentName:"Button"}), createHandleMouseLeave = otherHandlers => event => {
      var _otherHandlers$onMous;
      focusVisible && event.preventDefault();
      null == (_otherHandlers$onMous = otherHandlers.onMouseLeave) || _otherHandlers$onMous.call(otherHandlers, event);
    }, createHandleBlur = otherHandlers => event => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      !1 === isFocusVisibleRef.current && setFocusVisible(!1);
      null == (_otherHandlers$onBlur = otherHandlers.onBlur) || _otherHandlers$onBlur.call(otherHandlers, event);
    }, createHandleFocus = otherHandlers => event => {
      var _otherHandlers$onFocu2;
      buttonRef.current || (buttonRef.current = event.currentTarget);
      handleFocusVisible(event);
      if (!0 === isFocusVisibleRef.current) {
        var _otherHandlers$onFocu;
        setFocusVisible(!0);
        null == (_otherHandlers$onFocu = otherHandlers.onFocusVisible) || _otherHandlers$onFocu.call(otherHandlers, event);
      }
      null == (_otherHandlers$onFocu2 = otherHandlers.onFocus) || _otherHandlers$onFocu2.call(otherHandlers, event);
    }, isNativeButton = () => {
      const button = buttonRef.current;
      return "BUTTON" === rootElementName || "INPUT" === rootElementName && ["button", "submit", "reset"].includes(null == button ? void 0 : button.type) || "A" === rootElementName && (null == button ? void 0 : button.href);
    }, createHandleClick = otherHandlers => event => {
      if (!disabled) {
        var _otherHandlers$onClic;
        null == (_otherHandlers$onClic = otherHandlers.onClick) || _otherHandlers$onClic.call(otherHandlers, event);
      }
    }, createHandleMouseDown = otherHandlers => event => {
      var _otherHandlers$onMous2;
      disabled || (setActive(!0), document.addEventListener("mouseup", () => {
        setActive(!1);
      }, {once:!0}));
      null == (_otherHandlers$onMous2 = otherHandlers.onMouseDown) || _otherHandlers$onMous2.call(otherHandlers, event);
    }, createHandleKeyDown = otherHandlers => event => {
      var _otherHandlers$onKeyD;
      null == (_otherHandlers$onKeyD = otherHandlers.onKeyDown) || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (!event.defaultMuiPrevented && (event.target !== event.currentTarget || isNativeButton() || " " !== event.key || event.preventDefault(), event.target !== event.currentTarget || " " !== event.key || disabled || setActive(!0), event.target === event.currentTarget && !isNativeButton() && "Enter" === event.key && !disabled)) {
        var _otherHandlers$onClic2;
        null == (_otherHandlers$onClic2 = otherHandlers.onClick) || _otherHandlers$onClic2.call(otherHandlers, event);
        event.preventDefault();
      }
    }, createHandleKeyUp = otherHandlers => event => {
      var _otherHandlers$onKeyU;
      event.target === event.currentTarget && setActive(!1);
      null == (_otherHandlers$onKeyU = otherHandlers.onKeyUp) || _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.target === event.currentTarget && !isNativeButton() && !disabled && " " === event.key && !event.defaultMuiPrevented) {
        var _otherHandlers$onClic3;
        null == (_otherHandlers$onClic3 = otherHandlers.onClick) || _otherHandlers$onClic3.call(otherHandlers, event);
      }
    }, handleRef = (0,_utils.unstable_useForkRef)(updateRootElementName, externalRef, focusVisibleRef, buttonRef), buttonProps = {};
    void 0 !== tabIndex && (buttonProps.tabIndex = tabIndex);
    "BUTTON" === rootElementName ? (buttonProps.type = null != type ? type : "button", focusableWhenDisabled ? buttonProps["aria-disabled"] = disabled : buttonProps.disabled = disabled) : "INPUT" === rootElementName ? type && ["button", "submit", "reset"].includes(type) && (focusableWhenDisabled ? buttonProps["aria-disabled"] = disabled : buttonProps.disabled = disabled) : "" !== rootElementName && (href || to || (buttonProps.role = "button", buttonProps.tabIndex = null != tabIndex ? tabIndex : 0), 
    disabled && (buttonProps["aria-disabled"] = disabled, buttonProps.tabIndex = focusableWhenDisabled ? null != tabIndex ? tabIndex : 0 : -1));
    return {getRootProps:(externalProps = {}) => {
      const externalEventHandlers = (0,_extends2.default)({}, (0,_extractEventHandlers.extractEventHandlers)(parameters), (0,_extractEventHandlers.extractEventHandlers)(externalProps));
      externalProps = (0,_extends2.default)({type}, externalEventHandlers, buttonProps, externalProps, {onBlur:createHandleBlur(externalEventHandlers), onClick:createHandleClick(externalEventHandlers), onFocus:createHandleFocus(externalEventHandlers), onKeyDown:createHandleKeyDown(externalEventHandlers), onKeyUp:createHandleKeyUp(externalEventHandlers), onMouseDown:createHandleMouseDown(externalEventHandlers), onMouseLeave:createHandleMouseLeave(externalEventHandlers), ref:handleRef});
      delete externalProps.onFocusVisible;
      return externalProps;
    }, focusVisible, setFocusVisible, active, rootRef:handleRef};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _extractEventHandlers = require("module$node_modules$$mui$base$node$utils$extractEventHandlers"), _useRootElementName = require("module$node_modules$$mui$base$node$utils$useRootElementName");
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useButton$useButton.js.map
