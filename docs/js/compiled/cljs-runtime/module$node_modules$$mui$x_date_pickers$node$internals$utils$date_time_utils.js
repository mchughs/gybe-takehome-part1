shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$utils$date_time_utils = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.resolveDateTimeFormat = void 0;
  exports.resolveTimeViewsResponse = function({thresholdToRenderTimeInASingleColumn:inThreshold, ampm, timeSteps:inTimeSteps, views}) {
    inThreshold = inThreshold ?? 24;
    inTimeSteps = (0,_extends2.default)({hours:1, minutes:5, seconds:5}, inTimeSteps);
    const shouldRenderTimeInASingleColumn = 1440 / ((inTimeSteps.hours ?? 1) * (inTimeSteps.minutes ?? 5)) <= inThreshold;
    return {thresholdToRenderTimeInASingleColumn:inThreshold, timeSteps:inTimeSteps, shouldRenderTimeInASingleColumn, views:resolveViews(ampm, views, shouldRenderTimeInASingleColumn)};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils"), _dateUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$date_utils");
  const _excluded = ["views", "format"];
  exports.resolveDateTimeFormat = (utils, _ref) => {
    let {views, format} = _ref;
    _ref = (0,_objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    if (format) {
      return format;
    }
    const dateViews = [], timeViews = [];
    views.forEach(view => {
      (0,_timeUtils.isTimeView)(view) ? timeViews.push(view) : dateViews.push(view);
    });
    if (0 === timeViews.length) {
      return (0,_dateUtils.resolveDateFormat)(utils, (0,_extends2.default)({views:dateViews}, _ref), !1);
    }
    if (0 === dateViews.length) {
      return (0,_timeUtils.resolveTimeFormat)(utils, (0,_extends2.default)({views:timeViews}, _ref));
    }
    const timeFormat = (0,_timeUtils.resolveTimeFormat)(utils, (0,_extends2.default)({views:timeViews}, _ref));
    return `${(0,_dateUtils.resolveDateFormat)(utils, (0,_extends2.default)({views:dateViews}, _ref), !1)} ${timeFormat}`;
  };
  const resolveViews = (ampm, views, shouldUseSingleColumn) => shouldUseSingleColumn ? views.filter(view => !(0,_timeUtils.isInternalTimeView)(view) || "hours" === view) : ampm ? [...views, "meridiem"] : views;
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$utils$date_time_utils.js.map
