shadow$provide.module$node_modules$$mui$system$Unstable_Grid$gridGenerator = function(global, require, module, exports) {
  function appendLevel(level) {
    return level ? `Level${level}` : "";
  }
  function isNestedContainer(ownerState) {
    return 0 < ownerState.unstable_level && ownerState.container;
  }
  function createGetSelfSpacing(ownerState) {
    return function(axis) {
      return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
    };
  }
  function createGetParentSpacing(ownerState) {
    return function(axis) {
      return 0 === ownerState.unstable_level ? `var(--Grid-${axis}Spacing)` : `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
    };
  }
  function getParentColumns(ownerState) {
    return 0 === ownerState.unstable_level ? "var(--Grid-columns)" : `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.generateSpacingClassNames = exports.generateSizeClassNames = exports.generateGridStyles = exports.generateGridSizeStyles = exports.generateGridRowSpacingStyles = exports.generateGridOffsetStyles = exports.generateGridDirectionStyles = exports.generateGridColumnsStyles = exports.generateGridColumnSpacingStyles = exports.generateDirectionClasses = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _traverseBreakpoints = require("module$node_modules$$mui$system$Unstable_Grid$traverseBreakpoints");
  exports.generateGridSizeStyles = ({theme, ownerState}) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState), styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
      let style = {};
      !0 === value && (style = {flexBasis:0, flexGrow:1, maxWidth:"100%"});
      "auto" === value && (style = {flexBasis:"auto", flexGrow:0, flexShrink:0, maxWidth:"none", width:"auto"});
      "number" === typeof value && (style = {flexGrow:0, flexBasis:"auto", width:`calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`});
      appendStyle(styles, style);
    });
    return styles;
  };
  exports.generateGridOffsetStyles = ({theme, ownerState}) => {
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
      let style = {};
      "auto" === value && (style = {marginLeft:"auto"});
      "number" === typeof value && (style = {marginLeft:0 === value ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`});
      appendStyle(styles, style);
    });
    return styles;
  };
  exports.generateGridColumnsStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = isNestedContainer(ownerState) ? {[`--Grid-columns${appendLevel(ownerState.unstable_level)}`]:getParentColumns(ownerState)} : {"--Grid-columns":12};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
      appendStyle(styles, {[`--Grid-columns${appendLevel(ownerState.unstable_level)}`]:value});
    });
    return styles;
  };
  exports.generateGridRowSpacingStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState), styles = isNestedContainer(ownerState) ? {[`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]:getParentSpacing("row")} : {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
      var _theme$spacing;
      appendStyle(styles, {[`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]:"string" === typeof value ? value : null == (_theme$spacing = theme.spacing) ? void 0 : _theme$spacing.call(theme, value)});
    });
    return styles;
  };
  exports.generateGridColumnSpacingStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const getParentSpacing = createGetParentSpacing(ownerState), styles = isNestedContainer(ownerState) ? {[`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]:getParentSpacing("column")} : {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
      var _theme$spacing2;
      appendStyle(styles, {[`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]:"string" === typeof value ? value : null == (_theme$spacing2 = theme.spacing) ? void 0 : _theme$spacing2.call(theme, value)});
    });
    return styles;
  };
  exports.generateGridDirectionStyles = ({theme, ownerState}) => {
    if (!ownerState.container) {
      return {};
    }
    const styles = {};
    (0,_traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
      appendStyle(styles, {flexDirection:value});
    });
    return styles;
  };
  exports.generateGridStyles = ({ownerState}) => {
    const getSelfSpacing = createGetSelfSpacing(ownerState), getParentSpacing = createGetParentSpacing(ownerState);
    return (0,_extends2.default)({minWidth:0, boxSizing:"border-box"}, ownerState.container && (0,_extends2.default)({display:"flex", flexWrap:"wrap"}, ownerState.wrap && "wrap" !== ownerState.wrap && {flexWrap:ownerState.wrap}, {margin:`calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`}, ownerState.disableEqualOverflow && {margin:`calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`}), (!ownerState.container || isNestedContainer(ownerState)) && 
    (0,_extends2.default)({padding:`calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`}, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {padding:`${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`}));
  };
  exports.generateSizeClassNames = gridSize => {
    const classNames = [];
    Object.entries(gridSize).forEach(([key, value]) => {
      !1 !== value && void 0 !== value && classNames.push(`grid-${key}-${String(value)}`);
    });
    return classNames;
  };
  exports.generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
    function isValidSpacing(val) {
      return void 0 === val ? !1 : "string" === typeof val && !Number.isNaN(Number(val)) || "number" === typeof val && 0 < val;
    }
    if (isValidSpacing(spacing)) {
      return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
    }
    if ("object" === typeof spacing && !Array.isArray(spacing)) {
      const classNames = [];
      Object.entries(spacing).forEach(([key, value]) => {
        isValidSpacing(value) && classNames.push(`spacing-${key}-${String(value)}`);
      });
      return classNames;
    }
    return [];
  };
  exports.generateDirectionClasses = direction => void 0 === direction ? [] : "object" === typeof direction ? Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`) : [`direction-xs-${String(direction)}`];
};

//# sourceMappingURL=module$node_modules$$mui$system$Unstable_Grid$gridGenerator.js.map
