shadow$provide.module$node_modules$$mui$base$node$unstable_useNumberInput$numberInputReducer = function(global, require, module, exports) {
  function getClampedValues(rawValue, context) {
    const {min, max, step} = context;
    rawValue = null === rawValue ? null : (0,_utils.clampStepwise)(rawValue, min, max, step);
    return {value:rawValue, inputValue:null === rawValue ? "" : String(rawValue)};
  }
  function handleStep(state, context, applyMultiplier, direction) {
    applyMultiplier = applyMultiplier ? context.shiftMultiplier : 1;
    {
      const {value} = state, {step = 1, min, max} = context;
      direction = (0,_utils.isNumber)(value) ? {up:value + (null != step ? step : 1) * applyMultiplier, down:value - (null != step ? step : 1) * applyMultiplier}[direction] : {up:null != min ? min : 1, down:null != max ? max : -1}[direction];
    }
    context = getClampedValues(direction, context);
    return (0,_extends2.default)({}, state, context);
  }
  function handleToMinOrMax(state, context, to) {
    context = context[to];
    return (0,_utils.isNumber)(context) ? (0,_extends2.default)({}, state, {value:context, inputValue:String(context)}) : state;
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.numberInputReducer = function(state, action) {
    const {type, context} = action;
    switch(type) {
      case _numberInputAction.NumberInputActionTypes.clamp:
        var {getInputValueAsString} = context;
        action = getInputValueAsString(action.inputValue);
        action = "" === action || "-" === action ? null : parseInt(action, 10);
        action = getClampedValues(action, context);
        return (0,_extends2.default)({}, state, action);
      case _numberInputAction.NumberInputActionTypes.inputChange:
        return {getInputValueAsString} = context, action = getInputValueAsString(action.inputValue), state = action.match(/^-?\d+?$/) || "" === action || "-" === action ? (0,_extends2.default)({}, state, {inputValue:action}) : state, state;
      case _numberInputAction.NumberInputActionTypes.increment:
        return handleStep(state, context, action.applyMultiplier, "up");
      case _numberInputAction.NumberInputActionTypes.decrement:
        return handleStep(state, context, action.applyMultiplier, "down");
      case _numberInputAction.NumberInputActionTypes.incrementToMax:
        return handleToMinOrMax(state, context, "max");
      case _numberInputAction.NumberInputActionTypes.decrementToMin:
        return handleToMinOrMax(state, context, "min");
      case _numberInputAction.NumberInputActionTypes.resetInputValue:
        return (0,_extends2.default)({}, state, {inputValue:String(state.value)});
      default:
        return state;
    }
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _numberInputAction = require("module$node_modules$$mui$base$node$unstable_useNumberInput$numberInputAction_types"), _utils = require("module$node_modules$$mui$base$node$unstable_useNumberInput$utils");
};

//# sourceMappingURL=module$node_modules$$mui$base$node$unstable_useNumberInput$numberInputReducer.js.map
