shadow$provide.module$node_modules$$mui$x_date_pickers$node$AdapterDayjs$AdapterDayjs = function(global, require, module, exports) {
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.AdapterDayjs = void 0;
  var _extends2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$extends")), _dayjs = _interopRequireDefault(require("module$node_modules$dayjs$dayjs_min"));
  global = _interopRequireDefault(require("module$node_modules$dayjs$plugin$weekOfYear"));
  var _customParseFormat = _interopRequireDefault(require("module$node_modules$dayjs$plugin$customParseFormat"));
  module = _interopRequireDefault(require("module$node_modules$dayjs$plugin$localizedFormat"));
  var _isBetween = _interopRequireDefault(require("module$node_modules$dayjs$plugin$isBetween"));
  _interopRequireDefault = _interopRequireDefault(require("module$node_modules$dayjs$plugin$advancedFormat"));
  require = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$warning");
  _dayjs.default.extend(module.default);
  _dayjs.default.extend(global.default);
  _dayjs.default.extend(_isBetween.default);
  _dayjs.default.extend(_interopRequireDefault.default);
  const localeNotFoundWarning = (0,require.buildWarning)(["Your locale has not been found.", "Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale", "Or you forget to import the locale from 'dayjs/locale/{localeUsed}'", "fallback on English locale"]), formatTokenMap = {YY:"year", YYYY:{sectionType:"year", contentType:"digit", maxLength:4}, M:{sectionType:"month", contentType:"digit", maxLength:2}, MM:"month", 
  MMM:{sectionType:"month", contentType:"letter"}, MMMM:{sectionType:"month", contentType:"letter"}, D:{sectionType:"day", contentType:"digit", maxLength:2}, DD:"day", Do:{sectionType:"day", contentType:"digit-with-letter"}, d:{sectionType:"weekDay", contentType:"digit", maxLength:2}, dd:{sectionType:"weekDay", contentType:"letter"}, ddd:{sectionType:"weekDay", contentType:"letter"}, dddd:{sectionType:"weekDay", contentType:"letter"}, A:"meridiem", a:"meridiem", H:{sectionType:"hours", contentType:"digit", 
  maxLength:2}, HH:"hours", h:{sectionType:"hours", contentType:"digit", maxLength:2}, hh:"hours", m:{sectionType:"minutes", contentType:"digit", maxLength:2}, mm:"minutes", s:{sectionType:"seconds", contentType:"digit", maxLength:2}, ss:"seconds"}, defaultFormats = {year:"YYYY", month:"MMMM", monthShort:"MMM", dayOfMonth:"D", dayOfMonthFull:"Do", weekday:"dddd", weekdayShort:"dd", hours24h:"HH", hours12h:"hh", meridiem:"A", minutes:"mm", seconds:"ss", fullDate:"ll", keyboardDate:"L", shortDate:"MMM D", 
  normalDate:"D MMMM", normalDateWithWeekday:"ddd, MMM D", fullTime:"LT", fullTime12h:"hh:mm A", fullTime24h:"HH:mm", keyboardDateTime:"L LT", keyboardDateTime12h:"L hh:mm A", keyboardDateTime24h:"L HH:mm"}, withLocale = (dayjs, locale) => locale ? (...args) => dayjs(...args).locale(locale) : dayjs;
  class AdapterDayjs {
    constructor({locale:_locale, formats} = {}) {
      this.isTimezoneCompatible = this.isMUIAdapter = !0;
      this.lib = "dayjs";
      this.formats = this.locale = this.dayjs = void 0;
      this.escapedCharacters = {start:"[", end:"]"};
      this.formatTokenMap = formatTokenMap;
      this.setLocaleToValue = value => {
        const expectedLocale = this.getCurrentLocaleCode();
        return expectedLocale === value.locale() ? value : value.locale(expectedLocale);
      };
      this.hasUTCPlugin = () => "undefined" !== typeof _dayjs.default.utc;
      this.hasTimezonePlugin = () => "undefined" !== typeof _dayjs.default.tz;
      this.isSame = (value, comparing, comparisonTemplate) => {
        comparing = this.setTimezone(comparing, this.getTimezone(value));
        return value.format(comparisonTemplate) === comparing.format(comparisonTemplate);
      };
      this.cleanTimezone = timezone => {
        switch(timezone) {
          case "default":
            break;
          case "system":
            return _dayjs.default.tz.guess();
          default:
            return timezone;
        }
      };
      this.createSystemDate = value => {
        if (this.hasUTCPlugin() && this.hasTimezonePlugin()) {
          const timezone = _dayjs.default.tz.guess();
          if ("UTC" !== timezone) {
            return _dayjs.default.tz(value, timezone);
          }
        }
        return (0,_dayjs.default)(value);
      };
      this.createUTCDate = value => {
        if (!this.hasUTCPlugin()) {
          throw Error("Missing UTC plugin\nTo be able to use UTC or timezones, you have to enable the `utc` plugin\nFind more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc");
        }
        return _dayjs.default.utc(value);
      };
      this.createTZDate = (value, timezone) => {
        if (!this.hasUTCPlugin()) {
          throw Error("Missing UTC plugin\nTo be able to use UTC or timezones, you have to enable the `utc` plugin\nFind more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc");
        }
        if (!this.hasTimezonePlugin()) {
          throw Error("Missing timezone plugin\nTo be able to use timezones, you have to enable both the `utc` and the `timezone` plugin\nFind more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone");
        }
        const keepLocalTime = void 0 !== value && !value.endsWith("Z");
        return (0,_dayjs.default)(value).tz(this.cleanTimezone(timezone), keepLocalTime);
      };
      this.getLocaleFormats = () => {
        const locales = _dayjs.default.Ls;
        let localeObject = locales[this.locale || "en"];
        void 0 === localeObject && (localeNotFoundWarning(), localeObject = locales.en);
        return localeObject.formats;
      };
      this.adjustOffset = value => {
        if (!this.hasTimezonePlugin()) {
          return value;
        }
        var timezone = this.getTimezone(value);
        return "UTC" !== timezone ? (timezone = value.tz(this.cleanTimezone(timezone), !0), (timezone.$offset ?? 0) === (value.$offset ?? 0) ? value : timezone) : value;
      };
      this.date = (value, timezone = "default") => {
        if (null === value) {
          return null;
        }
        value = "UTC" === timezone ? this.createUTCDate(value) : "system" === timezone || "default" === timezone && !this.hasTimezonePlugin() ? this.createSystemDate(value) : this.createTZDate(value, timezone);
        return void 0 === this.locale ? value : value.locale(this.locale);
      };
      this.getInvalidDate = () => (0,_dayjs.default)(new Date("Invalid date"));
      this.getTimezone = value => {
        if (this.hasTimezonePlugin()) {
          const zone = value.$x?.$timezone;
          if (zone) {
            return zone;
          }
        }
        return this.hasUTCPlugin() && value.isUTC() ? "UTC" : "system";
      };
      this.setTimezone = (value, timezone) => {
        if (this.getTimezone(value) === timezone) {
          return value;
        }
        if ("UTC" === timezone) {
          if (!this.hasUTCPlugin()) {
            throw Error("Missing UTC plugin\nTo be able to use UTC or timezones, you have to enable the `utc` plugin\nFind more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc");
          }
          return value.utc();
        }
        if ("system" === timezone) {
          return value.local();
        }
        if (!this.hasTimezonePlugin()) {
          if ("default" === timezone) {
            return value;
          }
          throw Error("Missing timezone plugin\nTo be able to use timezones, you have to enable both the `utc` and the `timezone` plugin\nFind more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone");
        }
        return _dayjs.default.tz(value, this.cleanTimezone(timezone));
      };
      this.toJsDate = value => value.toDate();
      this.parse = (value, format) => "" === value ? null : this.dayjs(value, format, this.locale, !0);
      this.getCurrentLocaleCode = () => this.locale || "en";
      this.is12HourCycleInCurrentLocale = () => /A|a/.test(this.getLocaleFormats().LT || "");
      this.expandFormat = format => {
        const localeFormats = this.getLocaleFormats(), t = formatBis => formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1));
        return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_, a, b) => {
          _ = b && b.toUpperCase();
          return a || localeFormats[b] || t(localeFormats[_]);
        });
      };
      this.isValid = value => null == value ? !1 : value.isValid();
      this.format = (value, formatKey) => this.formatByString(value, this.formats[formatKey]);
      this.formatByString = (value, formatString) => this.dayjs(value).format(formatString);
      this.formatNumber = numberToFormat => numberToFormat;
      this.isEqual = (value, comparing) => null === value && null === comparing ? !0 : null === value || null === comparing ? !1 : value.toDate().getTime() === comparing.toDate().getTime();
      this.isSameYear = (value, comparing) => this.isSame(value, comparing, "YYYY");
      this.isSameMonth = (value, comparing) => this.isSame(value, comparing, "YYYY-MM");
      this.isSameDay = (value, comparing) => this.isSame(value, comparing, "YYYY-MM-DD");
      this.isSameHour = (value, comparing) => value.isSame(comparing, "hour");
      this.isAfter = (value, comparing) => value > comparing;
      this.isAfterYear = (value, comparing) => this.hasUTCPlugin() ? !this.isSameYear(value, comparing) && value.utc() > comparing.utc() : value.isAfter(comparing, "year");
      this.isAfterDay = (value, comparing) => this.hasUTCPlugin() ? !this.isSameDay(value, comparing) && value.utc() > comparing.utc() : value.isAfter(comparing, "day");
      this.isBefore = (value, comparing) => value < comparing;
      this.isBeforeYear = (value, comparing) => this.hasUTCPlugin() ? !this.isSameYear(value, comparing) && value.utc() < comparing.utc() : value.isBefore(comparing, "year");
      this.isBeforeDay = (value, comparing) => this.hasUTCPlugin() ? !this.isSameDay(value, comparing) && value.utc() < comparing.utc() : value.isBefore(comparing, "day");
      this.isWithinRange = (value, [start, end]) => value >= start && value <= end;
      this.startOfYear = value => this.adjustOffset(value.startOf("year"));
      this.startOfMonth = value => this.adjustOffset(value.startOf("month"));
      this.startOfWeek = value => this.adjustOffset(value.startOf("week"));
      this.startOfDay = value => this.adjustOffset(value.startOf("day"));
      this.endOfYear = value => this.adjustOffset(value.endOf("year"));
      this.endOfMonth = value => this.adjustOffset(value.endOf("month"));
      this.endOfWeek = value => this.adjustOffset(value.endOf("week"));
      this.endOfDay = value => this.adjustOffset(value.endOf("day"));
      this.addYears = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "year") : value.add(amount, "year"));
      this.addMonths = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "month") : value.add(amount, "month"));
      this.addWeeks = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "week") : value.add(amount, "week"));
      this.addDays = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "day") : value.add(amount, "day"));
      this.addHours = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "hour") : value.add(amount, "hour"));
      this.addMinutes = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "minute") : value.add(amount, "minute"));
      this.addSeconds = (value, amount) => this.adjustOffset(0 > amount ? value.subtract(Math.abs(amount), "second") : value.add(amount, "second"));
      this.getYear = value => value.year();
      this.getMonth = value => value.month();
      this.getDate = value => value.date();
      this.getHours = value => value.hour();
      this.getMinutes = value => value.minute();
      this.getSeconds = value => value.second();
      this.getMilliseconds = value => value.millisecond();
      this.setYear = (value, year) => this.adjustOffset(value.set("year", year));
      this.setMonth = (value, month) => this.adjustOffset(value.set("month", month));
      this.setDate = (value, date) => this.adjustOffset(value.set("date", date));
      this.setHours = (value, hours) => this.adjustOffset(value.set("hour", hours));
      this.setMinutes = (value, minutes) => this.adjustOffset(value.set("minute", minutes));
      this.setSeconds = (value, seconds) => this.adjustOffset(value.set("second", seconds));
      this.setMilliseconds = (value, milliseconds) => this.adjustOffset(value.set("millisecond", milliseconds));
      this.getDaysInMonth = value => value.daysInMonth();
      this.getWeekArray = value => {
        value = this.setLocaleToValue(value);
        var start = this.startOfWeek(this.startOfMonth(value));
        value = this.endOfWeek(this.endOfMonth(value));
        let count = 0;
        const nestedWeeks = [];
        for (; start < value;) {
          const weekNumber = Math.floor(count / 7);
          nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
          nestedWeeks[weekNumber].push(start);
          start = this.addDays(start, 1);
          count += 1;
        }
        return nestedWeeks;
      };
      this.getWeekNumber = value => value.week();
      this.getYearRange = ([start, end]) => {
        start = this.startOfYear(start);
        end = this.endOfYear(end);
        const years = [];
        for (; this.isBefore(start, end);) {
          years.push(start), start = this.addYears(start, 1);
        }
        return years;
      };
      this.dayjs = withLocale(_dayjs.default, _locale);
      this.locale = _locale;
      this.formats = (0,_extends2.default)({}, defaultFormats, formats);
      _dayjs.default.extend(_customParseFormat.default);
    }
    getDayOfWeek(value) {
      return value.day() + 1;
    }
  }
  exports.AdapterDayjs = AdapterDayjs;
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$AdapterDayjs$AdapterDayjs.js.map
