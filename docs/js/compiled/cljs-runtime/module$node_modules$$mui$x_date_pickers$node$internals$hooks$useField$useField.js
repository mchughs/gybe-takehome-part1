shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useField = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useField = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _useEnhancedEffect = global(require("module$node_modules$$mui$utils$node$useEnhancedEffect$index")), _useEventCallback = global(require("module$node_modules$$mui$utils$node$useEventCallback$index")), _styles = require("module$node_modules$$mui$material$node$styles$index"), _useValidation = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useValidation"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"), 
  _useField = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useField_utils"), _useFieldState = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useFieldState"), _useFieldCharacterEditing = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useFieldCharacterEditing"), _useFieldV7TextField = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useFieldV7TextField"), _useFieldV6TextField = 
  require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useFieldV6TextField");
  exports.useField = params => {
    const utils = (0,_useUtils.useUtils)(), {internalProps, internalProps:{unstableFieldRef, minutesStep, enableAccessibleFieldDOMStructure = !1, disabled = !1, readOnly = !1}, forwardedProps:{onKeyDown, error, clearable, onClear}, fieldValueManager, valueManager, validator} = params, isRTL = "rtl" === (0,_styles.useTheme)().direction;
    var stateResponse = (0,_useFieldState.useFieldState)(params);
    const {state, activeSectionIndex, parsedSelectedSections, setSelectedSections, clearValue, clearActiveSection, updateSectionValue, setTempAndroidValueStr, sectionsValueBoundaries, localizedDigits, timezone} = stateResponse;
    var characterEditingResponse = (0,_useFieldCharacterEditing.useFieldCharacterEditing)({sections:state.sections, updateSectionValue, sectionsValueBoundaries, localizedDigits, setTempAndroidValueStr, timezone});
    const {resetCharacterQuery} = characterEditingResponse, areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue), useFieldTextField = enableAccessibleFieldDOMStructure ? _useFieldV7TextField.useFieldV7TextField : _useFieldV6TextField.useFieldV6TextField, sectionOrder = React.useMemo(() => (0,_useField.getSectionOrder)(state.sections, isRTL && !enableAccessibleFieldDOMStructure), [state.sections, isRTL, enableAccessibleFieldDOMStructure]), {returnedValue, 
    interactions} = useFieldTextField((0,_extends2.default)({}, params, stateResponse, characterEditingResponse, {areAllSectionsEmpty, sectionOrder}));
    stateResponse = (0,_useEventCallback.default)(event => {
      onKeyDown?.(event);
      switch(!0) {
        case (event.ctrlKey || event.metaKey) && "a" === event.key.toLowerCase() && !event.shiftKey && !event.altKey:
          event.preventDefault();
          setSelectedSections("all");
          break;
        case "Enter" === event.key:
          event.preventDefault();
          break;
        case "ArrowRight" === event.key:
          event.preventDefault();
          if (null == parsedSelectedSections) {
            setSelectedSections(sectionOrder.startIndex);
          } else if ("all" === parsedSelectedSections) {
            setSelectedSections(sectionOrder.endIndex);
          } else {
            var nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].rightIndex;
            null !== nextSectionIndex && setSelectedSections(nextSectionIndex);
          }
          break;
        case "ArrowLeft" === event.key:
          event.preventDefault();
          null == parsedSelectedSections ? setSelectedSections(sectionOrder.endIndex) : "all" === parsedSelectedSections ? setSelectedSections(sectionOrder.startIndex) : (nextSectionIndex = sectionOrder.neighbors[parsedSelectedSections].leftIndex, null !== nextSectionIndex && setSelectedSections(nextSectionIndex));
          break;
        case "Delete" === event.key:
          event.preventDefault();
          if (readOnly) {
            break;
          }
          null == parsedSelectedSections || "all" === parsedSelectedSections ? clearValue() : clearActiveSection();
          resetCharacterQuery();
          break;
        case "ArrowUp ArrowDown Home End PageUp PageDown".split(" ").includes(event.key):
          if (event.preventDefault(), !readOnly && null != activeSectionIndex) {
            nextSectionIndex = state.sections[activeSectionIndex];
            var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, nextSectionIndex);
            event = (0,_useField.adjustSectionValue)(utils, timezone, nextSectionIndex, event.key, sectionsValueBoundaries, localizedDigits, activeDateManager.date, {minutesStep});
            updateSectionValue({activeSection:nextSectionIndex, newSectionValue:event, shouldGoToNextSection:!1});
          }
      }
    });
    (0,_useEnhancedEffect.default)(() => {
      interactions.syncSelectionToDOM();
    });
    const validationError = (0,_useValidation.useValidation)((0,_extends2.default)({}, internalProps, {value:state.value, timezone}), validator, valueManager.isSameError, valueManager.defaultErrorState), inputError = React.useMemo(() => void 0 !== error ? error : valueManager.hasError(validationError), [valueManager, validationError, error]);
    React.useEffect(() => {
      inputError || null != activeSectionIndex || resetCharacterQuery();
    }, [state.referenceValue, activeSectionIndex, inputError]);
    React.useEffect(() => {
      null != state.tempValueStrAndroid && null != activeSectionIndex && (resetCharacterQuery(), clearActiveSection());
    }, [state.sections]);
    React.useImperativeHandle(unstableFieldRef, () => ({getSections:() => state.sections, getActiveSectionIndex:interactions.getActiveSectionIndexFromDOM, setSelectedSections:interactions.setSelectedSections, focusField:interactions.focusField, isFieldFocused:interactions.isFieldFocused}));
    characterEditingResponse = (0,_useEventCallback.default)((event, ...args) => {
      event.preventDefault();
      onClear?.(event, ...args);
      clearValue();
      setSelectedSections(sectionOrder.startIndex);
      interactions.isFieldFocused || interactions.focusField(0);
    });
    return (0,_extends2.default)({}, params.forwardedProps, {onKeyDown:stateResponse, onClear:characterEditingResponse, error:inputError, clearable:!(!clearable || areAllSectionsEmpty || readOnly || disabled)}, {disabled, readOnly}, returnedValue);
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useField.js.map
