shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$useMobilePicker$useMobilePicker = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useMobilePicker = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$base$node$utils$index"), _useForkRef = global(require("module$node_modules$$mui$utils$node$useForkRef$index")), _useId = global(require("module$node_modules$$mui$utils$node$useId$index")), _PickersModalDialog = require("module$node_modules$$mui$x_date_pickers$node$internals$components$PickersModalDialog"), _usePicker = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$usePicker$index"), 
  _utils2 = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$utils"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"), _LocalizationProvider = require("module$node_modules$$mui$x_date_pickers$node$LocalizationProvider$index"), _PickersLayout = require("module$node_modules$$mui$x_date_pickers$node$PickersLayout$index"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = ["props", "getOpenDialogAriaText"];
  exports.useMobilePicker = _ref => {
    let {props, getOpenDialogAriaText} = _ref;
    var pickerParams = (0,_objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    const {slots, slotProps:innerSlotProps, className, sx, format, formatDensity, enableAccessibleFieldDOMStructure, selectedSections, onSelectedSectionsChange, timezone, name, label, inputRef, readOnly, disabled, localeText} = props, utils = (0,_useUtils.useUtils)();
    _ref = React.useRef(null);
    const labelId = (0,_useId.default)(), isToolbarHidden = innerSlotProps?.toolbar?.hidden ?? !1, {open, actions, layoutProps, renderCurrentView, fieldProps:pickerFieldProps} = (0,_usePicker.usePicker)((0,_extends2.default)({}, pickerParams, {props, fieldRef:_ref, autoFocusView:!0, additionalViewProps:{}, wrapperVariant:"mobile"})), Field = slots.field, fieldProps = (0,_utils.useSlotProps)({elementType:Field, externalSlotProps:innerSlotProps?.field, additionalProps:(0,_extends2.default)({}, pickerFieldProps, 
    isToolbarHidden && {id:labelId}, !(disabled || readOnly) && {onClick:actions.onOpen, onKeyDown:(0,_utils2.onSpaceOrEnter)(actions.onOpen)}, {readOnly:readOnly ?? !0, disabled, className, sx, format, formatDensity, enableAccessibleFieldDOMStructure, selectedSections, onSelectedSectionsChange, timezone, label, name}, inputRef ? {inputRef} : {}), ownerState:props});
    fieldProps.inputProps = (0,_extends2.default)({}, fieldProps.inputProps, {"aria-label":getOpenDialogAriaText(pickerFieldProps.value, utils)});
    const slotsForField = (0,_extends2.default)({textField:slots.textField}, fieldProps.slots), Layout = slots.layout ?? _PickersLayout.PickersLayout;
    pickerParams = labelId;
    isToolbarHidden && (pickerParams = label ? `${labelId}-label` : void 0);
    const slotProps = (0,_extends2.default)({}, innerSlotProps, {toolbar:(0,_extends2.default)({}, innerSlotProps?.toolbar, {titleId:labelId}), mobilePaper:(0,_extends2.default)({"aria-labelledby":pickerParams}, innerSlotProps?.mobilePaper)}), handleFieldRef = (0,_useForkRef.default)(_ref, fieldProps.unstableFieldRef);
    return {renderPicker:() => (0,_jsxRuntime.jsxs)(_LocalizationProvider.LocalizationProvider, {localeText, children:[(0,_jsxRuntime.jsx)(Field, (0,_extends2.default)({}, fieldProps, {slots:slotsForField, slotProps, unstableFieldRef:handleFieldRef})), (0,_jsxRuntime.jsx)(_PickersModalDialog.PickersModalDialog, (0,_extends2.default)({}, actions, {open, slots, slotProps, children:(0,_jsxRuntime.jsx)(Layout, (0,_extends2.default)({}, layoutProps, slotProps?.layout, {slots, slotProps, children:renderCurrentView()}))}))]})};
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$useMobilePicker$useMobilePicker.js.map
