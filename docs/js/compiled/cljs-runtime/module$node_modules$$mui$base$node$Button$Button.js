shadow$provide.module$node_modules$$mui$base$node$Button$Button = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.Button = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  global = global(require("module$node_modules$prop_types$index"));
  var _composeClasses = require("module$node_modules$$mui$base$node$composeClasses$index"), _buttonClasses = require("module$node_modules$$mui$base$node$Button$buttonClasses"), _useButton = require("module$node_modules$$mui$base$node$useButton$index"), _utils = require("module$node_modules$$mui$base$node$utils$index"), _ClassNameConfigurator = require("module$node_modules$$mui$base$node$utils$ClassNameConfigurator"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = "action children disabled focusableWhenDisabled onFocusVisible slotProps slots rootElementName".split(" "), useUtilityClasses = ownerState => {
    const {active, disabled, focusVisible} = ownerState;
    return (0,_composeClasses.unstable_composeClasses)({root:["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]}, (0,_ClassNameConfigurator.useClassNamesOverride)(_buttonClasses.getButtonUtilityClass));
  };
  (exports.Button = React.forwardRef(function(props, forwardedRef) {
    var _slots$root;
    const {action, children, focusableWhenDisabled = !1, slotProps = {}, slots = {}, rootElementName:rootElementNameProp = "button"} = props, other = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded), buttonRef = React.useRef();
    var rootElementName = rootElementNameProp;
    if ("string" === typeof slots.root) {
      rootElementName = slots.root;
    } else if (other.href || other.to) {
      rootElementName = "a";
    }
    const {active, focusVisible, setFocusVisible, getRootProps} = (0,_useButton.useButton)((0,_extends2.default)({}, props, {focusableWhenDisabled, rootElementName}));
    React.useImperativeHandle(action, () => ({focusVisible:() => {
      setFocusVisible(!0);
      buttonRef.current.focus();
    }}), [setFocusVisible]);
    rootElementName = (0,_extends2.default)({}, props, {active, focusableWhenDisabled, focusVisible});
    const classes = useUtilityClasses(rootElementName), defaultElement = other.href || other.to ? "a" : "button";
    props = null != (_slots$root = slots.root) ? _slots$root : defaultElement;
    forwardedRef = (0,_utils.useSlotProps)({elementType:props, getSlotProps:getRootProps, externalForwardedProps:other, externalSlotProps:slotProps.root, additionalProps:{ref:forwardedRef}, ownerState:rootElementName, className:classes.root});
    return (0,_jsxRuntime.jsx)(props, (0,_extends2.default)({}, forwardedRef, {children}));
  })).propTypes = {action:global.default.oneOfType([global.default.func, global.default.shape({current:global.default.shape({focusVisible:global.default.func.isRequired})})]), children:global.default.node, className:global.default.string, disabled:global.default.bool, focusableWhenDisabled:global.default.bool, href:global.default.string, onFocusVisible:global.default.func, rootElementName:global.default.string, slotProps:global.default.shape({root:global.default.oneOfType([global.default.func, global.default.object])}), 
  slots:global.default.shape({root:global.default.elementType}), to:global.default.string};
};

//# sourceMappingURL=module$node_modules$$mui$base$node$Button$Button.js.map
