shadow$provide.module$node_modules$$mui$base$node$useList$useList = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useList = function(params) {
    const {controlledProps = EMPTY_OBJECT, disabledItemsFocusable = !1, disableListWrap = !1, focusManagement = "activeDescendant", getInitialState = defaultGetInitialState, getItemDomElement, getItemId, isItemDisabled = defaultIsItemDisabled, rootRef:externalListRef, onStateChange = NOOP, items, itemComparer = defaultItemComparer, getItemAsString = defaultItemStringifier, onChange, onHighlightChange, onItemsChange, orientation = "vertical", pageSize = 5, reducerActionContext = EMPTY_OBJECT, selectionMode = 
    "single", stateReducer:externalReducer, componentName = "useList"} = params;
    if ("DOM" === focusManagement && null == getItemDomElement) {
      throw Error("useList: The `getItemDomElement` prop is required when using the `DOM` focus management.");
    }
    if ("activeDescendant" === focusManagement && null == getItemId) {
      throw Error("useList: The `getItemId` prop is required when using the `activeDescendant` focus management.");
    }
    const listRef = React.useRef(null), handleRef = (0,_utils.unstable_useForkRef)(externalListRef, listRef), handleHighlightChange = React.useCallback((event, value, reason) => {
      null == onHighlightChange || onHighlightChange(event, value, reason);
      if ("DOM" === focusManagement && null != value && (reason === _listActions.ListActionTypes.itemClick || reason === _listActions.ListActionTypes.keyDown || reason === _listActions.ListActionTypes.textNavigation)) {
        var _getItemDomElement;
        null == getItemDomElement || null == (_getItemDomElement = getItemDomElement(value)) || _getItemDomElement.focus();
      }
    }, [getItemDomElement, onHighlightChange, focusManagement]), stateComparers = React.useMemo(() => ({highlightedValue:itemComparer, selectedValues:(valuesArray1, valuesArray2) => (0,_areArraysEqual.areArraysEqual)(valuesArray1, valuesArray2, itemComparer)}), [itemComparer]);
    params = React.useCallback((event, field, value, reason, state) => {
      null == onStateChange || onStateChange(event, field, value, reason, state);
      switch(field) {
        case "highlightedValue":
          handleHighlightChange(event, value, reason);
          break;
        case "selectedValues":
          null == onChange || onChange(event, value, reason);
      }
    }, [handleHighlightChange, onChange, onStateChange]);
    const listActionContext = React.useMemo(() => ({disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, onHighlightChange:handleHighlightChange, orientation, pageSize, selectionMode, stateComparers}), [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]), initialState = getInitialState(), reducer = null != 
    externalReducer ? externalReducer : _listReducer.listReducer, actionContext = React.useMemo(() => (0,_extends2.default)({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]), [state, dispatch] = (0,_useControllableReducer.useControllableReducer)({reducer, actionContext, initialState, controlledProps, stateComparers, onStateChange:params, componentName}), {highlightedValue, selectedValues} = state, handleTextNavigation = (0,_useTextNavigation.useTextNavigation)((searchString, 
    event) => dispatch({type:_listActions.ListActionTypes.textNavigation, event, searchString})), previousItems = React.useRef([]);
    React.useEffect(() => {
      (0,_areArraysEqual.areArraysEqual)(previousItems.current, items, itemComparer) || (dispatch({type:_listActions.ListActionTypes.itemsChange, event:null, items, previousItems:previousItems.current}), previousItems.current = items, null == onItemsChange || onItemsChange(items));
    }, [items, itemComparer, dispatch, onItemsChange]);
    const createHandleKeyDown = externalHandlers => event => {
      var _externalHandlers$onK;
      null == (_externalHandlers$onK = externalHandlers.onKeyDown) || _externalHandlers$onK.call(externalHandlers, event);
      event.defaultMuiPrevented || (_externalHandlers$onK = ["Home", "End", "PageUp", "PageDown"], "vertical" === orientation ? _externalHandlers$onK.push("ArrowUp", "ArrowDown") : _externalHandlers$onK.push("ArrowLeft", "ArrowRight"), "activeDescendant" === focusManagement && _externalHandlers$onK.push(" ", "Enter"), _externalHandlers$onK.includes(event.key) && event.preventDefault(), dispatch({type:_listActions.ListActionTypes.keyDown, key:event.key, event}), handleTextNavigation(event));
    }, createHandleBlur = externalHandlers => event => {
      var _externalHandlers$onB, _listRef$current;
      null == (_externalHandlers$onB = externalHandlers.onBlur) || _externalHandlers$onB.call(externalHandlers, event);
      event.defaultMuiPrevented || null != (_listRef$current = listRef.current) && _listRef$current.contains(event.relatedTarget) || dispatch({type:_listActions.ListActionTypes.blur, event});
    }, getItemState = React.useCallback(item => {
      const selected = (null != selectedValues ? selectedValues : []).some(value => null != value && itemComparer(item, value)), highlighted = null != highlightedValue && itemComparer(item, highlightedValue);
      return {focusable:"DOM" === focusManagement, highlighted, selected};
    }, [itemComparer, selectedValues, highlightedValue, focusManagement]);
    params = React.useMemo(() => ({dispatch, getItemState}), [dispatch, getItemState]);
    React.useDebugValue({state});
    return {contextValue:params, dispatch, getRootProps:(externalProps = {}) => {
      const externalEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(externalProps);
      return (0,_extends2.default)({}, externalProps, {"aria-activedescendant":"activeDescendant" === focusManagement && null != highlightedValue ? getItemId(highlightedValue) : void 0, tabIndex:"DOM" === focusManagement ? -1 : 0, ref:handleRef}, externalEventHandlers, {onBlur:createHandleBlur(externalEventHandlers), onKeyDown:createHandleKeyDown(externalEventHandlers)});
    }, rootRef:handleRef, state};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _listActions = require("module$node_modules$$mui$base$node$useList$listActions_types"), _listReducer = require("module$node_modules$$mui$base$node$useList$listReducer"), _useControllableReducer = require("module$node_modules$$mui$base$node$utils$useControllableReducer"), _areArraysEqual = require("module$node_modules$$mui$base$node$utils$areArraysEqual"), _useTextNavigation = require("module$node_modules$$mui$base$node$utils$useTextNavigation"), 
  _extractEventHandlers = require("module$node_modules$$mui$base$node$utils$extractEventHandlers");
  const EMPTY_OBJECT = {}, NOOP = () => {
  }, defaultItemComparer = (optionA, optionB) => optionA === optionB, defaultIsItemDisabled = () => !1, defaultItemStringifier = item => "string" === typeof item ? item : String(item), defaultGetInitialState = () => ({highlightedValue:null, selectedValues:[]});
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useList$useList.js.map
