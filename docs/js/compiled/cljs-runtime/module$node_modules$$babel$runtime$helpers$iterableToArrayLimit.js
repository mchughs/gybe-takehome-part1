shadow$provide.module$node_modules$$babel$runtime$helpers$iterableToArrayLimit = function(global, require, module, exports) {
  module.exports = function(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e, i, u, a = [], f = !0, o = !1;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t) {
            return;
          }
          f = !1;
        } else {
          for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0) {
          }
        }
      } catch (r) {
        o = !0;
        var n = r;
      } finally {
        try {
          if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) {
            return;
          }
        } finally {
          if (o) {
            throw n;
          }
        }
      }
      return a;
    }
  };
  module.exports.__esModule = !0;
  module.exports["default"] = module.exports;
};

//# sourceMappingURL=module$node_modules$$babel$runtime$helpers$iterableToArrayLimit.js.map
