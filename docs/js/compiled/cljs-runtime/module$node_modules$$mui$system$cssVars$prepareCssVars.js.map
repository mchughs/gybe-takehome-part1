{
"version":3,
"file":"module$node_modules$$mui$system$cssVars$prepareCssVars.js",
"lineCount":36,
"mappings":"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",
"sources":["node_modules/@mui/system/cssVars/prepareCssVars.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$system$cssVars$prepareCssVars\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _toPropertyKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toPropertyKey\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _deepmerge = _interopRequireDefault(require(\"@mui/utils/deepmerge\"));\nvar _cssVarsParser = _interopRequireDefault(require(\"./cssVarsParser\"));\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = (0, _objectWithoutPropertiesLoose2.default)(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = (0, _cssVarsParser.default)(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = (0, _objectWithoutPropertiesLoose2.default)(colorSchemes, [defaultColorScheme].map(_toPropertyKey2.default));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(scheme, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = (0, _cssVarsParser.default)(light, parserConfig);\n    themeVars = (0, _deepmerge.default)(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = (0, _extends2.default)({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = (0, _extends2.default)({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nvar _default = exports.default = prepareCssVars;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","default","_extends2","_toPropertyKey2","_objectWithoutPropertiesLoose2","_deepmerge","_cssVarsParser","_excluded","prepareCssVars","theme","parserConfig","colorSchemes","defaultColorScheme","otherTheme","rootVars","rootCss","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","map","entries","forEach","key","scheme","vars","css","varsWithDefaults","generateCssVars","colorScheme","_parserConfig$getSele","selector","getSelector","call","_parserConfig$getSele2"]
}
