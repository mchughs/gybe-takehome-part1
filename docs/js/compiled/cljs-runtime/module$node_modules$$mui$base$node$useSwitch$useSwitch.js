shadow$provide.module$node_modules$$mui$base$node$useSwitch$useSwitch = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useSwitch = function(props) {
    const {checked:checkedProp, defaultChecked, disabled, onBlur, onChange, onFocus, onFocusVisible, readOnly, required} = props, [checked, setCheckedState] = (0,_utils.unstable_useControlled)({controlled:checkedProp, default:!!defaultChecked, name:"Switch", state:"checked"}), createHandleInputChange = otherProps => event => {
      var _otherProps$onChange;
      event.nativeEvent.defaultPrevented || (setCheckedState(event.target.checked), null == onChange || onChange(event), null == (_otherProps$onChange = otherProps.onChange) || _otherProps$onChange.call(otherProps, event));
    }, {isFocusVisibleRef, onBlur:handleBlurVisible, onFocus:handleFocusVisible, ref:focusVisibleRef} = (0,_utils.unstable_useIsFocusVisible)(), [focusVisible, setFocusVisible] = React.useState(!1);
    disabled && focusVisible && setFocusVisible(!1);
    React.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const inputRef = React.useRef(null), createHandleFocus = otherProps => event => {
      var _otherProps$onFocus;
      inputRef.current || (inputRef.current = event.currentTarget);
      handleFocusVisible(event);
      !0 === isFocusVisibleRef.current && (setFocusVisible(!0), null == onFocusVisible || onFocusVisible(event));
      null == onFocus || onFocus(event);
      null == (_otherProps$onFocus = otherProps.onFocus) || _otherProps$onFocus.call(otherProps, event);
    }, createHandleBlur = otherProps => event => {
      var _otherProps$onBlur;
      handleBlurVisible(event);
      !1 === isFocusVisibleRef.current && setFocusVisible(!1);
      null == onBlur || onBlur(event);
      null == (_otherProps$onBlur = otherProps.onBlur) || _otherProps$onBlur.call(otherProps, event);
    }, handleInputRef = (0,_utils.unstable_useForkRef)(focusVisibleRef, inputRef);
    return {checked, disabled:!!disabled, focusVisible, getInputProps:(otherProps = {}) => (0,_extends2.default)({checked:checkedProp, defaultChecked, disabled, readOnly, ref:handleInputRef, required, type:"checkbox", role:"switch", "aria-checked":checkedProp}, otherProps, {onChange:createHandleInputChange(otherProps), onFocus:createHandleFocus(otherProps), onBlur:createHandleBlur(otherProps)}), inputRef:handleInputRef, readOnly:!!readOnly};
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index");
};

//# sourceMappingURL=module$node_modules$$mui$base$node$useSwitch$useSwitch.js.map
