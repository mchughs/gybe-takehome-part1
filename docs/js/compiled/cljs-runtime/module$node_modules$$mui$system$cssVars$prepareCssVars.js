shadow$provide.module$node_modules$$mui$system$cssVars$prepareCssVars = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _toPropertyKey2 = global(require("module$node_modules$$babel$runtime$helpers$toPropertyKey")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), _deepmerge = global(require("module$node_modules$$mui$utils$node$deepmerge$index")), _cssVarsParser = global(require("module$node_modules$$mui$system$cssVars$cssVarsParser"));
  const _excluded = ["colorSchemes", "components", "defaultColorScheme"];
  exports.default = function(theme, parserConfig) {
    const {colorSchemes = {}, defaultColorScheme = "light"} = theme;
    theme = (0,_objectWithoutPropertiesLoose2.default)(theme, _excluded);
    const {vars:rootVars, css:rootCss, varsWithDefaults:rootVarsWithDefaults} = (0,_cssVarsParser.default)(theme, parserConfig);
    let themeVars = rootVarsWithDefaults;
    const colorSchemesMap = {};
    ({[defaultColorScheme]:theme} = colorSchemes);
    const otherColorSchemes = (0,_objectWithoutPropertiesLoose2.default)(colorSchemes, [defaultColorScheme].map(_toPropertyKey2.default));
    Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
      const {vars, css, varsWithDefaults} = (0,_cssVarsParser.default)(scheme, parserConfig);
      themeVars = (0,_deepmerge.default)(themeVars, varsWithDefaults);
      colorSchemesMap[key] = {css, vars};
    });
    if (theme) {
      const {css, vars, varsWithDefaults} = (0,_cssVarsParser.default)(theme, parserConfig);
      themeVars = (0,_deepmerge.default)(themeVars, varsWithDefaults);
      colorSchemesMap[defaultColorScheme] = {css, vars};
    }
    return {vars:themeVars, generateCssVars:colorScheme => {
      if (!colorScheme) {
        var _parserConfig$getSele;
        var _parserConfig$getSele2 = (0,_extends2.default)({}, rootCss);
        return {css:_parserConfig$getSele2, vars:rootVars, selector:(null == parserConfig || null == (_parserConfig$getSele = parserConfig.getSelector) ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, _parserConfig$getSele2)) || ":root"};
      }
      _parserConfig$getSele = (0,_extends2.default)({}, colorSchemesMap[colorScheme].css);
      return {css:_parserConfig$getSele, vars:colorSchemesMap[colorScheme].vars, selector:(null == parserConfig || null == (_parserConfig$getSele2 = parserConfig.getSelector) ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, _parserConfig$getSele)) || ":root"};
    }};
  };
};

//# sourceMappingURL=module$node_modules$$mui$system$cssVars$prepareCssVars.js.map
