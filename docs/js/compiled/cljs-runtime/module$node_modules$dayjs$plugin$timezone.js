shadow$provide.module$node_modules$dayjs$plugin$timezone = function(global, require, module, exports) {
  !function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs_plugin_timezone = e();
  }(this, function() {
    var t = {year:0, month:1, day:2, hour:3, minute:4, second:5}, e = {};
    return function(n, i, o) {
      var r, a = function(t, n, i) {
        void 0 === i && (i = {});
        t = new Date(t);
        void 0 === i && (i = {});
        i = i.timeZoneName || "short";
        var o = n + "|" + i, r = e[o];
        return (r || (r = new Intl.DateTimeFormat("en-US", {hour12:!1, timeZone:n, year:"numeric", month:"2-digit", day:"2-digit", hour:"2-digit", minute:"2-digit", second:"2-digit", timeZoneName:i}), e[o] = r), r).formatToParts(t);
      }, u = function(e, n) {
        var i = a(e, n);
        n = [];
        for (var u = 0; u < i.length; u += 1) {
          var f = i[u], m = f.value;
          f = t[f.type];
          0 <= f && (n[f] = parseInt(m, 10));
        }
        i = n[3];
        e = +e;
        return (o.utc(n[0] + "-" + n[1] + "-" + n[2] + " " + (24 === i ? 0 : i) + ":" + n[4] + ":" + n[5] + ":000").valueOf() - (e - e % 1e3)) / 6e4;
      };
      n = i.prototype;
      n.tz = function(t, e) {
        void 0 === t && (t = r);
        var n = this.utcOffset(), i = this.toDate(), a = i.toLocaleString("en-US", {timeZone:t}), u = Math.round((i - new Date(a)) / 1e3 / 60);
        i = o(a, {locale:this.$L}).$set("millisecond", this.$ms).utcOffset(15 * -Math.round(i.getTimezoneOffset() / 15) - u, !0);
        e && (e = i.utcOffset(), i = i.add(n - e, "minute"));
        return i.$x.$timezone = t, i;
      };
      n.offsetName = function(t) {
        var e = this.$x.$timezone || o.tz.guess();
        return (t = a(this.valueOf(), e, {timeZoneName:t}).find(function(t) {
          return "timezonename" === t.type.toLowerCase();
        })) && t.value;
      };
      var s = n.startOf;
      n.startOf = function(t, e) {
        if (!this.$x || !this.$x.$timezone) {
          return s.call(this, t, e);
        }
        var n = o(this.format("YYYY-MM-DD HH:mm:ss:SSS"), {locale:this.$L});
        return s.call(n, t, e).tz(this.$x.$timezone, !0);
      };
      o.tz = function(t, e, n) {
        var i = n && e;
        e = n || e || r;
        n = u(+o(), e);
        if ("string" != typeof t) {
          return o(t).tz(e);
        }
        t = o.utc(t, i).valueOf();
        i = t - 6E4 * n;
        var o$jscomp$0 = u(i, e);
        n === o$jscomp$0 ? n = [i, n] : (n = u(i -= 6E4 * (o$jscomp$0 - n), e), n = o$jscomp$0 === n ? [i, o$jscomp$0] : [t - 6E4 * Math.min(o$jscomp$0, n), Math.max(o$jscomp$0, n)]);
        t = n[1];
        n = o(n[0]).utcOffset(t);
        return n.$x.$timezone = e, n;
      };
      o.tz.guess = function() {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      };
      o.tz.setDefault = function(t) {
        r = t;
      };
    };
  });
};

//# sourceMappingURL=module$node_modules$dayjs$plugin$timezone.js.map
