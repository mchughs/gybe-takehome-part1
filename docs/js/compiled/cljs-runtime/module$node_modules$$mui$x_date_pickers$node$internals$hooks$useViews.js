shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$useViews = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useViews = function({onChange, onViewChange, openTo, view:inView, views, autoFocus, focusedView:inFocusedView, onFocusedViewChange}) {
    warnedOnceNotValidView || (null == inView || views.includes(inView) || (console.warn(`MUI X: \`view="${inView}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`), warnedOnceNotValidView = !0), null != inView || null == openTo || views.includes(openTo) || (console.warn(`MUI X: \`openTo="${openTo}"\` is not a valid prop.`, `It must be an element of \`views=["${views.join('", "')}"]\`.`), warnedOnceNotValidView = !0));
    const previousOpenTo = React.useRef(openTo), previousViews = React.useRef(views), defaultView = React.useRef(views.includes(openTo) ? openTo : views[0]), [view, setView] = (0,_utils.unstable_useControlled)({name:"useViews", state:"view", controlled:inView, default:defaultView.current});
    inView = React.useRef(autoFocus ? view : null);
    const [focusedView, setFocusedView] = (0,_utils.unstable_useControlled)({name:"useViews", state:"focusedView", controlled:inFocusedView, default:inView.current});
    React.useEffect(() => {
      if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {
        setView(views.includes(openTo) ? openTo : views[0]), previousViews.current = views, previousOpenTo.current = openTo;
      }
    }, [openTo, setView, view, views]);
    inView = views.indexOf(view);
    inFocusedView = views[inView - 1] ?? null;
    const nextView = views[inView + 1] ?? null, handleFocusedViewChange = (0,_useEventCallback.default)((viewToFocus, hasFocus) => {
      hasFocus ? setFocusedView(viewToFocus) : setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView);
      onFocusedViewChange?.(viewToFocus, hasFocus);
    }), handleChangeView = (0,_useEventCallback.default)(newView => {
      handleFocusedViewChange(newView, !0);
      newView !== view && (setView(newView), onViewChange && onViewChange(newView));
    }), goToNextView = (0,_useEventCallback.default)(() => {
      nextView && handleChangeView(nextView);
    });
    inView = (0,_useEventCallback.default)((value, currentViewSelectionState, selectedView) => {
      const isSelectionFinishedOnCurrentView = "finish" === currentViewSelectionState, hasMoreViews = selectedView ? views.indexOf(selectedView) < views.length - 1 : !!nextView;
      onChange(value, isSelectionFinishedOnCurrentView && hasMoreViews ? "partial" : currentViewSelectionState, selectedView);
      selectedView && selectedView !== view ? (value = views[views.indexOf(selectedView) + 1]) && handleChangeView(value) : isSelectionFinishedOnCurrentView && goToNextView();
    });
    return {view, setView:handleChangeView, focusedView, setFocusedView:handleFocusedViewChange, nextView, previousView:inFocusedView, defaultView:views.includes(openTo) ? openTo : views[0], goToNextView, setValueAndGoToNextView:inView};
  };
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _useEventCallback = global(require("module$node_modules$$mui$utils$node$useEventCallback$index")), _utils = require("module$node_modules$$mui$utils$node$index");
  let warnedOnceNotValidView = !1;
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$useViews.js.map
