shadow$provide.module$node_modules$$mui$x_date_pickers$node$TimeClock$TimeClock = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.TimeClock = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _clsx = global(require("module$node_modules$clsx$dist$clsx"));
  global = global(require("module$node_modules$prop_types$index"));
  var _styles = require("module$node_modules$$mui$material$node$styles$index"), _utils = require("module$node_modules$$mui$utils$node$index"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils");
  module = require("module$node_modules$$mui$x_date_pickers$node$internals$components$PickersArrowSwitcher$index");
  var _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils"), _useViews = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useViews"), _dateHelpersHooks = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$date_helpers_hooks"), _PickerViewRoot = require("module$node_modules$$mui$x_date_pickers$node$internals$components$PickerViewRoot$index"), _timeClockClasses = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$timeClockClasses"), 
  _Clock = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$Clock"), _ClockNumbers = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$ClockNumbers"), _useValueWithTimezone = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useValueWithTimezone"), _valueManagers = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$valueManagers"), _useClockReferenceDate = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useClockReferenceDate"), 
  _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = "ampm ampmInClock autoFocus slots slotProps value defaultValue referenceDate disableIgnoringDatePartForTimeValidation maxTime minTime disableFuture disablePast minutesStep shouldDisableTime showViewSwitcher onChange view views openTo onViewChange focusedView onFocusedViewChange className disabled readOnly timezone".split(" "), useUtilityClasses = ownerState => {
    ({classes:ownerState} = ownerState);
    return (0,_utils.unstable_composeClasses)({root:["root"], arrowSwitcher:["arrowSwitcher"]}, _timeClockClasses.getTimeClockUtilityClass, ownerState);
  }, TimeClockRoot = (0,_styles.styled)(_PickerViewRoot.PickerViewRoot, {name:"MuiTimeClock", slot:"Root", overridesResolver:(props, styles) => styles.root})({display:"flex", flexDirection:"column", position:"relative"}), TimeClockArrowSwitcher = (0,_styles.styled)(module.PickersArrowSwitcher, {name:"MuiTimeClock", slot:"ArrowSwitcher", overridesResolver:(props, styles) => styles.arrowSwitcher})({position:"absolute", right:12, top:15}), TIME_CLOCK_DEFAULT_VIEWS = ["hours", "minutes"];
  (exports.TimeClock = React.forwardRef(function(inProps, ref) {
    const utils = (0,_useUtils.useUtils)();
    inProps = (0,_styles.useThemeProps)({props:inProps, name:"MuiTimeClock"});
    const {ampm = utils.is12HourCycleInCurrentLocale(), ampmInClock = !1, autoFocus, slots, slotProps, value:valueProp, defaultValue, referenceDate:referenceDateProp, disableIgnoringDatePartForTimeValidation = !1, maxTime, minTime, disableFuture, disablePast, minutesStep = 1, shouldDisableTime, showViewSwitcher, onChange, view:inView, views = TIME_CLOCK_DEFAULT_VIEWS, openTo, onViewChange, focusedView, onFocusedViewChange, className, disabled, readOnly, timezone:timezoneProp} = inProps, other = (0,_objectWithoutPropertiesLoose2.default)(inProps, 
    _excluded), {value, handleValueChange, timezone} = (0,_useValueWithTimezone.useControlledValueWithTimezone)({name:"TimeClock", timezone:timezoneProp, value:valueProp, defaultValue, onChange, valueManager:_valueManagers.singleItemValueManager}), valueOrReferenceDate = (0,_useClockReferenceDate.useClockReferenceDate)({value, referenceDate:referenceDateProp, utils, props:inProps, timezone}), localeText = (0,_useUtils.useLocaleText)(), now = (0,_useUtils.useNow)(timezone), {view, setView, previousView, 
    nextView, setValueAndGoToNextView} = (0,_useViews.useViews)({view:inView, views, openTo, onViewChange, onChange:handleValueChange, focusedView, onFocusedViewChange}), {meridiemMode, handleMeridiemChange} = (0,_dateHelpersHooks.useMeridiemMode)(valueOrReferenceDate, ampm, setValueAndGoToNextView), isTimeDisabled = React.useCallback((rawValue, viewType) => {
      const isAfter = (0,_timeUtils.createIsAfterIgnoreDatePart)(disableIgnoringDatePartForTimeValidation, utils), shouldCheckPastEnd = "hours" === viewType || "minutes" === viewType && views.includes("seconds"), containsValidTime = ({start, end}) => minTime && isAfter(minTime, end) || maxTime && isAfter(start, maxTime) || disableFuture && isAfter(start, now) || disablePast && isAfter(now, shouldCheckPastEnd ? end : start) ? !1 : !0, isValidValue = (timeValue, step = 1) => {
        if (0 !== timeValue % step) {
          return !1;
        }
        if (shouldDisableTime) {
          switch(viewType) {
            case "hours":
              return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), "hours");
            case "minutes":
              return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), "minutes");
            case "seconds":
              return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), "seconds");
            default:
              return !1;
          }
        }
        return !0;
      };
      switch(viewType) {
        case "hours":
          rawValue = (0,_timeUtils.convertValueToMeridiem)(rawValue, meridiemMode, ampm);
          var dateWithNewHours = utils.setHours(valueOrReferenceDate, rawValue), start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
          dateWithNewHours = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
          return !containsValidTime({start, end:dateWithNewHours}) || !isValidValue(rawValue);
        case "minutes":
          return dateWithNewHours = utils.setMinutes(valueOrReferenceDate, rawValue), start = utils.setSeconds(dateWithNewHours, 0), dateWithNewHours = utils.setSeconds(dateWithNewHours, 59), !containsValidTime({start, end:dateWithNewHours}) || !isValidValue(rawValue, minutesStep);
        case "seconds":
          return start = utils.setSeconds(valueOrReferenceDate, rawValue), !containsValidTime({start, end:start}) || !isValidValue(rawValue);
        default:
          throw Error("not supported");
      }
    }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableTime, utils, disableFuture, disablePast, now, views]), selectedId = (0,_utils.unstable_useId)(), viewProps = React.useMemo(() => {
      switch(view) {
        case "hours":
          var handleHoursChange = (hourValue, isFinish) => {
            hourValue = (0,_timeUtils.convertValueToMeridiem)(hourValue, meridiemMode, ampm);
            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, hourValue), isFinish, "hours");
          };
          return {onChange:handleHoursChange, viewValue:utils.getHours(valueOrReferenceDate), children:(0,_ClockNumbers.getHourNumbers)({value, utils, ampm, onChange:handleHoursChange, getClockNumberText:localeText.hoursClockNumberText, isDisabled:hourValue => disabled || isTimeDisabled(hourValue, "hours"), selectedId})};
        case "minutes":
          handleHoursChange = utils.getMinutes(valueOrReferenceDate);
          var handleMinutesChange = (minuteValue, isFinish) => {
            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish, "minutes");
          };
          return {viewValue:handleHoursChange, onChange:handleMinutesChange, children:(0,_ClockNumbers.getMinutesNumbers)({utils, value:handleHoursChange, onChange:handleMinutesChange, getClockNumberText:localeText.minutesClockNumberText, isDisabled:minuteValue => disabled || isTimeDisabled(minuteValue, "minutes"), selectedId})};
        case "seconds":
          return handleHoursChange = utils.getSeconds(valueOrReferenceDate), handleMinutesChange = (secondValue, isFinish) => {
            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish, "seconds");
          }, {viewValue:handleHoursChange, onChange:handleMinutesChange, children:(0,_ClockNumbers.getMinutesNumbers)({utils, value:handleHoursChange, onChange:handleMinutesChange, getClockNumberText:localeText.secondsClockNumberText, isDisabled:secondValue => disabled || isTimeDisabled(secondValue, "seconds"), selectedId})};
        default:
          throw Error("You must provide the type for ClockView");
      }
    }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]), classes = useUtilityClasses(inProps);
    return (0,_jsxRuntime.jsxs)(TimeClockRoot, (0,_extends2.default)({ref, className:(0,_clsx.default)(classes.root, className), ownerState:inProps}, other, {children:[(0,_jsxRuntime.jsx)(_Clock.Clock, (0,_extends2.default)({autoFocus:autoFocus ?? !!focusedView, ampmInClock:ampmInClock && views.includes("hours"), value, type:view, ampm, minutesStep, isTimeDisabled, meridiemMode, handleMeridiemChange, selectedId, disabled, readOnly}, viewProps)), showViewSwitcher && (0,_jsxRuntime.jsx)(TimeClockArrowSwitcher, 
    {className:classes.arrowSwitcher, slots, slotProps, onGoToPrevious:() => setView(previousView), isPreviousDisabled:!previousView, previousLabel:localeText.openPreviousView, onGoToNext:() => setView(nextView), isNextDisabled:!nextView, nextLabel:localeText.openNextView, ownerState:inProps})]}));
  })).propTypes = {ampm:global.default.bool, ampmInClock:global.default.bool, autoFocus:global.default.bool, classes:global.default.object, className:global.default.string, defaultValue:global.default.object, disabled:global.default.bool, disableFuture:global.default.bool, disableIgnoringDatePartForTimeValidation:global.default.bool, disablePast:global.default.bool, focusedView:global.default.oneOf(["hours", "minutes", "seconds"]), maxTime:global.default.object, minTime:global.default.object, minutesStep:global.default.number, 
  onChange:global.default.func, onFocusedViewChange:global.default.func, onViewChange:global.default.func, openTo:global.default.oneOf(["hours", "minutes", "seconds"]), readOnly:global.default.bool, referenceDate:global.default.object, shouldDisableTime:global.default.func, showViewSwitcher:global.default.bool, slotProps:global.default.object, slots:global.default.object, sx:global.default.oneOfType([global.default.arrayOf(global.default.oneOfType([global.default.func, global.default.object, global.default.bool])), 
  global.default.func, global.default.object]), timezone:global.default.string, value:global.default.object, view:global.default.oneOf(["hours", "minutes", "seconds"]), views:global.default.arrayOf(global.default.oneOf(["hours", "minutes", "seconds"]).isRequired)};
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$TimeClock$TimeClock.js.map
