shadow$provide.module$node_modules$$floating_ui$react_dom$dist$floating_ui_react_dom_umd = function(global, require, module, exports) {
  (function(global, factory) {
    "object" === typeof exports && "undefined" !== typeof module ? factory(exports, require("module$node_modules$$floating_ui$dom$dist$floating_ui_dom_umd"), require("module$node_modules$react$index"), require("module$node_modules$react_dom$index")) : "function" === typeof define && define.amd ? define(["exports", "@floating-ui/dom", "react", "react-dom"], factory) : (global = "undefined" !== typeof globalThis ? globalThis : global || self, factory(global.FloatingUIReactDOM = {}, global.FloatingUIDOM, 
    global.React, global.ReactDOM));
  })(this, function(exports, dom, React, ReactDOM) {
    function _interopNamespaceDefault(e) {
      var n = Object.create(null);
      e && Object.keys(e).forEach(function(k) {
        if ("default" !== k) {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {enumerable:!0, get:function() {
            return e[k];
          }});
        }
      });
      n.default = e;
      return Object.freeze(n);
    }
    function deepEqual(a, b) {
      if (a === b) {
        return !0;
      }
      if (typeof a !== typeof b) {
        return !1;
      }
      if ("function" === typeof a && a.toString() === b.toString()) {
        return !0;
      }
      let i, keys;
      if (a && b && "object" === typeof a) {
        if (Array.isArray(a)) {
          var length = a.length;
          if (length !== b.length) {
            return !1;
          }
          for (i = length; 0 !== i--;) {
            if (!deepEqual(a[i], b[i])) {
              return !1;
            }
          }
          return !0;
        }
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length) {
          return !1;
        }
        for (i = length; 0 !== i--;) {
          if (!{}.hasOwnProperty.call(b, keys[i])) {
            return !1;
          }
        }
        for (i = length; 0 !== i--;) {
          if (length = keys[i], !("_owner" === length && a.$$typeof || deepEqual(a[length], b[length]))) {
            return !1;
          }
        }
        return !0;
      }
      return a !== a && b !== b;
    }
    function getDPR(element) {
      return "undefined" === typeof window ? 1 : (element.ownerDocument.defaultView || window).devicePixelRatio || 1;
    }
    function roundByDPR(element, value) {
      element = getDPR(element);
      return Math.round(value * element) / element;
    }
    function useLatestRef(value) {
      const ref = React__namespace.useRef(value);
      index(() => {
        ref.current = value;
      });
      return ref;
    }
    var React__namespace = _interopNamespaceDefault(React), ReactDOM__namespace = _interopNamespaceDefault(ReactDOM), index = "undefined" !== typeof document ? React.useLayoutEffect : React.useEffect;
    Object.defineProperty(exports, "autoPlacement", {enumerable:!0, get:function() {
      return dom.autoPlacement;
    }});
    Object.defineProperty(exports, "autoUpdate", {enumerable:!0, get:function() {
      return dom.autoUpdate;
    }});
    Object.defineProperty(exports, "computePosition", {enumerable:!0, get:function() {
      return dom.computePosition;
    }});
    Object.defineProperty(exports, "detectOverflow", {enumerable:!0, get:function() {
      return dom.detectOverflow;
    }});
    Object.defineProperty(exports, "flip", {enumerable:!0, get:function() {
      return dom.flip;
    }});
    Object.defineProperty(exports, "getOverflowAncestors", {enumerable:!0, get:function() {
      return dom.getOverflowAncestors;
    }});
    Object.defineProperty(exports, "hide", {enumerable:!0, get:function() {
      return dom.hide;
    }});
    Object.defineProperty(exports, "inline", {enumerable:!0, get:function() {
      return dom.inline;
    }});
    Object.defineProperty(exports, "limitShift", {enumerable:!0, get:function() {
      return dom.limitShift;
    }});
    Object.defineProperty(exports, "offset", {enumerable:!0, get:function() {
      return dom.offset;
    }});
    Object.defineProperty(exports, "platform", {enumerable:!0, get:function() {
      return dom.platform;
    }});
    Object.defineProperty(exports, "shift", {enumerable:!0, get:function() {
      return dom.shift;
    }});
    Object.defineProperty(exports, "size", {enumerable:!0, get:function() {
      return dom.size;
    }});
    exports.arrow = options => ({name:"arrow", options, fn(state) {
      const {element, padding} = "function" === typeof options ? options(state) : options;
      return element && {}.hasOwnProperty.call(element, "current") ? null != element.current ? dom.arrow({element:element.current, padding}).fn(state) : {} : element ? dom.arrow({element, padding}).fn(state) : {};
    }});
    exports.useFloating = function(options) {
      void 0 === options && (options = {});
      const {placement = "bottom", strategy = "absolute", middleware = [], platform, elements:{reference:externalReference, floating:externalFloating} = {}, transform = !0, whileElementsMounted, open} = options, [data, setData] = React__namespace.useState({x:0, y:0, strategy, placement, middlewareData:{}, isPositioned:!1}), [latestMiddleware, setLatestMiddleware] = React__namespace.useState(middleware);
      deepEqual(latestMiddleware, middleware) || setLatestMiddleware(middleware);
      const [_reference, _setReference] = React__namespace.useState(null), [_floating, _setFloating] = React__namespace.useState(null), setReference = React__namespace.useCallback(node => {
        node !== referenceRef.current && (referenceRef.current = node, _setReference(node));
      }, []), setFloating = React__namespace.useCallback(node => {
        node !== floatingRef.current && (floatingRef.current = node, _setFloating(node));
      }, []), referenceEl = externalReference || _reference, floatingEl = externalFloating || _floating, referenceRef = React__namespace.useRef(null), floatingRef = React__namespace.useRef(null), dataRef = React__namespace.useRef(data);
      options = null != whileElementsMounted;
      const whileElementsMountedRef = useLatestRef(whileElementsMounted), platformRef = useLatestRef(platform), update = React__namespace.useCallback(() => {
        if (referenceRef.current && floatingRef.current) {
          var config = {placement, strategy, middleware:latestMiddleware};
          platformRef.current && (config.platform = platformRef.current);
          dom.computePosition(referenceRef.current, floatingRef.current, config).then(data => {
            const fullData = {...data, isPositioned:!0};
            isMountedRef.current && !deepEqual(dataRef.current, fullData) && (dataRef.current = fullData, ReactDOM__namespace.flushSync(() => {
              setData(fullData);
            }));
          });
        }
      }, [latestMiddleware, placement, strategy, platformRef]);
      index(() => {
        !1 === open && dataRef.current.isPositioned && (dataRef.current.isPositioned = !1, setData(data => ({...data, isPositioned:!1})));
      }, [open]);
      const isMountedRef = React__namespace.useRef(!1);
      index(() => {
        isMountedRef.current = !0;
        return () => {
          isMountedRef.current = !1;
        };
      }, []);
      index(() => {
        referenceEl && (referenceRef.current = referenceEl);
        floatingEl && (floatingRef.current = floatingEl);
        if (referenceEl && floatingEl) {
          if (whileElementsMountedRef.current) {
            return whileElementsMountedRef.current(referenceEl, floatingEl, update);
          }
          update();
        }
      }, [referenceEl, floatingEl, update, whileElementsMountedRef, options]);
      const refs = React__namespace.useMemo(() => ({reference:referenceRef, floating:floatingRef, setReference, setFloating}), [setReference, setFloating]), elements = React__namespace.useMemo(() => ({reference:referenceEl, floating:floatingEl}), [referenceEl, floatingEl]), floatingStyles = React__namespace.useMemo(() => {
        const initialStyles = {position:strategy, left:0, top:0};
        if (!elements.floating) {
          return initialStyles;
        }
        const x = roundByDPR(elements.floating, data.x), y = roundByDPR(elements.floating, data.y);
        return transform ? {...initialStyles, transform:"translate(" + x + "px, " + y + "px)", ...(1.5 <= getDPR(elements.floating) && {willChange:"transform"})} : {position:strategy, left:x, top:y};
      }, [strategy, transform, elements.floating, data.x, data.y]);
      return React__namespace.useMemo(() => ({...data, update, refs, elements, floatingStyles}), [data, update, refs, elements, floatingStyles]);
    };
  });
};

//# sourceMappingURL=module$node_modules$$floating_ui$react_dom$dist$floating_ui_react_dom_umd.js.map
