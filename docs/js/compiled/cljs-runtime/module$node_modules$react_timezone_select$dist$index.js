shadow$provide.module$node_modules$react_timezone_select$dist$index = function(global, require, module, exports) {
  function useTimezoneSelect({timezones = timezone_list_default, labelStyle = "original", displayValue = "GMT", currentDatetime}) {
    const options = (0,require$react.useMemo)(() => Object.entries(timezones).map(zone => {
      var _a, _b, _c, _d;
      try {
        const now = (currentDatetime ? (0,default$$require$spacetime.default)(currentDatetime) : default$$require$spacetime.default.now()).goto(zone[0]), isDstString = now.isDST() ? "daylight" : "standard", tz = now.timezone(), tzStrings = (0,default$$require$timezone_soft.default)(zone[0]), abbr = null == (_b = null == (_a = null == tzStrings ? void 0 : tzStrings[0]) ? void 0 : _a[isDstString]) ? void 0 : _b.abbr, altName = null == (_d = null == (_c = null == tzStrings ? void 0 : tzStrings[0]) ? 
        void 0 : _c[isDstString]) ? void 0 : _d.name, min = 60 * tz.current.offset, hr = `${min / 60 ^ 0}:${0 === min % 60 ? "00" : Math.abs(min % 60)}`, prefix = `(${displayValue}${hr.includes("-") ? hr : `+${hr}`}) ${zone[1]}`;
        zone = "";
        switch(labelStyle) {
          case "original":
            zone = prefix;
            break;
          case "altName":
            zone = `${prefix} ${altName ? `(${altName})` : ""}`;
            break;
          case "abbrev":
            zone = `${prefix} (${abbr})`;
            break;
          case "offsetHidden":
            zone = `${prefix.replace(/^\(.*?\)\s*/, "")}`;
            break;
          default:
            zone = `${prefix}`;
        }
        return {value:tz.name, label:zone, offset:tz.current.offset, abbrev:abbr, altName};
      } catch (e) {
        return null;
      }
    }).filter(Boolean).sort((a, b) => a.offset - b.offset), [labelStyle, timezones]), findFuzzyTz = zone => {
      let currentTime;
      try {
        currentTime = (currentDatetime ? (0,default$$require$spacetime.default)(currentDatetime) : default$$require$spacetime.default.now()).goto(zone);
      } catch (err) {
        currentTime = (currentDatetime ? (0,default$$require$spacetime.default)(currentDatetime) : default$$require$spacetime.default.now()).goto("GMT");
      }
      return options.filter(tz => tz.offset === currentTime.timezone().current.offset).map(tz => {
        let score = 0;
        currentTime.timezones[tz.value.toLowerCase()] && !!currentTime.timezones[tz.value.toLowerCase()].dst === currentTime.timezone().hasDst ? (-1 !== tz.value.toLowerCase().indexOf(currentTime.tz.substring(currentTime.tz.indexOf("/") + 1)) && (score += 8), -1 !== tz.label.toLowerCase().indexOf(currentTime.tz.substring(currentTime.tz.indexOf("/") + 1)) && (score += 4), -1 !== tz.value.toLowerCase().indexOf(currentTime.tz.substring(0, currentTime.tz.indexOf("/"))) && (score += 2), score += 1) : 
        "GMT" === tz.value && (score += 1);
        return {tz, score};
      }).sort((a, b) => b.score - a.score)[0].tz;
    };
    return {options, parseTimezone:zone => {
      if ("object" === typeof zone && zone.value && zone.label) {
        return zone;
      }
      if ("string" === typeof zone) {
        return options.find(tz => tz.value === zone) || -1 !== zone.indexOf("/") && findFuzzyTz(zone);
      }
      if (zone.value && !zone.label) {
        return options.find(tz => tz.value === zone.value);
      }
    }};
  }
  Object.defineProperties(exports, {__esModule:{enumerable:!0, value:!0}, allTimezones:{enumerable:!0, get:function() {
    return timezone_list_default;
  }}, default:{enumerable:!0, get:function() {
    return TimezoneSelect;
  }}, useTimezoneSelect:{enumerable:!0, get:function() {
    return useTimezoneSelect;
  }}});
  var require$react = require("module$node_modules$react$index");
  global = require("module$node_modules$react_select$dist$react_select_cjs");
  module = require("module$node_modules$spacetime$builds$spacetime_cjs");
  exports = require("module$node_modules$timezone_soft$builds$timezone_soft_cjs");
  var require$react_SLASH_jsx_runtime = require("module$node_modules$react$jsx_runtime"), default$$require$react_select = require.esmDefault(global), default$$require$spacetime = require.esmDefault(module), default$$require$timezone_soft = require.esmDefault(exports);
  "use client";
  var __defProp = Object.defineProperty, __getOwnPropSymbols = Object.getOwnPropertySymbols, __hasOwnProp = Object.prototype.hasOwnProperty, __propIsEnum = Object.prototype.propertyIsEnumerable, __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable:!0, configurable:!0, writable:!0, value}) : obj[key] = value, __spreadValues = (a, b) => {
    for (var prop in b || (b = {})) {
      __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);
    }
    if (__getOwnPropSymbols) {
      for (prop of __getOwnPropSymbols(b)) {
        __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);
      }
    }
    return a;
  }, __objRest = (source, exclude) => {
    var target = {}, prop;
    for (prop in source) {
      __hasOwnProp.call(source, prop) && 0 > exclude.indexOf(prop) && (target[prop] = source[prop]);
    }
    if (null != source && __getOwnPropSymbols) {
      for (prop of __getOwnPropSymbols(source)) {
        0 > exclude.indexOf(prop) && __propIsEnum.call(source, prop) && (target[prop] = source[prop]);
      }
    }
    return target;
  }, timezone_list_default = {"Pacific/Midway":"Midway Island, Samoa", "Pacific/Honolulu":"Hawaii", "America/Juneau":"Alaska", "America/Boise":"Mountain Time", "America/Dawson":"Dawson, Yukon", "America/Chihuahua":"Chihuahua, La Paz, Mazatlan", "America/Phoenix":"Arizona", "America/Chicago":"Central Time", "America/Regina":"Saskatchewan", "America/Mexico_City":"Guadalajara, Mexico City, Monterrey", "America/Belize":"Central America", "America/Detroit":"Eastern Time", "America/Bogota":"Bogota, Lima, Quito", 
  "America/Caracas":"Caracas, La Paz", "America/Santiago":"Santiago", "America/St_Johns":"Newfoundland and Labrador", "America/Sao_Paulo":"Brasilia", "America/Tijuana":"Tijuana", "America/Montevideo":"Montevideo", "America/Argentina/Buenos_Aires":"Buenos Aires, Georgetown", "America/Godthab":"Greenland", "America/Los_Angeles":"Pacific Time", "Atlantic/Azores":"Azores", "Atlantic/Cape_Verde":"Cape Verde Islands", GMT:"UTC", "Europe/London":"Edinburgh, London", "Europe/Dublin":"Dublin", "Europe/Lisbon":"Lisbon", 
  "Africa/Casablanca":"Casablanca, Monrovia", "Atlantic/Canary":"Canary Islands", "Europe/Belgrade":"Belgrade, Bratislava, Budapest, Ljubljana, Prague", "Europe/Sarajevo":"Sarajevo, Skopje, Warsaw, Zagreb", "Europe/Brussels":"Brussels, Copenhagen, Madrid, Paris", "Europe/Amsterdam":"Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna", "Africa/Algiers":"West Central Africa", "Europe/Bucharest":"Bucharest", "Africa/Cairo":"Cairo", "Europe/Helsinki":"Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius", "Europe/Athens":"Athens", 
  "Asia/Jerusalem":"Jerusalem", "Africa/Harare":"Harare, Pretoria", "Europe/Moscow":"Istanbul, Minsk, Moscow, St. Petersburg, Volgograd", "Asia/Kuwait":"Kuwait, Riyadh", "Africa/Nairobi":"Nairobi", "Asia/Baghdad":"Baghdad", "Asia/Tehran":"Tehran", "Asia/Dubai":"Abu Dhabi, Muscat", "Asia/Baku":"Baku, Tbilisi, Yerevan", "Asia/Kabul":"Kabul", "Asia/Yekaterinburg":"Ekaterinburg", "Asia/Karachi":"Islamabad, Karachi, Tashkent", "Asia/Kolkata":"Chennai, Kolkata, Mumbai, New Delhi", "Asia/Kathmandu":"Kathmandu", 
  "Asia/Dhaka":"Astana, Dhaka", "Asia/Colombo":"Sri Jayawardenepura", "Asia/Almaty":"Almaty, Novosibirsk", "Asia/Rangoon":"Yangon Rangoon", "Asia/Bangkok":"Bangkok, Hanoi, Jakarta", "Asia/Krasnoyarsk":"Krasnoyarsk", "Asia/Shanghai":"Beijing, Chongqing, Hong Kong SAR, Urumqi", "Asia/Kuala_Lumpur":"Kuala Lumpur, Singapore", "Asia/Taipei":"Taipei", "Australia/Perth":"Perth", "Asia/Irkutsk":"Irkutsk, Ulaanbaatar", "Asia/Seoul":"Seoul", "Asia/Tokyo":"Osaka, Sapporo, Tokyo", "Asia/Yakutsk":"Yakutsk", "Australia/Darwin":"Darwin", 
  "Australia/Adelaide":"Adelaide", "Australia/Sydney":"Canberra, Melbourne, Sydney", "Australia/Brisbane":"Brisbane", "Australia/Hobart":"Hobart", "Asia/Vladivostok":"Vladivostok", "Pacific/Guam":"Guam, Port Moresby", "Asia/Magadan":"Magadan, Solomon Islands, New Caledonia", "Asia/Kamchatka":"Kamchatka, Marshall Islands", "Pacific/Fiji":"Fiji Islands", "Pacific/Auckland":"Auckland, Wellington", "Pacific/Tongatapu":"Nuku'alofa"}, TimezoneSelect = _a => {
    var {value, onBlur, onChange, labelStyle, displayValue, timezones, currentDatetime} = _a;
    _a = __objRest(_a, "value onBlur onChange labelStyle displayValue timezones currentDatetime".split(" "));
    const {options, parseTimezone} = useTimezoneSelect({timezones, labelStyle, displayValue, currentDatetime});
    return (0,require$react_SLASH_jsx_runtime.jsx)(default$$require$react_select.default, __spreadValues({value:parseTimezone(value), onChange:tz => {
      onChange && onChange(tz);
    }, options, onBlur}, _a));
  };
};

//# sourceMappingURL=module$node_modules$react_timezone_select$dist$index.js.map
