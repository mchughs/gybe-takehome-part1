shadow$provide.module$node_modules$dayjs$plugin$utc = function(global, require, module, exports) {
  !function(t, i) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs_plugin_utc = i();
  }(this, function() {
    var i = /[+-]\d\d(?::?\d\d)?/g, e = /([+-]|\d\d)/g;
    return function(s, f, n) {
      s = f.prototype;
      n.utc = function(t) {
        return new f({date:t, utc:!0, args:arguments});
      };
      s.utc = function(i) {
        var e = n(this.toDate(), {locale:this.$L, utc:!0});
        return i ? e.add(this.utcOffset(), "minute") : e;
      };
      s.local = function() {
        return n(this.toDate(), {locale:this.$L, utc:!1});
      };
      var o = s.parse;
      s.parse = function(t) {
        t.utc && (this.$u = !0);
        this.$utils().u(t.$offset) || (this.$offset = t.$offset);
        o.call(this, t);
      };
      var r = s.init;
      s.init = function() {
        if (this.$u) {
          var t = this.$d;
          this.$y = t.getUTCFullYear();
          this.$M = t.getUTCMonth();
          this.$D = t.getUTCDate();
          this.$W = t.getUTCDay();
          this.$H = t.getUTCHours();
          this.$m = t.getUTCMinutes();
          this.$s = t.getUTCSeconds();
          this.$ms = t.getUTCMilliseconds();
        } else {
          r.call(this);
        }
      };
      var a = s.utcOffset;
      s.utcOffset = function(s, f$jscomp$0) {
        var n = this.$utils().u;
        if (n(s)) {
          return this.$u ? 0 : n(this.$offset) ? a.call(this) : this.$offset;
        }
        if (n = "string" == typeof s) {
          n = s;
          void 0 === n && (n = "");
          if (n = n.match(i)) {
            var f = ("" + n[0]).match(e) || ["-", 0, 0];
            n = f[0];
            f = 60 * +f[1] + +f[2];
            n = 0 === f ? 0 : "+" === n ? f : -f;
          } else {
            n = null;
          }
          n = (s = n, null === s);
        }
        if (n) {
          return this;
        }
        n = 16 >= Math.abs(s) ? 60 * s : s;
        f = this;
        if (f$jscomp$0) {
          return f.$offset = n, f.$u = 0 === s, f;
        }
        0 !== s ? (s = this.$u ? this.toDate().getTimezoneOffset() : -1 * this.utcOffset(), (f = this.local().add(n + s, "minute")).$offset = n, f.$x.$localOffset = s) : f = this.utc();
        return f;
      };
      var h = s.format;
      s.format = function(t) {
        return h.call(this, t || (this.$u ? "YYYY-MM-DDTHH:mm:ss[Z]" : ""));
      };
      s.valueOf = function() {
        var t = this.$utils().u(this.$offset) ? 0 : this.$offset + (this.$x.$localOffset || this.$d.getTimezoneOffset());
        return this.$d.valueOf() - 6e4 * t;
      };
      s.isUTC = function() {
        return !!this.$u;
      };
      s.toISOString = function() {
        return this.toDate().toISOString();
      };
      s.toString = function() {
        return this.toDate().toUTCString();
      };
      var l = s.toDate;
      s.toDate = function(t) {
        return "s" === t && this.$offset ? n(this.format("YYYY-MM-DD HH:mm:ss:SSS")).toDate() : l.call(this);
      };
      var c = s.diff;
      s.diff = function(t, i, e) {
        if (t && this.$u === t.$u) {
          return c.call(this, t, i, e);
        }
        var s = this.local();
        t = n(t).local();
        return c.call(s, t, i, e);
      };
    };
  });
};

//# sourceMappingURL=module$node_modules$dayjs$plugin$utc.js.map
