{
"version":3,
"file":"module$node_modules$$mui$material$node$styles$responsiveFontSizes.js",
"lineCount":27,
"mappings":"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",
"sources":["node_modules/@mui/material/node/styles/responsiveFontSizes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$material$node$styles$responsiveFontSizes\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\nvar _cssUtils = require(\"./cssUtils\");\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  const typography = theme.typography;\n\n  // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n    if (remFontSize <= 1) {\n      return;\n    }\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : (0, _formatMuiErrorMessage2.default)(6));\n    }\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n    let transform = null;\n    if (!disableAlign) {\n      transform = value => (0, _cssUtils.alignProperty)({\n        size: value,\n        grid: (0, _cssUtils.fontGrid)({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","default","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","_extends2","typography","convert","_cssUtils","convertLength","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","minFontSize","lineHeight","isUnitless","Error","transform","alignProperty","size","grid","fontGrid","pixels","responsiveProperty","cssProperty","min","max","unit"]
}
