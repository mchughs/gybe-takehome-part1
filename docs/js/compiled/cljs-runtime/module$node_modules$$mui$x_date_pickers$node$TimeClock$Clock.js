shadow$provide.module$node_modules$$mui$x_date_pickers$node$TimeClock$Clock = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.Clock = function(inProps) {
    inProps = (0,_styles.useThemeProps)({props:inProps, name:"MuiClock"});
    const {ampm, ampmInClock, autoFocus, children, value, handleMeridiemChange, isTimeDisabled, meridiemMode, minutesStep = 1, onChange, selectedId, type, viewValue, disabled, readOnly, className} = inProps, utils = (0,_useUtils.useUtils)(), localeText = (0,_useUtils.useLocaleText)(), isMoving = React.useRef(!1), classes = useUtilityClasses(inProps), isSelectedTimeDisabled = isTimeDisabled(viewValue, type), isPointerInner = !ampm && "hours" === type && (1 > viewValue || 12 < viewValue), handleValueChange = 
    (newValue, isFinish) => {
      disabled || readOnly || isTimeDisabled(newValue, type) || onChange(newValue, isFinish);
    }, setTime = (event, isFinish) => {
      let {offsetX, offsetY} = event;
      if (void 0 === offsetX) {
        const rect = event.target.getBoundingClientRect();
        offsetX = event.changedTouches[0].clientX - rect.left;
        offsetY = event.changedTouches[0].clientY - rect.top;
      }
      event = "seconds" === type || "minutes" === type ? (0,_shared.getMinutes)(offsetX, offsetY, minutesStep) : (0,_shared.getHours)(offsetX, offsetY, !!ampm);
      handleValueChange(event, isFinish);
    }, hasSelected = React.useMemo(() => "hours" === type ? !0 : 0 === viewValue % 5, [type, viewValue]), keyboardControlStep = "minutes" === type ? minutesStep : 1, listboxRef = React.useRef(null);
    (0,_utils.unstable_useEnhancedEffect)(() => {
      autoFocus && listboxRef.current.focus();
    }, [autoFocus]);
    return (0,_jsxRuntime.jsxs)(ClockRoot, {className:(0,_clsx.default)(className, classes.root), children:[(0,_jsxRuntime.jsxs)(ClockClock, {className:classes.clock, children:[(0,_jsxRuntime.jsx)(ClockSquareMask, {onTouchMove:event => {
      isMoving.current = !0;
      setTime(event, "shallow");
    }, onTouchEnd:event => {
      isMoving.current && (setTime(event, "finish"), isMoving.current = !1);
    }, onMouseUp:event => {
      isMoving.current && (isMoving.current = !1);
      setTime(event.nativeEvent, "finish");
    }, onMouseMove:event => {
      0 < event.buttons && setTime(event.nativeEvent, "shallow");
    }, ownerState:{disabled}, className:classes.squareMask}), !isSelectedTimeDisabled && (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(ClockPin, {className:classes.pin}), null != value && (0,_jsxRuntime.jsx)(_ClockPointer.ClockPointer, {type, viewValue, isInner:isPointerInner, hasSelected})]}), (0,_jsxRuntime.jsx)(ClockWrapper, {"aria-activedescendant":selectedId, "aria-label":localeText.clockLabelText(type, value, utils), ref:listboxRef, role:"listbox", onKeyDown:event => {
      if (!isMoving.current) {
        switch(event.key) {
          case "Home":
            handleValueChange(0, "partial");
            event.preventDefault();
            break;
          case "End":
            handleValueChange("minutes" === type ? 59 : 23, "partial");
            event.preventDefault();
            break;
          case "ArrowUp":
            handleValueChange(viewValue + keyboardControlStep, "partial");
            event.preventDefault();
            break;
          case "ArrowDown":
            handleValueChange(viewValue - keyboardControlStep, "partial"), event.preventDefault();
        }
      }
    }, tabIndex:0, className:classes.wrapper, children})]}), ampm && ampmInClock && (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(ClockAmButton, {onClick:readOnly ? void 0 : () => handleMeridiemChange("am"), disabled:disabled || null === meridiemMode, ownerState:inProps, className:classes.amButton, title:(0,_dateUtils.formatMeridiem)(utils, "am"), children:(0,_jsxRuntime.jsx)(ClockMeridiemText, {variant:"caption", className:classes.meridiemText, children:(0,_dateUtils.formatMeridiem)(utils, 
    "am")})}), (0,_jsxRuntime.jsx)(ClockPmButton, {disabled:disabled || null === meridiemMode, onClick:readOnly ? void 0 : () => handleMeridiemChange("pm"), ownerState:inProps, className:classes.pmButton, title:(0,_dateUtils.formatMeridiem)(utils, "pm"), children:(0,_jsxRuntime.jsx)(ClockMeridiemText, {variant:"caption", className:classes.meridiemText, children:(0,_dateUtils.formatMeridiem)(utils, "pm")})})]})]});
  };
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _clsx = global(require("module$node_modules$clsx$dist$clsx"));
  exports = global(require("module$node_modules$$mui$material$node$IconButton$index"));
  global = global(require("module$node_modules$$mui$material$node$Typography$index"));
  var _styles = require("module$node_modules$$mui$material$node$styles$index"), _utils = require("module$node_modules$$mui$utils$node$index"), _ClockPointer = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$ClockPointer"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"), _shared = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$shared"), _clockClasses = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$clockClasses"), 
  _dateUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$date_utils"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const useUtilityClasses = ownerState => {
    ({classes:ownerState} = ownerState);
    return (0,_utils.unstable_composeClasses)({root:["root"], clock:["clock"], wrapper:["wrapper"], squareMask:["squareMask"], pin:["pin"], amButton:["amButton"], pmButton:["pmButton"], meridiemText:["meridiemText"]}, _clockClasses.getClockUtilityClass, ownerState);
  }, ClockRoot = (0,_styles.styled)("div", {name:"MuiClock", slot:"Root", overridesResolver:(_, styles) => styles.root})(({theme}) => ({display:"flex", justifyContent:"center", alignItems:"center", margin:theme.spacing(2)})), ClockClock = (0,_styles.styled)("div", {name:"MuiClock", slot:"Clock", overridesResolver:(_, styles) => styles.clock})({backgroundColor:"rgba(0,0,0,.07)", borderRadius:"50%", height:220, width:220, flexShrink:0, position:"relative", pointerEvents:"none"}), ClockWrapper = (0,_styles.styled)("div", 
  {name:"MuiClock", slot:"Wrapper", overridesResolver:(_, styles) => styles.wrapper})({"\x26:focus":{outline:"none"}}), ClockSquareMask = (0,_styles.styled)("div", {name:"MuiClock", slot:"SquareMask", overridesResolver:(_, styles) => styles.squareMask})(({ownerState}) => (0,_extends2.default)({width:"100%", height:"100%", position:"absolute", pointerEvents:"auto", outline:0, touchAction:"none", userSelect:"none"}, ownerState.disabled ? {} : {"@media (pointer: fine)":{cursor:"pointer", borderRadius:"50%"}, 
  "\x26:active":{cursor:"move"}})), ClockPin = (0,_styles.styled)("div", {name:"MuiClock", slot:"Pin", overridesResolver:(_, styles) => styles.pin})(({theme}) => ({width:6, height:6, borderRadius:"50%", backgroundColor:(theme.vars || theme).palette.primary.main, position:"absolute", top:"50%", left:"50%", transform:"translate(-50%, -50%)"})), ClockAmButton = (0,_styles.styled)(exports.default, {name:"MuiClock", slot:"AmButton", overridesResolver:(_, styles) => styles.amButton})(({theme, ownerState}) => 
  (0,_extends2.default)({zIndex:1, position:"absolute", bottom:8, left:8, paddingLeft:4, paddingRight:4, width:_shared.CLOCK_HOUR_WIDTH}, "am" === ownerState.meridiemMode && {backgroundColor:(theme.vars || theme).palette.primary.main, color:(theme.vars || theme).palette.primary.contrastText, "\x26:hover":{backgroundColor:(theme.vars || theme).palette.primary.light}})), ClockPmButton = (0,_styles.styled)(exports.default, {name:"MuiClock", slot:"PmButton", overridesResolver:(_, styles) => styles.pmButton})(({theme, 
  ownerState}) => (0,_extends2.default)({zIndex:1, position:"absolute", bottom:8, right:8, paddingLeft:4, paddingRight:4, width:_shared.CLOCK_HOUR_WIDTH}, "pm" === ownerState.meridiemMode && {backgroundColor:(theme.vars || theme).palette.primary.main, color:(theme.vars || theme).palette.primary.contrastText, "\x26:hover":{backgroundColor:(theme.vars || theme).palette.primary.light}})), ClockMeridiemText = (0,_styles.styled)(global.default, {name:"MuiClock", slot:"meridiemText", overridesResolver:(_, 
  styles) => styles.meridiemText})({overflow:"hidden", whiteSpace:"nowrap", textOverflow:"ellipsis"});
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$TimeClock$Clock.js.map
