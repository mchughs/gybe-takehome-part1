shadow$provide.module$node_modules$$mui$x_date_pickers$node$timeViewRenderers$timeViewRenderers = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.renderTimeViewClock = exports.renderMultiSectionDigitalClockTimeView = exports.renderDigitalClockTimeView = void 0;
  (function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  })(require("module$node_modules$react$index"));
  var _TimeClock = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$index"), _DigitalClock = require("module$node_modules$$mui$x_date_pickers$node$DigitalClock$index"), _MultiSectionDigitalClock = require("module$node_modules$$mui$x_date_pickers$node$MultiSectionDigitalClock$index"), _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  exports.renderTimeViewClock = ({view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, ampmInClock, slots, slotProps, readOnly, disabled, sx, autoFocus, showViewSwitcher, disableIgnoringDatePartForTimeValidation, timezone}) => (0,_jsxRuntime.jsx)(_TimeClock.TimeClock, {view, onViewChange, focusedView:focusedView && (0,_timeUtils.isTimeView)(focusedView) ? 
  focusedView : null, onFocusedViewChange, views:views.filter(_timeUtils.isTimeView), value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, ampmInClock, slots, slotProps, readOnly, disabled, sx, autoFocus, showViewSwitcher, disableIgnoringDatePartForTimeValidation, timezone});
  exports.renderDigitalClockTimeView = ({view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timezone}) => (0,_jsxRuntime.jsx)(_DigitalClock.DigitalClock, {view, onViewChange, focusedView, onFocusedViewChange, views:views.filter(_timeUtils.isTimeView), 
  value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeStep:timeSteps?.minutes, skipDisabled, timezone});
  exports.renderMultiSectionDigitalClockTimeView = ({view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timezone}) => (0,_jsxRuntime.jsx)(_MultiSectionDigitalClock.MultiSectionDigitalClock, {view, onViewChange, focusedView, 
  onFocusedViewChange, views:views.filter(_timeUtils.isTimeView), value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, minutesStep, ampm, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timezone});
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$timeViewRenderers$timeViewRenderers.js.map
