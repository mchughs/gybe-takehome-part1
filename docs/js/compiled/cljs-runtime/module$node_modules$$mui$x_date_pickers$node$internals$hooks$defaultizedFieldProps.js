shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$defaultizedFieldProps = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useDefaultizedTimeField = exports.useDefaultizedDateTimeField = exports.useDefaultizedDateField = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _dateUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$date_utils"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils");
  exports.useDefaultizedDateField = props => {
    const utils = (0,_useUtils.useUtils)(), defaultDates = (0,_useUtils.useDefaultDates)();
    return (0,_extends2.default)({}, props, {disablePast:props.disablePast ?? !1, disableFuture:props.disableFuture ?? !1, format:props.format ?? utils.formats.keyboardDate, minDate:(0,_dateUtils.applyDefaultDate)(utils, props.minDate, defaultDates.minDate), maxDate:(0,_dateUtils.applyDefaultDate)(utils, props.maxDate, defaultDates.maxDate)});
  };
  exports.useDefaultizedTimeField = props => {
    var utils = (0,_useUtils.useUtils)();
    utils = props.ampm ?? utils.is12HourCycleInCurrentLocale() ? utils.formats.fullTime12h : utils.formats.fullTime24h;
    return (0,_extends2.default)({}, props, {disablePast:props.disablePast ?? !1, disableFuture:props.disableFuture ?? !1, format:props.format ?? utils});
  };
  exports.useDefaultizedDateTimeField = props => {
    const utils = (0,_useUtils.useUtils)(), defaultDates = (0,_useUtils.useDefaultDates)(), defaultFormat = props.ampm ?? utils.is12HourCycleInCurrentLocale() ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
    return (0,_extends2.default)({}, props, {disablePast:props.disablePast ?? !1, disableFuture:props.disableFuture ?? !1, format:props.format ?? defaultFormat, disableIgnoringDatePartForTimeValidation:!(!props.minDateTime && !props.maxDateTime), minDate:(0,_dateUtils.applyDefaultDate)(utils, props.minDateTime ?? props.minDate, defaultDates.minDate), maxDate:(0,_dateUtils.applyDefaultDate)(utils, props.maxDateTime ?? props.maxDate, defaultDates.maxDate), minTime:props.minDateTime ?? props.minTime, 
    maxTime:props.maxDateTime ?? props.maxTime});
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$defaultizedFieldProps.js.map
