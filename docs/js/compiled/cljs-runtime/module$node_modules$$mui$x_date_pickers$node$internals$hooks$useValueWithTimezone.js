shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$useValueWithTimezone = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useValueWithTimezone = exports.useControlledValueWithTimezone = void 0;
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _useEventCallback = global(require("module$node_modules$$mui$utils$node$useEventCallback$index")), _useControlled = global(require("module$node_modules$$mui$utils$node$useControlled$index")), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils");
  const useValueWithTimezone = ({timezone:timezoneProp, value:valueProp, defaultValue, onChange, valueManager}) => {
    const utils = (0,_useUtils.useUtils)();
    defaultValue = React.useRef(defaultValue);
    const inputValue = valueProp ?? defaultValue.current ?? valueManager.emptyValue, inputTimezone = React.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]), setInputTimezone = (0,_useEventCallback.default)(newValue => null == inputTimezone ? newValue : valueManager.setTimezone(utils, inputTimezone, newValue)), timezoneToRender = timezoneProp ?? inputTimezone ?? "default";
    timezoneProp = React.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
    valueProp = (0,_useEventCallback.default)((newValue, ...otherParams) => {
      newValue = setInputTimezone(newValue);
      onChange?.(newValue, ...otherParams);
    });
    return {value:timezoneProp, handleValueChange:valueProp, timezone:timezoneToRender};
  };
  exports.useValueWithTimezone = useValueWithTimezone;
  exports.useControlledValueWithTimezone = ({name, timezone:timezoneProp, value:valueProp, defaultValue, onChange:onChangeProp, valueManager}) => {
    const [valueWithInputTimezone, setValue] = (0,_useControlled.default)({name, state:"value", controlled:valueProp, default:defaultValue ?? valueManager.emptyValue});
    name = (0,_useEventCallback.default)((newValue, ...otherParams) => {
      setValue(newValue);
      onChangeProp?.(newValue, ...otherParams);
    });
    return useValueWithTimezone({timezone:timezoneProp, value:valueWithInputTimezone, defaultValue:void 0, onChange:name, valueManager});
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$useValueWithTimezone.js.map
