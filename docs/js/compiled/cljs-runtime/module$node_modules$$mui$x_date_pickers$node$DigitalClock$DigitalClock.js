shadow$provide.module$node_modules$$mui$x_date_pickers$node$DigitalClock$DigitalClock = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.DigitalClock = void 0;
  var _extends2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _utils = require("module$node_modules$$mui$base$node$utils$index"), _styles = require("module$node_modules$$mui$material$node$styles$index"), _useEventCallback = _interopRequireDefault(require("module$node_modules$$mui$utils$node$useEventCallback$index")), _composeClasses = _interopRequireDefault(require("module$node_modules$$mui$utils$node$composeClasses$index"));
  module = _interopRequireDefault(require("module$node_modules$$mui$material$node$MenuItem$index"));
  var _MenuList = _interopRequireDefault(require("module$node_modules$$mui$material$node$MenuList$index")), _useForkRef = _interopRequireDefault(require("module$node_modules$$mui$utils$node$useForkRef$index")), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"), _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils");
  _interopRequireDefault = require("module$node_modules$$mui$x_date_pickers$node$internals$components$PickerViewRoot$index");
  var _digitalClockClasses = require("module$node_modules$$mui$x_date_pickers$node$DigitalClock$digitalClockClasses"), _useViews = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useViews"), _dimensions = require("module$node_modules$$mui$x_date_pickers$node$internals$constants$dimensions"), _useValueWithTimezone = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useValueWithTimezone"), _valueManagers = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$valueManagers"), 
  _useClockReferenceDate = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useClockReferenceDate"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = "ampm timeStep autoFocus slots slotProps value defaultValue referenceDate disableIgnoringDatePartForTimeValidation maxTime minTime disableFuture disablePast minutesStep shouldDisableTime onChange view openTo onViewChange focusedView onFocusedViewChange className disabled readOnly views skipDisabled timezone".split(" "), useUtilityClasses = ownerState => {
    ({classes:ownerState} = ownerState);
    return (0,_composeClasses.default)({root:["root"], list:["list"], item:["item"]}, _digitalClockClasses.getDigitalClockUtilityClass, ownerState);
  }, DigitalClockRoot = (0,_styles.styled)(_interopRequireDefault.PickerViewRoot, {name:"MuiDigitalClock", slot:"Root", overridesResolver:(props, styles) => styles.root})(({ownerState}) => ({overflowY:"auto", width:"100%", "@media (prefers-reduced-motion: no-preference)":{scrollBehavior:ownerState.alreadyRendered ? "smooth" : "auto"}, maxHeight:_dimensions.DIGITAL_CLOCK_VIEW_HEIGHT})), DigitalClockList = (0,_styles.styled)(_MenuList.default, {name:"MuiDigitalClock", slot:"List", overridesResolver:(props, 
  styles) => styles.list})({padding:0}), DigitalClockItem = (0,_styles.styled)(module.default, {name:"MuiDigitalClock", slot:"Item", overridesResolver:(props, styles) => styles.item})(({theme}) => ({padding:"8px 16px", margin:"2px 4px", "\x26:first-of-type":{marginTop:4}, "\x26:hover":{backgroundColor:theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0,_styles.alpha)(theme.palette.primary.main, theme.palette.action.hoverOpacity)}, "\x26.Mui-selected":{backgroundColor:(theme.vars || 
  theme).palette.primary.main, color:(theme.vars || theme).palette.primary.contrastText, "\x26:focus-visible, \x26:hover":{backgroundColor:(theme.vars || theme).palette.primary.dark}}, "\x26.Mui-focusVisible":{backgroundColor:theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : (0,_styles.alpha)(theme.palette.primary.main, theme.palette.action.focusOpacity)}}));
  (exports.DigitalClock = React.forwardRef(function(inProps, ref) {
    const utils = (0,_useUtils.useUtils)(), containerRef = React.useRef(null);
    ref = (0,_useForkRef.default)(ref, containerRef);
    const props = (0,_styles.useThemeProps)({props:inProps, name:"MuiDigitalClock"}), {ampm = utils.is12HourCycleInCurrentLocale(), timeStep = 30, autoFocus, slots, slotProps, value:valueProp, defaultValue, referenceDate:referenceDateProp, disableIgnoringDatePartForTimeValidation = !1, maxTime, minTime, disableFuture, disablePast, minutesStep = 1, shouldDisableTime, onChange, view:inView, openTo, onViewChange, focusedView, onFocusedViewChange, className, disabled, readOnly, views = ["hours"], skipDisabled = 
    !1, timezone:timezoneProp} = props;
    inProps = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded);
    const {value, handleValueChange:handleRawValueChange, timezone} = (0,_useValueWithTimezone.useControlledValueWithTimezone)({name:"DigitalClock", timezone:timezoneProp, value:valueProp, defaultValue, onChange, valueManager:_valueManagers.singleItemValueManager}), localeText = (0,_useUtils.useLocaleText)(), now = (0,_useUtils.useNow)(timezone), ownerState = React.useMemo(() => (0,_extends2.default)({}, props, {alreadyRendered:!!containerRef.current}), [props]), classes = useUtilityClasses(ownerState), 
    ClockItem = slots?.digitalClockItem ?? DigitalClockItem, clockItemProps = (0,_utils.useSlotProps)({elementType:ClockItem, externalSlotProps:slotProps?.digitalClockItem, ownerState:{}, className:classes.item}), valueOrReferenceDate = (0,_useClockReferenceDate.useClockReferenceDate)({value, referenceDate:referenceDateProp, utils, props, timezone});
    var handleValueChange = (0,_useEventCallback.default)(newValue => handleRawValueChange(newValue, "finish", "hours"));
    const {setValueAndGoToNextView} = (0,_useViews.useViews)({view:inView, views, openTo, onViewChange, onChange:handleValueChange, focusedView, onFocusedViewChange}), handleItemSelect = (0,_useEventCallback.default)(newValue => {
      setValueAndGoToNextView(newValue, "finish");
    });
    React.useEffect(() => {
      if (null !== containerRef.current) {
        var activeItem = containerRef.current.querySelector('[role\x3d"listbox"] [role\x3d"option"][tabindex\x3d"0"], [role\x3d"listbox"] [role\x3d"option"][aria-selected\x3d"true"]');
        if (activeItem) {
          var offsetTop = activeItem.offsetTop;
          (autoFocus || focusedView) && activeItem.focus();
          containerRef.current.scrollTop = offsetTop - 4;
        }
      }
    });
    const isTimeDisabled = React.useCallback(valueToCheck => {
      const isAfter = (0,_timeUtils.createIsAfterIgnoreDatePart)(disableIgnoringDatePartForTimeValidation, utils);
      return !!(minTime && isAfter(minTime, valueToCheck) || maxTime && isAfter(valueToCheck, maxTime) || disableFuture && isAfter(valueToCheck, now) || disablePast && isAfter(now, valueToCheck)) || !(0 !== utils.getMinutes(valueToCheck) % minutesStep ? 0 : shouldDisableTime ? !shouldDisableTime(valueToCheck, "hours") : 1);
    }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now, disablePast, minutesStep, shouldDisableTime]);
    handleValueChange = React.useMemo(() => {
      const startOfDay = utils.startOfDay(valueOrReferenceDate);
      return [startOfDay, ...Array.from({length:Math.ceil(1440 / timeStep) - 1}, (_, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
    }, [valueOrReferenceDate, timeStep, utils]);
    const focusedOptionIndex = handleValueChange.findIndex(option => utils.isEqual(option, valueOrReferenceDate));
    return (0,_jsxRuntime.jsx)(DigitalClockRoot, (0,_extends2.default)({ref, className:(0,_clsx.default)(classes.root, className), ownerState}, inProps, {children:(0,_jsxRuntime.jsx)(DigitalClockList, {role:"listbox", "aria-label":localeText.timePickerToolbarTitle, className:classes.list, children:handleValueChange.map((option, index) => {
      if (skipDisabled && isTimeDisabled(option)) {
        return null;
      }
      const isSelected = utils.isEqual(option, value), formattedValue = utils.format(option, ampm ? "fullTime12h" : "fullTime24h");
      index = focusedOptionIndex === index || -1 === focusedOptionIndex && 0 === index ? 0 : -1;
      return (0,_jsxRuntime.jsx)(ClockItem, (0,_extends2.default)({onClick:() => !readOnly && handleItemSelect(option), selected:isSelected, disabled:disabled || isTimeDisabled(option), disableRipple:readOnly, role:"option", "aria-disabled":readOnly, "aria-selected":isSelected, tabIndex:index}, clockItemProps, {children:formattedValue}), formattedValue);
    })})}));
  })).propTypes = {ampm:global.default.bool, autoFocus:global.default.bool, classes:global.default.object, className:global.default.string, defaultValue:global.default.object, disabled:global.default.bool, disableFuture:global.default.bool, disableIgnoringDatePartForTimeValidation:global.default.bool, disablePast:global.default.bool, focusedView:global.default.oneOf(["hours"]), maxTime:global.default.object, minTime:global.default.object, minutesStep:global.default.number, onChange:global.default.func, 
  onFocusedViewChange:global.default.func, onViewChange:global.default.func, openTo:global.default.oneOf(["hours"]), readOnly:global.default.bool, referenceDate:global.default.object, shouldDisableTime:global.default.func, skipDisabled:global.default.bool, slotProps:global.default.object, slots:global.default.object, sx:global.default.oneOfType([global.default.arrayOf(global.default.oneOfType([global.default.func, global.default.object, global.default.bool])), global.default.func, global.default.object]), 
  timeStep:global.default.number, timezone:global.default.string, value:global.default.object, view:global.default.oneOf(["hours"]), views:global.default.arrayOf(global.default.oneOf(["hours"]))};
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$DigitalClock$DigitalClock.js.map
