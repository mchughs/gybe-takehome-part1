shadow$provide.module$node_modules$$mui$system$cssVars$useCurrentColorScheme = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function getSystemMode(mode) {
    if ("undefined" !== typeof window && "system" === mode) {
      return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }
  }
  function processState(state, callback) {
    if ("light" === state.mode || "system" === state.mode && "light" === state.systemMode) {
      return callback("light");
    }
    if ("dark" === state.mode || "system" === state.mode && "dark" === state.systemMode) {
      return callback("dark");
    }
  }
  function getColorScheme(state) {
    return processState(state, mode => {
      if ("light" === mode) {
        return state.lightColorScheme;
      }
      if ("dark" === mode) {
        return state.darkColorScheme;
      }
    });
  }
  function initializeValue(key, defaultValue) {
    if ("undefined" !== typeof window) {
      var value;
      try {
        (value = localStorage.getItem(key) || void 0) || localStorage.setItem(key, defaultValue);
      } catch (e) {
      }
      return value || defaultValue;
    }
  }
  "use client";
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function(options) {
    const {defaultMode = "light", defaultLightColorScheme, defaultDarkColorScheme, supportedColorSchemes = [], modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, storageWindow = "undefined" === typeof window ? void 0 : window} = options, joinedColorSchemes = supportedColorSchemes.join(","), [state, setState] = React.useState(() => {
      const initialMode = initializeValue(modeStorageKey, defaultMode), lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme), darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
      return {mode:initialMode, systemMode:getSystemMode(initialMode), lightColorScheme, darkColorScheme};
    });
    options = getColorScheme(state);
    const setMode = React.useCallback(mode => {
      setState(currentState => {
        if (mode === currentState.mode) {
          return currentState;
        }
        const newMode = null != mode ? mode : defaultMode;
        try {
          localStorage.setItem(modeStorageKey, newMode);
        } catch (e) {
        }
        return (0,_extends2.default)({}, currentState, {mode:newMode, systemMode:getSystemMode(newMode)});
      });
    }, [modeStorageKey, defaultMode]), setColorScheme = React.useCallback(value => {
      value ? "string" === typeof value ? value && !joinedColorSchemes.includes(value) ? console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`) : setState(currentState => {
        const newState = (0,_extends2.default)({}, currentState);
        processState(currentState, mode => {
          try {
            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
          } catch (e) {
          }
          "light" === mode && (newState.lightColorScheme = value);
          "dark" === mode && (newState.darkColorScheme = value);
        });
        return newState;
      }) : setState(currentState => {
        currentState = (0,_extends2.default)({}, currentState);
        const newLightColorScheme = null === value.light ? defaultLightColorScheme : value.light, newDarkColorScheme = null === value.dark ? defaultDarkColorScheme : value.dark;
        if (newLightColorScheme) {
          if (joinedColorSchemes.includes(newLightColorScheme)) {
            currentState.lightColorScheme = newLightColorScheme;
            try {
              localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
            } catch (error) {
            }
          } else {
            console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
          }
        }
        if (newDarkColorScheme) {
          if (joinedColorSchemes.includes(newDarkColorScheme)) {
            currentState.darkColorScheme = newDarkColorScheme;
            try {
              localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
            } catch (error) {
            }
          } else {
            console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
          }
        }
        return currentState;
      }) : setState(currentState => {
        try {
          localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme), localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
        } catch (e) {
        }
        return (0,_extends2.default)({}, currentState, {lightColorScheme:defaultLightColorScheme, darkColorScheme:defaultDarkColorScheme});
      });
    }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]), handleMediaQuery = React.useCallback(event => {
      "system" === state.mode && setState(currentState => {
        const systemMode = null != event && event.matches ? "dark" : "light";
        return currentState.systemMode === systemMode ? currentState : (0,_extends2.default)({}, currentState, {systemMode});
      });
    }, [state.mode]), mediaListener = React.useRef(handleMediaQuery);
    mediaListener.current = handleMediaQuery;
    React.useEffect(() => {
      const handler = (...args) => mediaListener.current(...args), media = window.matchMedia("(prefers-color-scheme: dark)");
      media.addListener(handler);
      mediaListener.current(media);
      return () => {
        media.removeListener(handler);
      };
    }, []);
    React.useEffect(() => {
      if (storageWindow) {
        const handleStorage = event => {
          const value = event.newValue;
          "string" !== typeof event.key || !event.key.startsWith(colorSchemeStorageKey) || value && !joinedColorSchemes.match(value) || (event.key.endsWith("light") && setColorScheme({light:value}), event.key.endsWith("dark") && setColorScheme({dark:value}));
          event.key !== modeStorageKey || value && !["light", "dark", "system"].includes(value) || setMode(value || defaultMode);
        };
        storageWindow.addEventListener("storage", handleStorage);
        return () => {
          storageWindow.removeEventListener("storage", handleStorage);
        };
      }
    }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
    return (0,_extends2.default)({}, state, {colorScheme:options, setMode, setColorScheme});
  };
  exports.getColorScheme = getColorScheme;
  exports.getSystemMode = getSystemMode;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _getInitColorSchemeScript = require("module$node_modules$$mui$system$cssVars$getInitColorSchemeScript");
};

//# sourceMappingURL=module$node_modules$$mui$system$cssVars$useCurrentColorScheme.js.map
