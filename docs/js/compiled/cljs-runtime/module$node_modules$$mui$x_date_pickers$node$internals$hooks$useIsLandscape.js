shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$useIsLandscape = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function getOrientation() {
    return "undefined" === typeof window ? "portrait" : window.screen && window.screen.orientation && window.screen.orientation.angle ? 90 === Math.abs(window.screen.orientation.angle) ? "landscape" : "portrait" : window.orientation ? 90 === Math.abs(Number(window.orientation)) ? "landscape" : "portrait" : "portrait";
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.useIsLandscape = void 0;
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _utils = require("module$node_modules$$mui$utils$node$index"), _utils2 = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$utils");
  exports.useIsLandscape = (views, customOrientation) => {
    const [orientation, setOrientation] = React.useState(getOrientation);
    (0,_utils.unstable_useEnhancedEffect)(() => {
      const eventHandler = () => {
        setOrientation(getOrientation());
      };
      window.addEventListener("orientationchange", eventHandler);
      return () => {
        window.removeEventListener("orientationchange", eventHandler);
      };
    }, []);
    return (0,_utils2.arrayIncludes)(views, ["hours", "minutes", "seconds"]) ? !1 : "landscape" === (customOrientation || orientation);
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$useIsLandscape.js.map
