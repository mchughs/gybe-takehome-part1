shadow$provide.module$node_modules$$mui$x_date_pickers$node$LocalizationProvider$LocalizationProvider = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.MuiPickersAdapterContext = exports.LocalizationProvider = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  global = global(require("module$node_modules$prop_types$index"));
  var _styles = require("module$node_modules$$mui$material$node$styles$index"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = ["localeText"], MuiPickersAdapterContext = exports.MuiPickersAdapterContext = React.createContext(null);
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
  (exports.LocalizationProvider = function(inProps) {
    const {localeText:inLocaleText} = inProps;
    inProps = (0,_objectWithoutPropertiesLoose2.default)(inProps, _excluded);
    const {utils:parentUtils, localeText:parentLocaleText} = React.useContext(MuiPickersAdapterContext) ?? {utils:void 0, localeText:void 0};
    inProps = (0,_styles.useThemeProps)({props:inProps, name:"MuiLocalizationProvider"});
    const {children, dateAdapter:DateAdapter, dateFormats, dateLibInstance, adapterLocale, localeText:themeLocaleText} = inProps, localeText = React.useMemo(() => (0,_extends2.default)({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]), utils = React.useMemo(() => {
      if (!DateAdapter) {
        return parentUtils ? parentUtils : null;
      }
      const adapter = new DateAdapter({locale:adapterLocale, formats:dateFormats, instance:dateLibInstance});
      if (!adapter.isMUIAdapter) {
        throw Error("MUI X: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`\nFor example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`\nMore information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation");
      }
      return adapter;
    }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]), defaultDates = React.useMemo(() => utils ? {minDate:utils.date("1900-01-01T00:00:00.000"), maxDate:utils.date("2099-12-31T00:00:00.000")} : null, [utils]);
    inProps = React.useMemo(() => ({utils, defaultDates, localeText}), [defaultDates, utils, localeText]);
    return (0,_jsxRuntime.jsx)(MuiPickersAdapterContext.Provider, {value:inProps, children});
  }).propTypes = {adapterLocale:global.default.any, children:global.default.node, dateAdapter:global.default.func, dateFormats:global.default.shape({dayOfMonth:global.default.string, dayOfMonthFull:global.default.string, fullDate:global.default.string, fullTime:global.default.string, fullTime12h:global.default.string, fullTime24h:global.default.string, hours12h:global.default.string, hours24h:global.default.string, keyboardDate:global.default.string, keyboardDateTime:global.default.string, keyboardDateTime12h:global.default.string, 
  keyboardDateTime24h:global.default.string, meridiem:global.default.string, minutes:global.default.string, month:global.default.string, monthShort:global.default.string, normalDate:global.default.string, normalDateWithWeekday:global.default.string, seconds:global.default.string, shortDate:global.default.string, weekday:global.default.string, weekdayShort:global.default.string, year:global.default.string}), dateLibInstance:global.default.any, localeText:global.default.object};
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$LocalizationProvider$LocalizationProvider.js.map
