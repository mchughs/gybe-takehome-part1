shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$hooks$usePicker$usePickerViews = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.usePickerViews = void 0;
  var _extends2 = global(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index")), _useEnhancedEffect = global(require("module$node_modules$$mui$utils$node$useEnhancedEffect$index")), _useEventCallback = global(require("module$node_modules$$mui$utils$node$useEventCallback$index")), _useViews = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useViews"), _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils");
  const _excluded = ["className", "sx"];
  exports.usePickerViews = ({props, propsFromPickerValue, additionalViewProps, autoFocusView, rendererInterceptor, fieldRef}) => {
    const {onChange, open, onClose} = propsFromPickerValue, {views, openTo, onViewChange, disableOpenPicker, viewRenderers, timezone} = props, propsToForwardToView = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded), {view, setView, defaultView, focusedView, setFocusedView, setValueAndGoToNextView} = (0,_useViews.useViews)({view:void 0, views, openTo, onChange, onViewChange, autoFocus:autoFocusView}), {hasUIView, viewModeLookup} = React.useMemo(() => views.reduce((acc, viewForReduce) => 
    {
      let viewMode;
      viewMode = disableOpenPicker ? "field" : null != viewRenderers[viewForReduce] ? "UI" : "field";
      acc.viewModeLookup[viewForReduce] = viewMode;
      "UI" === viewMode && (acc.hasUIView = !0);
      return acc;
    }, {hasUIView:!1, viewModeLookup:{}}), [disableOpenPicker, viewRenderers, views]), timeViewsCount = React.useMemo(() => views.reduce((acc, viewForReduce) => null != viewRenderers[viewForReduce] && (0,_timeUtils.isTimeView)(viewForReduce) ? acc + 1 : acc, 0), [viewRenderers, views]), currentViewMode = viewModeLookup[view];
    props = (0,_useEventCallback.default)(() => "UI" === currentViewMode);
    const [popperView, setPopperView] = React.useState("UI" === currentViewMode ? view : null);
    popperView !== view && "UI" === viewModeLookup[view] && setPopperView(view);
    (0,_useEnhancedEffect.default)(() => {
      "field" === currentViewMode && open && (onClose(), setTimeout(() => {
        fieldRef?.current?.focusField(view);
      }));
    }, [view]);
    (0,_useEnhancedEffect.default)(() => {
      if (open) {
        var newView = view;
        "field" === currentViewMode && null != popperView && (newView = popperView);
        newView !== defaultView && "UI" === viewModeLookup[newView] && "UI" === viewModeLookup[defaultView] && (newView = defaultView);
        newView !== view && setView(newView);
        setFocusedView(newView, !0);
      }
    }, [open]);
    return {hasUIView, shouldRestoreFocus:props, layoutProps:{views, view:popperView, onViewChange:setView}, renderCurrentView:() => {
      if (null == popperView) {
        return null;
      }
      const renderer = viewRenderers[popperView];
      if (null == renderer) {
        return null;
      }
      const rendererProps = (0,_extends2.default)({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {views, timezone, onChange:setValueAndGoToNextView, view:popperView, onViewChange:setView, focusedView, onFocusedViewChange:setFocusedView, showViewSwitcher:1 < timeViewsCount, timeViewsCount});
      return rendererInterceptor ? rendererInterceptor(viewRenderers, popperView, rendererProps) : renderer(rendererProps);
    }};
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$hooks$usePicker$usePickerViews.js.map
