shadow$provide.module$node_modules$$mui$x_date_pickers$node$MultiSectionDigitalClock$MultiSectionDigitalClock_utils = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getTimeSectionOptions = exports.getHourSectionOptions = void 0;
  exports.getHourSectionOptions = ({now, value, utils, ampm, isDisabled, resolveAriaLabel, timeStep, valueOrReferenceDate}) => {
    const currentHours = value ? utils.getHours(value) : null;
    value = [];
    const isSelected = (hour, overriddenCurrentHours) => {
      overriddenCurrentHours = overriddenCurrentHours ?? currentHours;
      return null === overriddenCurrentHours ? !1 : ampm ? 12 === hour ? 12 === overriddenCurrentHours || 0 === overriddenCurrentHours : overriddenCurrentHours === hour || overriddenCurrentHours - 12 === hour : overriddenCurrentHours === hour;
    }, isFocused = hour => isSelected(hour, utils.getHours(valueOrReferenceDate)), endHour = ampm ? 11 : 23;
    for (let hour = 0; hour <= endHour; hour += timeStep) {
      let label = utils.format(utils.setHours(now, hour), ampm ? "hours12h" : "hours24h");
      const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
      label = utils.formatNumber(label);
      value.push({value:hour, label, isSelected, isDisabled, isFocused, ariaLabel});
    }
    return value;
  };
  exports.getTimeSectionOptions = ({value, utils, isDisabled, timeStep, resolveLabel, resolveAriaLabel, hasValue = !0}) => {
    const isSelected = timeValue => null === value ? !1 : hasValue && value === timeValue, isFocused = timeValue => value === timeValue;
    return [...Array.from({length:Math.ceil(60 / timeStep)}, (_, index) => {
      _ = timeStep * index;
      return {value:_, label:utils.formatNumber(resolveLabel(_)), isDisabled, isSelected, isFocused, ariaLabel:resolveAriaLabel(_.toString())};
    })];
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$MultiSectionDigitalClock$MultiSectionDigitalClock_utils.js.map
