shadow$provide.module$node_modules$$mui$utils$node$useIsFocusVisible$useIsFocusVisible = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  function handleKeyDown(event) {
    event.metaKey || event.altKey || event.ctrlKey || (hadKeyboardEvent = !0);
  }
  function handlePointerDown() {
    hadKeyboardEvent = !1;
  }
  function handleVisibilityChange() {
    "hidden" === this.visibilityState && hadFocusVisibleRecently && (hadKeyboardEvent = !0);
  }
  "use client";
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = function() {
    const ref = React.useCallback(node => {
      null != node && (node = node.ownerDocument, node.addEventListener("keydown", handleKeyDown, !0), node.addEventListener("mousedown", handlePointerDown, !0), node.addEventListener("pointerdown", handlePointerDown, !0), node.addEventListener("touchstart", handlePointerDown, !0), node.addEventListener("visibilitychange", handleVisibilityChange, !0));
    }, []), isFocusVisibleRef = React.useRef(!1);
    return {isFocusVisibleRef, onFocus:function(event) {
      a: {
        ({target:event} = event);
        try {
          var JSCompiler_inline_result = event.matches(":focus-visible");
          break a;
        } catch (error) {
        }
        if (!(JSCompiler_inline_result = hadKeyboardEvent)) {
          const {type, tagName} = event;
          JSCompiler_inline_result = "INPUT" === tagName && inputTypesWhitelist[type] && !event.readOnly || "TEXTAREA" === tagName && !event.readOnly || event.isContentEditable ? !0 : !1;
        }
      }
      return JSCompiler_inline_result ? isFocusVisibleRef.current = !0 : !1;
    }, onBlur:function() {
      return isFocusVisibleRef.current ? (hadFocusVisibleRecently = !0, hadFocusVisibleRecentlyTimeout.start(100, () => {
        hadFocusVisibleRecently = !1;
      }), isFocusVisibleRef.current = !1, !0) : !1;
    }, ref};
  };
  exports.teardown = function(doc) {
    doc.removeEventListener("keydown", handleKeyDown, !0);
    doc.removeEventListener("mousedown", handlePointerDown, !0);
    doc.removeEventListener("pointerdown", handlePointerDown, !0);
    doc.removeEventListener("touchstart", handlePointerDown, !0);
    doc.removeEventListener("visibilitychange", handleVisibilityChange, !0);
  };
  var React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  let hadKeyboardEvent = !0, hadFocusVisibleRecently = !1;
  const hadFocusVisibleRecentlyTimeout = new (require("module$node_modules$$mui$utils$node$useTimeout$useTimeout").Timeout)(), inputTypesWhitelist = {text:!0, search:!0, url:!0, tel:!0, email:!0, password:!0, number:!0, date:!0, month:!0, week:!0, time:!0, datetime:!0, "datetime-local":!0};
};

//# sourceMappingURL=module$node_modules$$mui$utils$node$useIsFocusVisible$useIsFocusVisible.js.map
