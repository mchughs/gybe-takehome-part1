shadow$provide.module$node_modules$$mui$x_date_pickers$node$TimeClock$shared = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getMinutes = exports.getHours = exports.CLOCK_WIDTH = exports.CLOCK_HOUR_WIDTH = void 0;
  const CLOCK_WIDTH = exports.CLOCK_WIDTH = 220, CLOCK_HOUR_WIDTH = exports.CLOCK_HOUR_WIDTH = 36;
  var JSCompiler_object_inline_x_779 = CLOCK_WIDTH / 2, JSCompiler_object_inline_y_780 = CLOCK_WIDTH / 2;
  const cx = JSCompiler_object_inline_x_779 - JSCompiler_object_inline_x_779, cy = 0 - JSCompiler_object_inline_y_780, getAngleValue = (step, offsetX, offsetY) => {
    offsetX -= JSCompiler_object_inline_x_779;
    offsetY -= JSCompiler_object_inline_y_780;
    let deg = 180 / Math.PI * (Math.atan2(cx, cy) - Math.atan2(offsetX, offsetY));
    deg = Math.round(deg / step) * step;
    return {value:Math.floor(deg % 360 / step) || 0, distance:Math.sqrt(offsetX ** 2 + offsetY ** 2)};
  };
  exports.getMinutes = (offsetX, offsetY, step = 1) => {
    ({value:offsetX} = getAngleValue(6 * step, offsetX, offsetY));
    return offsetX * step % 60;
  };
  exports.getHours = (offsetX, offsetY, ampm) => {
    const {value, distance} = getAngleValue(30, offsetX, offsetY);
    offsetX = value || 12;
    ampm ? offsetX %= 12 : distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH && (offsetX = (offsetX + 12) % 24);
    return offsetX;
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$TimeClock$shared.js.map
