shadow$provide.module$node_modules$$mui$x_date_pickers$node$internals$utils$valueManagers = function(global, require, module, exports) {
  global = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.singleItemValueManager = exports.singleItemFieldValueManager = void 0;
  var _objectWithoutPropertiesLoose2 = global(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose"));
  global = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$date_utils");
  var _getDefaultReferenceDate = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$getDefaultReferenceDate");
  require = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useField$useField_utils");
  const _excluded = ["value", "referenceDate"];
  exports.singleItemValueManager = {emptyValue:null, getTodayValue:global.getTodayDate, getInitialReferenceValue:_ref => {
    let {value, referenceDate} = _ref;
    _ref = (0,_objectWithoutPropertiesLoose2.default)(_ref, _excluded);
    return null != value && _ref.utils.isValid(value) ? value : null != referenceDate ? referenceDate : (0,_getDefaultReferenceDate.getDefaultReferenceDate)(_ref);
  }, cleanValue:global.replaceInvalidDateByNull, areValuesEqual:global.areDatesEqual, isSameError:(a, b) => a === b, hasError:error => null != error, defaultErrorState:null, getTimezone:(utils, value) => null != value && utils.isValid(value) ? utils.getTimezone(value) : null, setTimezone:(utils, timezone, value) => null == value ? null : utils.setTimezone(value, timezone)};
  exports.singleItemFieldValueManager = {updateReferenceValue:(utils, value, prevReferenceValue) => null != value && utils.isValid(value) ? value : prevReferenceValue, getSectionsFromValue:(utils, date, prevSections, getSectionsFromDate) => !utils.isValid(date) && prevSections ? prevSections : getSectionsFromDate(date), getV7HiddenInputValueFromSections:require.createDateStrForV7HiddenInputFromSections, getV6InputValueFromSections:require.createDateStrForV6InputFromSections, getActiveDateManager:(utils, 
  state) => ({date:state.value, referenceDate:state.referenceValue, getSections:sections => sections, getNewValuesFromNewActiveDate:newActiveDate => ({value:newActiveDate, referenceValue:null != newActiveDate && utils.isValid(newActiveDate) ? newActiveDate : state.referenceValue})}), parseValueStr:(valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)};
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$internals$utils$valueManagers.js.map
