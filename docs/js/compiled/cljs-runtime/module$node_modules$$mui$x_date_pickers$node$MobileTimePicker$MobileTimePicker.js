shadow$provide.module$node_modules$$mui$x_date_pickers$node$MobileTimePicker$MobileTimePicker = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.MobileTimePicker = void 0;
  var _extends2 = module(require("module$node_modules$$babel$runtime$helpers$extends"));
  global = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  module = module(require("module$node_modules$prop_types$index"));
  var _utils = require("module$node_modules$$mui$base$node$utils$index"), _utils2 = require("module$node_modules$$mui$utils$node$index"), _valueManagers = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$valueManagers"), _TimeField = require("module$node_modules$$mui$x_date_pickers$node$TimeField$index"), _shared = require("module$node_modules$$mui$x_date_pickers$node$TimePicker$shared"), _useUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useUtils"), 
  _validateTime = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$validation$validateTime"), _useMobilePicker = require("module$node_modules$$mui$x_date_pickers$node$internals$hooks$useMobilePicker$index"), _extractValidationProps = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$validation$extractValidationProps"), _timeViewRenderers = require("module$node_modules$$mui$x_date_pickers$node$timeViewRenderers$index"), _timeUtils = require("module$node_modules$$mui$x_date_pickers$node$internals$utils$time_utils");
  (exports.MobileTimePicker = global.forwardRef(function(inProps, ref) {
    var localeText = (0,_useUtils.useLocaleText)(), utils = (0,_useUtils.useUtils)();
    const defaultizedProps = (0,_shared.useTimePickerDefaultizedProps)(inProps, "MuiMobileTimePicker");
    inProps = (0,_extends2.default)({hours:_timeViewRenderers.renderTimeViewClock, minutes:_timeViewRenderers.renderTimeViewClock, seconds:_timeViewRenderers.renderTimeViewClock}, defaultizedProps.viewRenderers);
    const ampmInClock = defaultizedProps.ampmInClock ?? !1;
    utils = (0,_extends2.default)({}, defaultizedProps, {ampmInClock, viewRenderers:inProps, format:(0,_timeUtils.resolveTimeFormat)(utils, defaultizedProps), slots:(0,_extends2.default)({field:_TimeField.TimeField}, defaultizedProps.slots), slotProps:(0,_extends2.default)({}, defaultizedProps.slotProps, {field:ownerState => (0,_extends2.default)({}, (0,_utils.resolveComponentProps)(defaultizedProps.slotProps?.field, ownerState), (0,_extractValidationProps.extractValidationProps)(defaultizedProps), 
    {ref}), toolbar:(0,_extends2.default)({hidden:!1, ampmInClock}, defaultizedProps.slotProps?.toolbar)})});
    ({renderPicker:localeText} = (0,_useMobilePicker.useMobilePicker)({props:utils, valueManager:_valueManagers.singleItemValueManager, valueType:"time", getOpenDialogAriaText:utils.localeText?.openTimePickerDialogue ?? localeText.openTimePickerDialogue, validator:_validateTime.validateTime}));
    return localeText();
  })).propTypes = {ampm:module.default.bool, ampmInClock:module.default.bool, autoFocus:module.default.bool, className:module.default.string, closeOnSelect:module.default.bool, defaultValue:module.default.object, disabled:module.default.bool, disableFuture:module.default.bool, disableIgnoringDatePartForTimeValidation:module.default.bool, disableOpenPicker:module.default.bool, disablePast:module.default.bool, enableAccessibleFieldDOMStructure:module.default.any, format:module.default.string, formatDensity:module.default.oneOf(["dense", 
  "spacious"]), inputRef:_utils2.refType, label:module.default.node, localeText:module.default.object, maxTime:module.default.object, minTime:module.default.object, minutesStep:module.default.number, name:module.default.string, onAccept:module.default.func, onChange:module.default.func, onClose:module.default.func, onError:module.default.func, onOpen:module.default.func, onSelectedSectionsChange:module.default.func, onViewChange:module.default.func, open:module.default.bool, openTo:module.default.oneOf(["hours", 
  "minutes", "seconds"]), orientation:module.default.oneOf(["landscape", "portrait"]), readOnly:module.default.bool, reduceAnimations:module.default.bool, referenceDate:module.default.object, selectedSections:module.default.oneOfType([module.default.oneOf("all day empty hours meridiem minutes month seconds weekDay year".split(" ")), module.default.number]), shouldDisableTime:module.default.func, slotProps:module.default.object, slots:module.default.object, sx:module.default.oneOfType([module.default.arrayOf(module.default.oneOfType([module.default.func, 
  module.default.object, module.default.bool])), module.default.func, module.default.object]), timezone:module.default.string, value:module.default.object, view:module.default.oneOf(["hours", "minutes", "seconds"]), viewRenderers:module.default.shape({hours:module.default.func, minutes:module.default.func, seconds:module.default.func}), views:module.default.arrayOf(module.default.oneOf(["hours", "minutes", "seconds"]).isRequired)};
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$MobileTimePicker$MobileTimePicker.js.map
