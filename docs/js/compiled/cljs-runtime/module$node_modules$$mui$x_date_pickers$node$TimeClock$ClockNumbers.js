shadow$provide.module$node_modules$$mui$x_date_pickers$node$TimeClock$ClockNumbers = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.getMinutesNumbers = exports.getHourNumbers = void 0;
  (function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  })(require("module$node_modules$react$index"));
  var _ClockNumber = require("module$node_modules$$mui$x_date_pickers$node$TimeClock$ClockNumber"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  exports.getHourNumbers = ({ampm, value, getClockNumberText, isDisabled, selectedId, utils}) => {
    value = value ? utils.getHours(value) : null;
    const hourNumbers = [];
    var startHour = ampm ? 1 : 0;
    const endHour = ampm ? 12 : 23;
    for (; startHour <= endHour; startHour += 1) {
      let label = startHour.toString();
      0 === startHour && (label = "00");
      const inner = !ampm && (0 === startHour || 12 < startHour);
      label = utils.formatNumber(label);
      const selected = null === value ? !1 : ampm ? 12 === startHour ? 12 === value || 0 === value : value === startHour || value - 12 === startHour : value === startHour;
      hourNumbers.push((0,_jsxRuntime.jsx)(_ClockNumber.ClockNumber, {id:selected ? selectedId : void 0, index:startHour, inner, selected, disabled:isDisabled(startHour), label, "aria-label":getClockNumberText(label)}, startHour));
    }
    return hourNumbers;
  };
  exports.getMinutesNumbers = ({utils, value, isDisabled, getClockNumberText, selectedId}) => {
    utils = utils.formatNumber;
    return [[5, utils("05")], [10, utils("10")], [15, utils("15")], [20, utils("20")], [25, utils("25")], [30, utils("30")], [35, utils("35")], [40, utils("40")], [45, utils("45")], [50, utils("50")], [55, utils("55")], [0, utils("00")]].map(([numberValue, label], index) => {
      const selected = numberValue === value;
      return (0,_jsxRuntime.jsx)(_ClockNumber.ClockNumber, {label, id:selected ? selectedId : void 0, index:index + 1, inner:!1, disabled:isDisabled(numberValue), selected, "aria-label":getClockNumberText(label)}, numberValue);
    });
  };
};

//# sourceMappingURL=module$node_modules$$mui$x_date_pickers$node$TimeClock$ClockNumbers.js.map
