shadow$provide.module$node_modules$$mui$base$node$OptionGroup$OptionGroup = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  module = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.OptionGroup = void 0;
  var _extends2 = module(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = module(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose"));
  global = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  module = module(require("module$node_modules$prop_types$index"));
  var _composeClasses = require("module$node_modules$$mui$base$node$composeClasses$index"), _optionGroupClasses = require("module$node_modules$$mui$base$node$OptionGroup$optionGroupClasses"), _utils = require("module$node_modules$$mui$base$node$utils$index"), _ClassNameConfigurator = require("module$node_modules$$mui$base$node$utils$ClassNameConfigurator"), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = ["disabled", "slotProps", "slots"];
  (exports.OptionGroup = global.forwardRef(function(props, forwardedRef) {
    const {disabled = !1, slotProps = {}, slots = {}} = props;
    var other = (0,_objectWithoutPropertiesLoose2.default)(props, _excluded);
    const Root = (null == slots ? void 0 : slots.root) || "li", Label = (null == slots ? void 0 : slots.label) || "span", List = (null == slots ? void 0 : slots.list) || "ul";
    var JSCompiler_inline_result = (0,_composeClasses.unstable_composeClasses)({root:["root", disabled && "disabled"], label:["label"], list:["list"]}, (0,_ClassNameConfigurator.useClassNamesOverride)(_optionGroupClasses.getOptionGroupUtilityClass));
    forwardedRef = (0,_utils.useSlotProps)({elementType:Root, externalSlotProps:slotProps.root, externalForwardedProps:other, additionalProps:{ref:forwardedRef}, ownerState:props, className:JSCompiler_inline_result.root});
    other = (0,_utils.useSlotProps)({elementType:Label, externalSlotProps:slotProps.label, ownerState:props, className:JSCompiler_inline_result.label});
    JSCompiler_inline_result = (0,_utils.useSlotProps)({elementType:List, externalSlotProps:slotProps.list, ownerState:props, className:JSCompiler_inline_result.list});
    return (0,_jsxRuntime.jsxs)(Root, (0,_extends2.default)({}, forwardedRef, {children:[(0,_jsxRuntime.jsx)(Label, (0,_extends2.default)({}, other, {children:props.label})), (0,_jsxRuntime.jsx)(List, (0,_extends2.default)({}, JSCompiler_inline_result, {children:props.children}))]}));
  })).propTypes = {children:module.default.node, className:module.default.string, disabled:module.default.bool, label:module.default.node, slotProps:module.default.shape({label:module.default.oneOfType([module.default.func, module.default.object]), list:module.default.oneOfType([module.default.func, module.default.object]), root:module.default.oneOfType([module.default.func, module.default.object])}), slots:module.default.shape({label:module.default.elementType, list:module.default.elementType, root:module.default.elementType})};
};

//# sourceMappingURL=module$node_modules$$mui$base$node$OptionGroup$OptionGroup.js.map
