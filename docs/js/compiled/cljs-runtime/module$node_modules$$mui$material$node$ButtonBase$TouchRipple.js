shadow$provide.module$node_modules$$mui$material$node$ButtonBase$TouchRipple = function(global, require, module, exports) {
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) {
      return null;
    }
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
      return e ? t : r;
    })(e);
  }
  "use client";
  var _interopRequireDefault = require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.default = exports.TouchRippleRoot = exports.TouchRippleRipple = exports.DELAY_RIPPLE = void 0;
  var _extends2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$extends")), _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose")), React = function(e, r) {
    if (!r && e && e.__esModule) {
      return e;
    }
    if (null === e || "object" != typeof e && "function" != typeof e) {
      return {default:e};
    }
    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {
      return r.get(e);
    }
    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;
    for (u in e) {
      if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
      }
    }
    return n.default = e, r && r.set(e, n), n;
  }(require("module$node_modules$react$index"));
  global = _interopRequireDefault(require("module$node_modules$prop_types$index"));
  var _reactTransitionGroup = require("module$node_modules$react_transition_group$cjs$index"), _clsx = _interopRequireDefault(require("module$node_modules$clsx$dist$clsx")), _system = require("module$node_modules$$mui$system$index"), _useTimeout = _interopRequireDefault(require("module$node_modules$$mui$utils$node$useTimeout$index"));
  module = _interopRequireDefault(require("module$node_modules$$mui$material$node$styles$styled"));
  var _useThemeProps = _interopRequireDefault(require("module$node_modules$$mui$material$node$styles$useThemeProps")), _Ripple = _interopRequireDefault(require("module$node_modules$$mui$material$node$ButtonBase$Ripple")), _touchRippleClasses = _interopRequireDefault(require("module$node_modules$$mui$material$node$ButtonBase$touchRippleClasses")), _jsxRuntime = require("module$node_modules$react$jsx_runtime");
  const _excluded = ["center", "classes", "className"], DELAY_RIPPLE = exports.DELAY_RIPPLE = 80;
  require = (0,_system.keyframes)`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`;
  _interopRequireDefault = (0,_system.keyframes)`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`;
  _system = (0,_system.keyframes)`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`;
  const TouchRippleRoot = exports.TouchRippleRoot = (0,module.default)("span", {name:"MuiTouchRipple", slot:"Root"})({overflow:"hidden", pointerEvents:"none", position:"absolute", zIndex:0, top:0, right:0, bottom:0, left:0, borderRadius:"inherit"}), TouchRippleRipple = exports.TouchRippleRipple = (0,module.default)(_Ripple.default, {name:"MuiTouchRipple", slot:"Ripple"})`
  opacity: 0;
  position: absolute;

  &.${_touchRippleClasses.default.rippleVisible} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${require};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme}) => theme.transitions.easing.easeInOut};
  }

  &.${_touchRippleClasses.default.ripplePulsate} {
    animation-duration: ${({theme}) => theme.transitions.duration.shorter}ms;
  }

  & .${_touchRippleClasses.default.child} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${_touchRippleClasses.default.childLeaving} {
    opacity: 0;
    animation-name: ${_interopRequireDefault};
    animation-duration: ${550}ms;
    animation-timing-function: ${({theme}) => theme.transitions.easing.easeInOut};
  }

  & .${_touchRippleClasses.default.childPulsate} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${_system};
    animation-duration: 2500ms;
    animation-timing-function: ${({theme}) => theme.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`;
  module = React.forwardRef(function(inProps, ref) {
    inProps = (0,_useThemeProps.default)({props:inProps, name:"MuiTouchRipple"});
    const {center:centerProp = !1, classes = {}, className} = inProps;
    inProps = (0,_objectWithoutPropertiesLoose2.default)(inProps, _excluded);
    const [ripples, setRipples] = React.useState([]), nextKey = React.useRef(0), rippleCallback = React.useRef(null);
    React.useEffect(() => {
      rippleCallback.current && (rippleCallback.current(), rippleCallback.current = null);
    }, [ripples]);
    const ignoringMouseDown = React.useRef(!1), startTimer = (0,_useTimeout.default)(), startTimerCommit = React.useRef(null), container = React.useRef(null), startCommit = React.useCallback(params => {
      const {pulsate, rippleX, rippleY, rippleSize, cb} = params;
      setRipples(oldRipples => [...oldRipples, (0,_jsxRuntime.jsx)(TouchRippleRipple, {classes:{ripple:(0,_clsx.default)(classes.ripple, _touchRippleClasses.default.ripple), rippleVisible:(0,_clsx.default)(classes.rippleVisible, _touchRippleClasses.default.rippleVisible), ripplePulsate:(0,_clsx.default)(classes.ripplePulsate, _touchRippleClasses.default.ripplePulsate), child:(0,_clsx.default)(classes.child, _touchRippleClasses.default.child), childLeaving:(0,_clsx.default)(classes.childLeaving, _touchRippleClasses.default.childLeaving), 
      childPulsate:(0,_clsx.default)(classes.childPulsate, _touchRippleClasses.default.childPulsate)}, timeout:550, pulsate, rippleX, rippleY, rippleSize}, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]), start = React.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {pulsate = !1, center = centerProp || options.pulsate, fakeElement = !1} = options;
      if ("mousedown" === (null == event ? void 0 : event.type) && ignoringMouseDown.current) {
        ignoringMouseDown.current = !1;
      } else {
        "touchstart" === (null == event ? void 0 : event.type) && (ignoringMouseDown.current = !0);
        var rect = (options = fakeElement ? null : container.current) ? options.getBoundingClientRect() : {width:0, height:0, left:0, top:0};
        if (center || void 0 === event || 0 === event.clientX && 0 === event.clientY || !event.clientX && !event.touches) {
          var rippleX = Math.round(rect.width / 2);
          var rippleY = Math.round(rect.height / 2);
        } else {
          const {clientX, clientY} = event.touches && 0 < event.touches.length ? event.touches[0] : event;
          rippleX = Math.round(clientX - rect.left);
          rippleY = Math.round(clientY - rect.top);
        }
        if (center) {
          var rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
          0 === rippleSize % 2 && (rippleSize += 1);
        } else {
          rippleSize = Math.sqrt((2 * Math.max(Math.abs((options ? options.clientWidth : 0) - rippleX), rippleX) + 2) ** 2 + (2 * Math.max(Math.abs((options ? options.clientHeight : 0) - rippleY), rippleY) + 2) ** 2);
        }
        null != event && event.touches ? null === startTimerCommit.current && (startTimerCommit.current = () => {
          startCommit({pulsate, rippleX, rippleY, rippleSize, cb});
        }, startTimer.start(DELAY_RIPPLE, () => {
          startTimerCommit.current && (startTimerCommit.current(), startTimerCommit.current = null);
        })) : startCommit({pulsate, rippleX, rippleY, rippleSize, cb});
      }
    }, [centerProp, startCommit, startTimer]), pulsate = React.useCallback(() => {
      start({}, {pulsate:!0});
    }, [start]), stop = React.useCallback((event, cb) => {
      startTimer.clear();
      "touchend" === (null == event ? void 0 : event.type) && startTimerCommit.current ? (startTimerCommit.current(), startTimerCommit.current = null, startTimer.start(0, () => {
        stop(event, cb);
      })) : (startTimerCommit.current = null, setRipples(oldRipples => 0 < oldRipples.length ? oldRipples.slice(1) : oldRipples), rippleCallback.current = cb);
    }, [startTimer]);
    React.useImperativeHandle(ref, () => ({pulsate, start, stop}), [pulsate, start, stop]);
    return (0,_jsxRuntime.jsx)(TouchRippleRoot, (0,_extends2.default)({className:(0,_clsx.default)(_touchRippleClasses.default.root, classes.root, className), ref:container}, inProps, {children:(0,_jsxRuntime.jsx)(_reactTransitionGroup.TransitionGroup, {component:null, exit:!0, children:ripples})}));
  });
  module.propTypes = {center:global.default.bool, classes:global.default.object, className:global.default.string};
  exports.default = module;
};

//# sourceMappingURL=module$node_modules$$mui$material$node$ButtonBase$TouchRipple.js.map
